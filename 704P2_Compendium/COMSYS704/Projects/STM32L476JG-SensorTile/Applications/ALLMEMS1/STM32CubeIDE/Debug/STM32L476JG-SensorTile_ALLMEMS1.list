
STM32L476JG-SensorTile_ALLMEMS1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a028  08004190  08004190  00004190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  0800e1b8  0800e1b8  0000e1b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800e7c8  0800e7c8  0000e7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800e7cc  0800e7cc  0000e7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f0  20000000  0800e7d0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000289c  200001f0  0800e9c0  000101f0  2**2
                  ALLOC
  7 .noinit       00000000  10000000  10000000  00000000  2**0
                  ALLOC
  8 .bss2         00000000  200001f0  200001f0  000101f0  2**0
                  CONTENTS
  9 ._user_heap_stack 00003000  20002a8c  20002a8c  00012a8c  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000101f0  2**0
                  CONTENTS, READONLY
 11 .comment      00000043  00000000  00000000  0001021e  2**0
                  CONTENTS, READONLY
 12 .debug_line   0003028f  00000000  00000000  00010261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000009e  00000000  00000000  000404f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0002aa06  00000000  00000000  0004058e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000584e  00000000  00000000  0006af94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001cc8  00000000  00000000  000707e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001209bd  00000000  00000000  000724b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000015f6  00000000  00000000  00192e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00011e57  00000000  00000000  00194463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00031f0c  00000000  00000000  001a62ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005c04  00000000  00000000  001d81c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004190 <__do_global_dtors_aux>:
 8004190:	b510      	push	{r4, lr}
 8004192:	4c05      	ldr	r4, [pc, #20]	; (80041a8 <__do_global_dtors_aux+0x18>)
 8004194:	7823      	ldrb	r3, [r4, #0]
 8004196:	b933      	cbnz	r3, 80041a6 <__do_global_dtors_aux+0x16>
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <__do_global_dtors_aux+0x1c>)
 800419a:	b113      	cbz	r3, 80041a2 <__do_global_dtors_aux+0x12>
 800419c:	4804      	ldr	r0, [pc, #16]	; (80041b0 <__do_global_dtors_aux+0x20>)
 800419e:	f3af 8000 	nop.w
 80041a2:	2301      	movs	r3, #1
 80041a4:	7023      	strb	r3, [r4, #0]
 80041a6:	bd10      	pop	{r4, pc}
 80041a8:	200001f0 	.word	0x200001f0
 80041ac:	00000000 	.word	0x00000000
 80041b0:	0800e1a0 	.word	0x0800e1a0

080041b4 <frame_dummy>:
 80041b4:	b508      	push	{r3, lr}
 80041b6:	4b03      	ldr	r3, [pc, #12]	; (80041c4 <frame_dummy+0x10>)
 80041b8:	b11b      	cbz	r3, 80041c2 <frame_dummy+0xe>
 80041ba:	4903      	ldr	r1, [pc, #12]	; (80041c8 <frame_dummy+0x14>)
 80041bc:	4803      	ldr	r0, [pc, #12]	; (80041cc <frame_dummy+0x18>)
 80041be:	f3af 8000 	nop.w
 80041c2:	bd08      	pop	{r3, pc}
 80041c4:	00000000 	.word	0x00000000
 80041c8:	200001f4 	.word	0x200001f4
 80041cc:	0800e1a0 	.word	0x0800e1a0

080041d0 <memchr>:
 80041d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80041d4:	2a10      	cmp	r2, #16
 80041d6:	db2b      	blt.n	8004230 <memchr+0x60>
 80041d8:	f010 0f07 	tst.w	r0, #7
 80041dc:	d008      	beq.n	80041f0 <memchr+0x20>
 80041de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80041e2:	3a01      	subs	r2, #1
 80041e4:	428b      	cmp	r3, r1
 80041e6:	d02d      	beq.n	8004244 <memchr+0x74>
 80041e8:	f010 0f07 	tst.w	r0, #7
 80041ec:	b342      	cbz	r2, 8004240 <memchr+0x70>
 80041ee:	d1f6      	bne.n	80041de <memchr+0xe>
 80041f0:	b4f0      	push	{r4, r5, r6, r7}
 80041f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80041f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80041fa:	f022 0407 	bic.w	r4, r2, #7
 80041fe:	f07f 0700 	mvns.w	r7, #0
 8004202:	2300      	movs	r3, #0
 8004204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004208:	3c08      	subs	r4, #8
 800420a:	ea85 0501 	eor.w	r5, r5, r1
 800420e:	ea86 0601 	eor.w	r6, r6, r1
 8004212:	fa85 f547 	uadd8	r5, r5, r7
 8004216:	faa3 f587 	sel	r5, r3, r7
 800421a:	fa86 f647 	uadd8	r6, r6, r7
 800421e:	faa5 f687 	sel	r6, r5, r7
 8004222:	b98e      	cbnz	r6, 8004248 <memchr+0x78>
 8004224:	d1ee      	bne.n	8004204 <memchr+0x34>
 8004226:	bcf0      	pop	{r4, r5, r6, r7}
 8004228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800422c:	f002 0207 	and.w	r2, r2, #7
 8004230:	b132      	cbz	r2, 8004240 <memchr+0x70>
 8004232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004236:	3a01      	subs	r2, #1
 8004238:	ea83 0301 	eor.w	r3, r3, r1
 800423c:	b113      	cbz	r3, 8004244 <memchr+0x74>
 800423e:	d1f8      	bne.n	8004232 <memchr+0x62>
 8004240:	2000      	movs	r0, #0
 8004242:	4770      	bx	lr
 8004244:	3801      	subs	r0, #1
 8004246:	4770      	bx	lr
 8004248:	2d00      	cmp	r5, #0
 800424a:	bf06      	itte	eq
 800424c:	4635      	moveq	r5, r6
 800424e:	3803      	subeq	r0, #3
 8004250:	3807      	subne	r0, #7
 8004252:	f015 0f01 	tst.w	r5, #1
 8004256:	d107      	bne.n	8004268 <memchr+0x98>
 8004258:	3001      	adds	r0, #1
 800425a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800425e:	bf02      	ittt	eq
 8004260:	3001      	addeq	r0, #1
 8004262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004266:	3001      	addeq	r0, #1
 8004268:	bcf0      	pop	{r4, r5, r6, r7}
 800426a:	3801      	subs	r0, #1
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop

08004270 <__aeabi_drsub>:
 8004270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004274:	e002      	b.n	800427c <__adddf3>
 8004276:	bf00      	nop

08004278 <__aeabi_dsub>:
 8004278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800427c <__adddf3>:
 800427c:	b530      	push	{r4, r5, lr}
 800427e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004286:	ea94 0f05 	teq	r4, r5
 800428a:	bf08      	it	eq
 800428c:	ea90 0f02 	teqeq	r0, r2
 8004290:	bf1f      	itttt	ne
 8004292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800429a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800429e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80042a2:	f000 80e2 	beq.w	800446a <__adddf3+0x1ee>
 80042a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80042aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80042ae:	bfb8      	it	lt
 80042b0:	426d      	neglt	r5, r5
 80042b2:	dd0c      	ble.n	80042ce <__adddf3+0x52>
 80042b4:	442c      	add	r4, r5
 80042b6:	ea80 0202 	eor.w	r2, r0, r2
 80042ba:	ea81 0303 	eor.w	r3, r1, r3
 80042be:	ea82 0000 	eor.w	r0, r2, r0
 80042c2:	ea83 0101 	eor.w	r1, r3, r1
 80042c6:	ea80 0202 	eor.w	r2, r0, r2
 80042ca:	ea81 0303 	eor.w	r3, r1, r3
 80042ce:	2d36      	cmp	r5, #54	; 0x36
 80042d0:	bf88      	it	hi
 80042d2:	bd30      	pophi	{r4, r5, pc}
 80042d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80042d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80042dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80042e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80042e4:	d002      	beq.n	80042ec <__adddf3+0x70>
 80042e6:	4240      	negs	r0, r0
 80042e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80042ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80042f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80042f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80042f8:	d002      	beq.n	8004300 <__adddf3+0x84>
 80042fa:	4252      	negs	r2, r2
 80042fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004300:	ea94 0f05 	teq	r4, r5
 8004304:	f000 80a7 	beq.w	8004456 <__adddf3+0x1da>
 8004308:	f1a4 0401 	sub.w	r4, r4, #1
 800430c:	f1d5 0e20 	rsbs	lr, r5, #32
 8004310:	db0d      	blt.n	800432e <__adddf3+0xb2>
 8004312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004316:	fa22 f205 	lsr.w	r2, r2, r5
 800431a:	1880      	adds	r0, r0, r2
 800431c:	f141 0100 	adc.w	r1, r1, #0
 8004320:	fa03 f20e 	lsl.w	r2, r3, lr
 8004324:	1880      	adds	r0, r0, r2
 8004326:	fa43 f305 	asr.w	r3, r3, r5
 800432a:	4159      	adcs	r1, r3
 800432c:	e00e      	b.n	800434c <__adddf3+0xd0>
 800432e:	f1a5 0520 	sub.w	r5, r5, #32
 8004332:	f10e 0e20 	add.w	lr, lr, #32
 8004336:	2a01      	cmp	r2, #1
 8004338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800433c:	bf28      	it	cs
 800433e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004342:	fa43 f305 	asr.w	r3, r3, r5
 8004346:	18c0      	adds	r0, r0, r3
 8004348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800434c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004350:	d507      	bpl.n	8004362 <__adddf3+0xe6>
 8004352:	f04f 0e00 	mov.w	lr, #0
 8004356:	f1dc 0c00 	rsbs	ip, ip, #0
 800435a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800435e:	eb6e 0101 	sbc.w	r1, lr, r1
 8004362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004366:	d31b      	bcc.n	80043a0 <__adddf3+0x124>
 8004368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800436c:	d30c      	bcc.n	8004388 <__adddf3+0x10c>
 800436e:	0849      	lsrs	r1, r1, #1
 8004370:	ea5f 0030 	movs.w	r0, r0, rrx
 8004374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004378:	f104 0401 	add.w	r4, r4, #1
 800437c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004384:	f080 809a 	bcs.w	80044bc <__adddf3+0x240>
 8004388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800438c:	bf08      	it	eq
 800438e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004392:	f150 0000 	adcs.w	r0, r0, #0
 8004396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800439a:	ea41 0105 	orr.w	r1, r1, r5
 800439e:	bd30      	pop	{r4, r5, pc}
 80043a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80043a4:	4140      	adcs	r0, r0
 80043a6:	eb41 0101 	adc.w	r1, r1, r1
 80043aa:	3c01      	subs	r4, #1
 80043ac:	bf28      	it	cs
 80043ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80043b2:	d2e9      	bcs.n	8004388 <__adddf3+0x10c>
 80043b4:	f091 0f00 	teq	r1, #0
 80043b8:	bf04      	itt	eq
 80043ba:	4601      	moveq	r1, r0
 80043bc:	2000      	moveq	r0, #0
 80043be:	fab1 f381 	clz	r3, r1
 80043c2:	bf08      	it	eq
 80043c4:	3320      	addeq	r3, #32
 80043c6:	f1a3 030b 	sub.w	r3, r3, #11
 80043ca:	f1b3 0220 	subs.w	r2, r3, #32
 80043ce:	da0c      	bge.n	80043ea <__adddf3+0x16e>
 80043d0:	320c      	adds	r2, #12
 80043d2:	dd08      	ble.n	80043e6 <__adddf3+0x16a>
 80043d4:	f102 0c14 	add.w	ip, r2, #20
 80043d8:	f1c2 020c 	rsb	r2, r2, #12
 80043dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80043e0:	fa21 f102 	lsr.w	r1, r1, r2
 80043e4:	e00c      	b.n	8004400 <__adddf3+0x184>
 80043e6:	f102 0214 	add.w	r2, r2, #20
 80043ea:	bfd8      	it	le
 80043ec:	f1c2 0c20 	rsble	ip, r2, #32
 80043f0:	fa01 f102 	lsl.w	r1, r1, r2
 80043f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80043f8:	bfdc      	itt	le
 80043fa:	ea41 010c 	orrle.w	r1, r1, ip
 80043fe:	4090      	lslle	r0, r2
 8004400:	1ae4      	subs	r4, r4, r3
 8004402:	bfa2      	ittt	ge
 8004404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004408:	4329      	orrge	r1, r5
 800440a:	bd30      	popge	{r4, r5, pc}
 800440c:	ea6f 0404 	mvn.w	r4, r4
 8004410:	3c1f      	subs	r4, #31
 8004412:	da1c      	bge.n	800444e <__adddf3+0x1d2>
 8004414:	340c      	adds	r4, #12
 8004416:	dc0e      	bgt.n	8004436 <__adddf3+0x1ba>
 8004418:	f104 0414 	add.w	r4, r4, #20
 800441c:	f1c4 0220 	rsb	r2, r4, #32
 8004420:	fa20 f004 	lsr.w	r0, r0, r4
 8004424:	fa01 f302 	lsl.w	r3, r1, r2
 8004428:	ea40 0003 	orr.w	r0, r0, r3
 800442c:	fa21 f304 	lsr.w	r3, r1, r4
 8004430:	ea45 0103 	orr.w	r1, r5, r3
 8004434:	bd30      	pop	{r4, r5, pc}
 8004436:	f1c4 040c 	rsb	r4, r4, #12
 800443a:	f1c4 0220 	rsb	r2, r4, #32
 800443e:	fa20 f002 	lsr.w	r0, r0, r2
 8004442:	fa01 f304 	lsl.w	r3, r1, r4
 8004446:	ea40 0003 	orr.w	r0, r0, r3
 800444a:	4629      	mov	r1, r5
 800444c:	bd30      	pop	{r4, r5, pc}
 800444e:	fa21 f004 	lsr.w	r0, r1, r4
 8004452:	4629      	mov	r1, r5
 8004454:	bd30      	pop	{r4, r5, pc}
 8004456:	f094 0f00 	teq	r4, #0
 800445a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800445e:	bf06      	itte	eq
 8004460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004464:	3401      	addeq	r4, #1
 8004466:	3d01      	subne	r5, #1
 8004468:	e74e      	b.n	8004308 <__adddf3+0x8c>
 800446a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800446e:	bf18      	it	ne
 8004470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004474:	d029      	beq.n	80044ca <__adddf3+0x24e>
 8004476:	ea94 0f05 	teq	r4, r5
 800447a:	bf08      	it	eq
 800447c:	ea90 0f02 	teqeq	r0, r2
 8004480:	d005      	beq.n	800448e <__adddf3+0x212>
 8004482:	ea54 0c00 	orrs.w	ip, r4, r0
 8004486:	bf04      	itt	eq
 8004488:	4619      	moveq	r1, r3
 800448a:	4610      	moveq	r0, r2
 800448c:	bd30      	pop	{r4, r5, pc}
 800448e:	ea91 0f03 	teq	r1, r3
 8004492:	bf1e      	ittt	ne
 8004494:	2100      	movne	r1, #0
 8004496:	2000      	movne	r0, #0
 8004498:	bd30      	popne	{r4, r5, pc}
 800449a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800449e:	d105      	bne.n	80044ac <__adddf3+0x230>
 80044a0:	0040      	lsls	r0, r0, #1
 80044a2:	4149      	adcs	r1, r1
 80044a4:	bf28      	it	cs
 80044a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80044aa:	bd30      	pop	{r4, r5, pc}
 80044ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80044b0:	bf3c      	itt	cc
 80044b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80044b6:	bd30      	popcc	{r4, r5, pc}
 80044b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80044bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80044c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044c4:	f04f 0000 	mov.w	r0, #0
 80044c8:	bd30      	pop	{r4, r5, pc}
 80044ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80044ce:	bf1a      	itte	ne
 80044d0:	4619      	movne	r1, r3
 80044d2:	4610      	movne	r0, r2
 80044d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80044d8:	bf1c      	itt	ne
 80044da:	460b      	movne	r3, r1
 80044dc:	4602      	movne	r2, r0
 80044de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80044e2:	bf06      	itte	eq
 80044e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80044e8:	ea91 0f03 	teqeq	r1, r3
 80044ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80044f0:	bd30      	pop	{r4, r5, pc}
 80044f2:	bf00      	nop

080044f4 <__aeabi_ui2d>:
 80044f4:	f090 0f00 	teq	r0, #0
 80044f8:	bf04      	itt	eq
 80044fa:	2100      	moveq	r1, #0
 80044fc:	4770      	bxeq	lr
 80044fe:	b530      	push	{r4, r5, lr}
 8004500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004508:	f04f 0500 	mov.w	r5, #0
 800450c:	f04f 0100 	mov.w	r1, #0
 8004510:	e750      	b.n	80043b4 <__adddf3+0x138>
 8004512:	bf00      	nop

08004514 <__aeabi_i2d>:
 8004514:	f090 0f00 	teq	r0, #0
 8004518:	bf04      	itt	eq
 800451a:	2100      	moveq	r1, #0
 800451c:	4770      	bxeq	lr
 800451e:	b530      	push	{r4, r5, lr}
 8004520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800452c:	bf48      	it	mi
 800452e:	4240      	negmi	r0, r0
 8004530:	f04f 0100 	mov.w	r1, #0
 8004534:	e73e      	b.n	80043b4 <__adddf3+0x138>
 8004536:	bf00      	nop

08004538 <__aeabi_f2d>:
 8004538:	0042      	lsls	r2, r0, #1
 800453a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800453e:	ea4f 0131 	mov.w	r1, r1, rrx
 8004542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004546:	bf1f      	itttt	ne
 8004548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800454c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004554:	4770      	bxne	lr
 8004556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800455a:	bf08      	it	eq
 800455c:	4770      	bxeq	lr
 800455e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8004562:	bf04      	itt	eq
 8004564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8004568:	4770      	bxeq	lr
 800456a:	b530      	push	{r4, r5, lr}
 800456c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004578:	e71c      	b.n	80043b4 <__adddf3+0x138>
 800457a:	bf00      	nop

0800457c <__aeabi_ul2d>:
 800457c:	ea50 0201 	orrs.w	r2, r0, r1
 8004580:	bf08      	it	eq
 8004582:	4770      	bxeq	lr
 8004584:	b530      	push	{r4, r5, lr}
 8004586:	f04f 0500 	mov.w	r5, #0
 800458a:	e00a      	b.n	80045a2 <__aeabi_l2d+0x16>

0800458c <__aeabi_l2d>:
 800458c:	ea50 0201 	orrs.w	r2, r0, r1
 8004590:	bf08      	it	eq
 8004592:	4770      	bxeq	lr
 8004594:	b530      	push	{r4, r5, lr}
 8004596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800459a:	d502      	bpl.n	80045a2 <__aeabi_l2d+0x16>
 800459c:	4240      	negs	r0, r0
 800459e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80045a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80045a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80045aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80045ae:	f43f aed8 	beq.w	8004362 <__adddf3+0xe6>
 80045b2:	f04f 0203 	mov.w	r2, #3
 80045b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80045ba:	bf18      	it	ne
 80045bc:	3203      	addne	r2, #3
 80045be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80045c2:	bf18      	it	ne
 80045c4:	3203      	addne	r2, #3
 80045c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80045ca:	f1c2 0320 	rsb	r3, r2, #32
 80045ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80045d2:	fa20 f002 	lsr.w	r0, r0, r2
 80045d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80045da:	ea40 000e 	orr.w	r0, r0, lr
 80045de:	fa21 f102 	lsr.w	r1, r1, r2
 80045e2:	4414      	add	r4, r2
 80045e4:	e6bd      	b.n	8004362 <__adddf3+0xe6>
 80045e6:	bf00      	nop

080045e8 <__aeabi_dmul>:
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80045ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80045f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80045f6:	bf1d      	ittte	ne
 80045f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80045fc:	ea94 0f0c 	teqne	r4, ip
 8004600:	ea95 0f0c 	teqne	r5, ip
 8004604:	f000 f8de 	bleq	80047c4 <__aeabi_dmul+0x1dc>
 8004608:	442c      	add	r4, r5
 800460a:	ea81 0603 	eor.w	r6, r1, r3
 800460e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800461a:	bf18      	it	ne
 800461c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004628:	d038      	beq.n	800469c <__aeabi_dmul+0xb4>
 800462a:	fba0 ce02 	umull	ip, lr, r0, r2
 800462e:	f04f 0500 	mov.w	r5, #0
 8004632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800463a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800463e:	f04f 0600 	mov.w	r6, #0
 8004642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004646:	f09c 0f00 	teq	ip, #0
 800464a:	bf18      	it	ne
 800464c:	f04e 0e01 	orrne.w	lr, lr, #1
 8004650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800465c:	d204      	bcs.n	8004668 <__aeabi_dmul+0x80>
 800465e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004662:	416d      	adcs	r5, r5
 8004664:	eb46 0606 	adc.w	r6, r6, r6
 8004668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800466c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800467c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004680:	bf88      	it	hi
 8004682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004686:	d81e      	bhi.n	80046c6 <__aeabi_dmul+0xde>
 8004688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800468c:	bf08      	it	eq
 800468e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004692:	f150 0000 	adcs.w	r0, r0, #0
 8004696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800469a:	bd70      	pop	{r4, r5, r6, pc}
 800469c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80046a0:	ea46 0101 	orr.w	r1, r6, r1
 80046a4:	ea40 0002 	orr.w	r0, r0, r2
 80046a8:	ea81 0103 	eor.w	r1, r1, r3
 80046ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80046b0:	bfc2      	ittt	gt
 80046b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80046b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80046ba:	bd70      	popgt	{r4, r5, r6, pc}
 80046bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80046c0:	f04f 0e00 	mov.w	lr, #0
 80046c4:	3c01      	subs	r4, #1
 80046c6:	f300 80ab 	bgt.w	8004820 <__aeabi_dmul+0x238>
 80046ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80046ce:	bfde      	ittt	le
 80046d0:	2000      	movle	r0, #0
 80046d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80046d6:	bd70      	pople	{r4, r5, r6, pc}
 80046d8:	f1c4 0400 	rsb	r4, r4, #0
 80046dc:	3c20      	subs	r4, #32
 80046de:	da35      	bge.n	800474c <__aeabi_dmul+0x164>
 80046e0:	340c      	adds	r4, #12
 80046e2:	dc1b      	bgt.n	800471c <__aeabi_dmul+0x134>
 80046e4:	f104 0414 	add.w	r4, r4, #20
 80046e8:	f1c4 0520 	rsb	r5, r4, #32
 80046ec:	fa00 f305 	lsl.w	r3, r0, r5
 80046f0:	fa20 f004 	lsr.w	r0, r0, r4
 80046f4:	fa01 f205 	lsl.w	r2, r1, r5
 80046f8:	ea40 0002 	orr.w	r0, r0, r2
 80046fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8004700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004708:	fa21 f604 	lsr.w	r6, r1, r4
 800470c:	eb42 0106 	adc.w	r1, r2, r6
 8004710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004714:	bf08      	it	eq
 8004716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800471a:	bd70      	pop	{r4, r5, r6, pc}
 800471c:	f1c4 040c 	rsb	r4, r4, #12
 8004720:	f1c4 0520 	rsb	r5, r4, #32
 8004724:	fa00 f304 	lsl.w	r3, r0, r4
 8004728:	fa20 f005 	lsr.w	r0, r0, r5
 800472c:	fa01 f204 	lsl.w	r2, r1, r4
 8004730:	ea40 0002 	orr.w	r0, r0, r2
 8004734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800473c:	f141 0100 	adc.w	r1, r1, #0
 8004740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004744:	bf08      	it	eq
 8004746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800474a:	bd70      	pop	{r4, r5, r6, pc}
 800474c:	f1c4 0520 	rsb	r5, r4, #32
 8004750:	fa00 f205 	lsl.w	r2, r0, r5
 8004754:	ea4e 0e02 	orr.w	lr, lr, r2
 8004758:	fa20 f304 	lsr.w	r3, r0, r4
 800475c:	fa01 f205 	lsl.w	r2, r1, r5
 8004760:	ea43 0302 	orr.w	r3, r3, r2
 8004764:	fa21 f004 	lsr.w	r0, r1, r4
 8004768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800476c:	fa21 f204 	lsr.w	r2, r1, r4
 8004770:	ea20 0002 	bic.w	r0, r0, r2
 8004774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800477c:	bf08      	it	eq
 800477e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004782:	bd70      	pop	{r4, r5, r6, pc}
 8004784:	f094 0f00 	teq	r4, #0
 8004788:	d10f      	bne.n	80047aa <__aeabi_dmul+0x1c2>
 800478a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800478e:	0040      	lsls	r0, r0, #1
 8004790:	eb41 0101 	adc.w	r1, r1, r1
 8004794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004798:	bf08      	it	eq
 800479a:	3c01      	subeq	r4, #1
 800479c:	d0f7      	beq.n	800478e <__aeabi_dmul+0x1a6>
 800479e:	ea41 0106 	orr.w	r1, r1, r6
 80047a2:	f095 0f00 	teq	r5, #0
 80047a6:	bf18      	it	ne
 80047a8:	4770      	bxne	lr
 80047aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80047ae:	0052      	lsls	r2, r2, #1
 80047b0:	eb43 0303 	adc.w	r3, r3, r3
 80047b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80047b8:	bf08      	it	eq
 80047ba:	3d01      	subeq	r5, #1
 80047bc:	d0f7      	beq.n	80047ae <__aeabi_dmul+0x1c6>
 80047be:	ea43 0306 	orr.w	r3, r3, r6
 80047c2:	4770      	bx	lr
 80047c4:	ea94 0f0c 	teq	r4, ip
 80047c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80047cc:	bf18      	it	ne
 80047ce:	ea95 0f0c 	teqne	r5, ip
 80047d2:	d00c      	beq.n	80047ee <__aeabi_dmul+0x206>
 80047d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80047d8:	bf18      	it	ne
 80047da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047de:	d1d1      	bne.n	8004784 <__aeabi_dmul+0x19c>
 80047e0:	ea81 0103 	eor.w	r1, r1, r3
 80047e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80047e8:	f04f 0000 	mov.w	r0, #0
 80047ec:	bd70      	pop	{r4, r5, r6, pc}
 80047ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80047f2:	bf06      	itte	eq
 80047f4:	4610      	moveq	r0, r2
 80047f6:	4619      	moveq	r1, r3
 80047f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047fc:	d019      	beq.n	8004832 <__aeabi_dmul+0x24a>
 80047fe:	ea94 0f0c 	teq	r4, ip
 8004802:	d102      	bne.n	800480a <__aeabi_dmul+0x222>
 8004804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8004808:	d113      	bne.n	8004832 <__aeabi_dmul+0x24a>
 800480a:	ea95 0f0c 	teq	r5, ip
 800480e:	d105      	bne.n	800481c <__aeabi_dmul+0x234>
 8004810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004814:	bf1c      	itt	ne
 8004816:	4610      	movne	r0, r2
 8004818:	4619      	movne	r1, r3
 800481a:	d10a      	bne.n	8004832 <__aeabi_dmul+0x24a>
 800481c:	ea81 0103 	eor.w	r1, r1, r3
 8004820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800482c:	f04f 0000 	mov.w	r0, #0
 8004830:	bd70      	pop	{r4, r5, r6, pc}
 8004832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800483a:	bd70      	pop	{r4, r5, r6, pc}

0800483c <__aeabi_ddiv>:
 800483c:	b570      	push	{r4, r5, r6, lr}
 800483e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800484a:	bf1d      	ittte	ne
 800484c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004850:	ea94 0f0c 	teqne	r4, ip
 8004854:	ea95 0f0c 	teqne	r5, ip
 8004858:	f000 f8a7 	bleq	80049aa <__aeabi_ddiv+0x16e>
 800485c:	eba4 0405 	sub.w	r4, r4, r5
 8004860:	ea81 0e03 	eor.w	lr, r1, r3
 8004864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800486c:	f000 8088 	beq.w	8004980 <__aeabi_ddiv+0x144>
 8004870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800487c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800488c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004894:	429d      	cmp	r5, r3
 8004896:	bf08      	it	eq
 8004898:	4296      	cmpeq	r6, r2
 800489a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800489e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80048a2:	d202      	bcs.n	80048aa <__aeabi_ddiv+0x6e>
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80048aa:	1ab6      	subs	r6, r6, r2
 80048ac:	eb65 0503 	sbc.w	r5, r5, r3
 80048b0:	085b      	lsrs	r3, r3, #1
 80048b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80048b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80048ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80048be:	ebb6 0e02 	subs.w	lr, r6, r2
 80048c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048c6:	bf22      	ittt	cs
 80048c8:	1ab6      	subcs	r6, r6, r2
 80048ca:	4675      	movcs	r5, lr
 80048cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80048d0:	085b      	lsrs	r3, r3, #1
 80048d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80048d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80048da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048de:	bf22      	ittt	cs
 80048e0:	1ab6      	subcs	r6, r6, r2
 80048e2:	4675      	movcs	r5, lr
 80048e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80048e8:	085b      	lsrs	r3, r3, #1
 80048ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80048ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80048f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048f6:	bf22      	ittt	cs
 80048f8:	1ab6      	subcs	r6, r6, r2
 80048fa:	4675      	movcs	r5, lr
 80048fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	ea4f 0232 	mov.w	r2, r2, rrx
 8004906:	ebb6 0e02 	subs.w	lr, r6, r2
 800490a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800490e:	bf22      	ittt	cs
 8004910:	1ab6      	subcs	r6, r6, r2
 8004912:	4675      	movcs	r5, lr
 8004914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004918:	ea55 0e06 	orrs.w	lr, r5, r6
 800491c:	d018      	beq.n	8004950 <__aeabi_ddiv+0x114>
 800491e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8004922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8004926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800492a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800492e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8004936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800493a:	d1c0      	bne.n	80048be <__aeabi_ddiv+0x82>
 800493c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004940:	d10b      	bne.n	800495a <__aeabi_ddiv+0x11e>
 8004942:	ea41 0100 	orr.w	r1, r1, r0
 8004946:	f04f 0000 	mov.w	r0, #0
 800494a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800494e:	e7b6      	b.n	80048be <__aeabi_ddiv+0x82>
 8004950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004954:	bf04      	itt	eq
 8004956:	4301      	orreq	r1, r0
 8004958:	2000      	moveq	r0, #0
 800495a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800495e:	bf88      	it	hi
 8004960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004964:	f63f aeaf 	bhi.w	80046c6 <__aeabi_dmul+0xde>
 8004968:	ebb5 0c03 	subs.w	ip, r5, r3
 800496c:	bf04      	itt	eq
 800496e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004976:	f150 0000 	adcs.w	r0, r0, #0
 800497a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800498c:	bfc2      	ittt	gt
 800498e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004996:	bd70      	popgt	{r4, r5, r6, pc}
 8004998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800499c:	f04f 0e00 	mov.w	lr, #0
 80049a0:	3c01      	subs	r4, #1
 80049a2:	e690      	b.n	80046c6 <__aeabi_dmul+0xde>
 80049a4:	ea45 0e06 	orr.w	lr, r5, r6
 80049a8:	e68d      	b.n	80046c6 <__aeabi_dmul+0xde>
 80049aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80049ae:	ea94 0f0c 	teq	r4, ip
 80049b2:	bf08      	it	eq
 80049b4:	ea95 0f0c 	teqeq	r5, ip
 80049b8:	f43f af3b 	beq.w	8004832 <__aeabi_dmul+0x24a>
 80049bc:	ea94 0f0c 	teq	r4, ip
 80049c0:	d10a      	bne.n	80049d8 <__aeabi_ddiv+0x19c>
 80049c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80049c6:	f47f af34 	bne.w	8004832 <__aeabi_dmul+0x24a>
 80049ca:	ea95 0f0c 	teq	r5, ip
 80049ce:	f47f af25 	bne.w	800481c <__aeabi_dmul+0x234>
 80049d2:	4610      	mov	r0, r2
 80049d4:	4619      	mov	r1, r3
 80049d6:	e72c      	b.n	8004832 <__aeabi_dmul+0x24a>
 80049d8:	ea95 0f0c 	teq	r5, ip
 80049dc:	d106      	bne.n	80049ec <__aeabi_ddiv+0x1b0>
 80049de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80049e2:	f43f aefd 	beq.w	80047e0 <__aeabi_dmul+0x1f8>
 80049e6:	4610      	mov	r0, r2
 80049e8:	4619      	mov	r1, r3
 80049ea:	e722      	b.n	8004832 <__aeabi_dmul+0x24a>
 80049ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80049f0:	bf18      	it	ne
 80049f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80049f6:	f47f aec5 	bne.w	8004784 <__aeabi_dmul+0x19c>
 80049fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80049fe:	f47f af0d 	bne.w	800481c <__aeabi_dmul+0x234>
 8004a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8004a06:	f47f aeeb 	bne.w	80047e0 <__aeabi_dmul+0x1f8>
 8004a0a:	e712      	b.n	8004832 <__aeabi_dmul+0x24a>

08004a0c <__gedf2>:
 8004a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8004a10:	e006      	b.n	8004a20 <__cmpdf2+0x4>
 8004a12:	bf00      	nop

08004a14 <__ledf2>:
 8004a14:	f04f 0c01 	mov.w	ip, #1
 8004a18:	e002      	b.n	8004a20 <__cmpdf2+0x4>
 8004a1a:	bf00      	nop

08004a1c <__cmpdf2>:
 8004a1c:	f04f 0c01 	mov.w	ip, #1
 8004a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8004a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a30:	bf18      	it	ne
 8004a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8004a36:	d01b      	beq.n	8004a70 <__cmpdf2+0x54>
 8004a38:	b001      	add	sp, #4
 8004a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004a3e:	bf0c      	ite	eq
 8004a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004a44:	ea91 0f03 	teqne	r1, r3
 8004a48:	bf02      	ittt	eq
 8004a4a:	ea90 0f02 	teqeq	r0, r2
 8004a4e:	2000      	moveq	r0, #0
 8004a50:	4770      	bxeq	lr
 8004a52:	f110 0f00 	cmn.w	r0, #0
 8004a56:	ea91 0f03 	teq	r1, r3
 8004a5a:	bf58      	it	pl
 8004a5c:	4299      	cmppl	r1, r3
 8004a5e:	bf08      	it	eq
 8004a60:	4290      	cmpeq	r0, r2
 8004a62:	bf2c      	ite	cs
 8004a64:	17d8      	asrcs	r0, r3, #31
 8004a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004a6a:	f040 0001 	orr.w	r0, r0, #1
 8004a6e:	4770      	bx	lr
 8004a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a78:	d102      	bne.n	8004a80 <__cmpdf2+0x64>
 8004a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004a7e:	d107      	bne.n	8004a90 <__cmpdf2+0x74>
 8004a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a88:	d1d6      	bne.n	8004a38 <__cmpdf2+0x1c>
 8004a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004a8e:	d0d3      	beq.n	8004a38 <__cmpdf2+0x1c>
 8004a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop

08004a98 <__aeabi_cdrcmple>:
 8004a98:	4684      	mov	ip, r0
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	4662      	mov	r2, ip
 8004a9e:	468c      	mov	ip, r1
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4663      	mov	r3, ip
 8004aa4:	e000      	b.n	8004aa8 <__aeabi_cdcmpeq>
 8004aa6:	bf00      	nop

08004aa8 <__aeabi_cdcmpeq>:
 8004aa8:	b501      	push	{r0, lr}
 8004aaa:	f7ff ffb7 	bl	8004a1c <__cmpdf2>
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	bf48      	it	mi
 8004ab2:	f110 0f00 	cmnmi.w	r0, #0
 8004ab6:	bd01      	pop	{r0, pc}

08004ab8 <__aeabi_dcmpeq>:
 8004ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004abc:	f7ff fff4 	bl	8004aa8 <__aeabi_cdcmpeq>
 8004ac0:	bf0c      	ite	eq
 8004ac2:	2001      	moveq	r0, #1
 8004ac4:	2000      	movne	r0, #0
 8004ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8004aca:	bf00      	nop

08004acc <__aeabi_dcmplt>:
 8004acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ad0:	f7ff ffea 	bl	8004aa8 <__aeabi_cdcmpeq>
 8004ad4:	bf34      	ite	cc
 8004ad6:	2001      	movcc	r0, #1
 8004ad8:	2000      	movcs	r0, #0
 8004ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ade:	bf00      	nop

08004ae0 <__aeabi_dcmple>:
 8004ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ae4:	f7ff ffe0 	bl	8004aa8 <__aeabi_cdcmpeq>
 8004ae8:	bf94      	ite	ls
 8004aea:	2001      	movls	r0, #1
 8004aec:	2000      	movhi	r0, #0
 8004aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8004af2:	bf00      	nop

08004af4 <__aeabi_dcmpge>:
 8004af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004af8:	f7ff ffce 	bl	8004a98 <__aeabi_cdrcmple>
 8004afc:	bf94      	ite	ls
 8004afe:	2001      	movls	r0, #1
 8004b00:	2000      	movhi	r0, #0
 8004b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b06:	bf00      	nop

08004b08 <__aeabi_dcmpgt>:
 8004b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004b0c:	f7ff ffc4 	bl	8004a98 <__aeabi_cdrcmple>
 8004b10:	bf34      	ite	cc
 8004b12:	2001      	movcc	r0, #1
 8004b14:	2000      	movcs	r0, #0
 8004b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b1a:	bf00      	nop

08004b1c <__aeabi_d2iz>:
 8004b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004b24:	d215      	bcs.n	8004b52 <__aeabi_d2iz+0x36>
 8004b26:	d511      	bpl.n	8004b4c <__aeabi_d2iz+0x30>
 8004b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004b30:	d912      	bls.n	8004b58 <__aeabi_d2iz+0x3c>
 8004b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004b42:	fa23 f002 	lsr.w	r0, r3, r2
 8004b46:	bf18      	it	ne
 8004b48:	4240      	negne	r0, r0
 8004b4a:	4770      	bx	lr
 8004b4c:	f04f 0000 	mov.w	r0, #0
 8004b50:	4770      	bx	lr
 8004b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004b56:	d105      	bne.n	8004b64 <__aeabi_d2iz+0x48>
 8004b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8004b5c:	bf08      	it	eq
 8004b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8004b62:	4770      	bx	lr
 8004b64:	f04f 0000 	mov.w	r0, #0
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop

08004b6c <__aeabi_d2f>:
 8004b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8004b74:	bf24      	itt	cs
 8004b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8004b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8004b7e:	d90d      	bls.n	8004b9c <__aeabi_d2f+0x30>
 8004b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004b94:	bf08      	it	eq
 8004b96:	f020 0001 	biceq.w	r0, r0, #1
 8004b9a:	4770      	bx	lr
 8004b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004ba0:	d121      	bne.n	8004be6 <__aeabi_d2f+0x7a>
 8004ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004ba6:	bfbc      	itt	lt
 8004ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8004bac:	4770      	bxlt	lr
 8004bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004bb6:	f1c2 0218 	rsb	r2, r2, #24
 8004bba:	f1c2 0c20 	rsb	ip, r2, #32
 8004bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8004bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8004bc6:	bf18      	it	ne
 8004bc8:	f040 0001 	orrne.w	r0, r0, #1
 8004bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004bd8:	ea40 000c 	orr.w	r0, r0, ip
 8004bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8004be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004be4:	e7cc      	b.n	8004b80 <__aeabi_d2f+0x14>
 8004be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004bea:	d107      	bne.n	8004bfc <__aeabi_d2f+0x90>
 8004bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004bf0:	bf1e      	ittt	ne
 8004bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8004bfa:	4770      	bxne	lr
 8004bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8004c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop

08004c0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004c0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c44 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004c10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004c12:	e003      	b.n	8004c1c <LoopCopyDataInit>

08004c14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004c14:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004c16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004c18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004c1a:	3104      	adds	r1, #4

08004c1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004c1c:	480b      	ldr	r0, [pc, #44]	; (8004c4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8004c1e:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004c20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004c22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004c24:	d3f6      	bcc.n	8004c14 <CopyDataInit>
	ldr	r2, =_sbss
 8004c26:	4a0b      	ldr	r2, [pc, #44]	; (8004c54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004c28:	e002      	b.n	8004c30 <LoopFillZerobss>

08004c2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004c2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004c2c:	f842 3b04 	str.w	r3, [r2], #4

08004c30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004c30:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <LoopForever+0x16>)
	cmp	r2, r3
 8004c32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004c34:	d3f9      	bcc.n	8004c2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004c36:	f002 f861 	bl	8006cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c3a:	f008 fef7 	bl	800da2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004c3e:	f001 fa43 	bl	80060c8 <main>

08004c42 <LoopForever>:

LoopForever:
    b LoopForever
 8004c42:	e7fe      	b.n	8004c42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004c44:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004c48:	0800e7d0 	.word	0x0800e7d0
	ldr	r0, =_sdata
 8004c4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004c50:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 8004c54:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 8004c58:	20002a8c 	.word	0x20002a8c

08004c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004c5c:	e7fe      	b.n	8004c5c <ADC1_2_IRQHandler>
	...

08004c60 <GAP_ConnectionComplete_CB>:
 * @param  uint16_t handle Connection handle
 * @retval None
 */
static void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
  connected = TRUE;
 8004c60:	4b03      	ldr	r3, [pc, #12]	; (8004c70 <GAP_ConnectionComplete_CB+0x10>)
 8004c62:	2201      	movs	r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8004c66:	8099      	strh	r1, [r3, #4]

#ifdef ALLMEMS1_DEBUG_CONNECTION
  ALLMEMS1_PRINTF("\r\n>>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n\r\n",addr[5],addr[4],addr[3],addr[2],addr[1],addr[0]);
#endif /* ALLMEMS1_DEBUG_CONNECTION */

  ConnectionBleStatus=0;
 8004c68:	4b02      	ldr	r3, [pc, #8]	; (8004c74 <GAP_ConnectionComplete_CB+0x14>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
  


}
 8004c6e:	4770      	bx	lr
 8004c70:	2000020c 	.word	0x2000020c
 8004c74:	2000081c 	.word	0x2000081c

08004c78 <AccGyroMag_AttributeModified_CB>:
 * is subscribed or not to the Acc,Gyro and Mag service
 * @param uint8_t *att_data attribute data
 * @retval None
 */
static void AccGyroMag_AttributeModified_CB(uint8_t *att_data)
{
 8004c78:	b500      	push	{lr}
 8004c7a:	b0c1      	sub	sp, #260	; 0x104
  if (att_data[0] == 01) {
 8004c7c:	7803      	ldrb	r3, [r0, #0]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d011      	beq.n	8004ca6 <AccGyroMag_AttributeModified_CB+0x2e>
    {
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
      /* Set the Capture Compare Register value */
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + uhCCR4_Val));
    }
  } else if (att_data[0] == 0) {
 8004c82:	b32b      	cbz	r3, 8004cd0 <AccGyroMag_AttributeModified_CB+0x58>
      /* Stopping Error */
      Error_Handler();
    }      
  }

    XPRINTF("--->Acc/Gyro/Mag=%s", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG) ? " ON\r\n" : " OFF\r\n\n");
 8004c84:	4b1a      	ldr	r3, [pc, #104]	; (8004cf0 <AccGyroMag_AttributeModified_CB+0x78>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f013 0f04 	tst.w	r3, #4
 8004c8c:	d02e      	beq.n	8004cec <AccGyroMag_AttributeModified_CB+0x74>
 8004c8e:	4a19      	ldr	r2, [pc, #100]	; (8004cf4 <AccGyroMag_AttributeModified_CB+0x7c>)
 8004c90:	4919      	ldr	r1, [pc, #100]	; (8004cf8 <AccGyroMag_AttributeModified_CB+0x80>)
 8004c92:	4668      	mov	r0, sp
 8004c94:	f008 fe8c 	bl	800d9b0 <siprintf>
 8004c98:	4601      	mov	r1, r0
 8004c9a:	4668      	mov	r0, sp
 8004c9c:	f001 fd1a 	bl	80066d4 <CDC_Fill_Buffer>

}
 8004ca0:	b041      	add	sp, #260	; 0x104
 8004ca2:	f85d fb04 	ldr.w	pc, [sp], #4
    W2ST_ON_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG);
 8004ca6:	4a12      	ldr	r2, [pc, #72]	; (8004cf0 <AccGyroMag_AttributeModified_CB+0x78>)
 8004ca8:	6813      	ldr	r3, [r2, #0]
 8004caa:	f043 0304 	orr.w	r3, r3, #4
 8004cae:	6013      	str	r3, [r2, #0]
    if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 8004cb0:	210c      	movs	r1, #12
 8004cb2:	4812      	ldr	r0, [pc, #72]	; (8004cfc <AccGyroMag_AttributeModified_CB+0x84>)
 8004cb4:	f005 f87a 	bl	8009dac <HAL_TIM_OC_Start_IT>
 8004cb8:	b938      	cbnz	r0, 8004cca <AccGyroMag_AttributeModified_CB+0x52>
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 8004cba:	4b10      	ldr	r3, [pc, #64]	; (8004cfc <AccGyroMag_AttributeModified_CB+0x84>)
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	6a53      	ldr	r3, [r2, #36]	; 0x24
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + uhCCR4_Val));
 8004cc0:	490f      	ldr	r1, [pc, #60]	; (8004d00 <AccGyroMag_AttributeModified_CB+0x88>)
 8004cc2:	6809      	ldr	r1, [r1, #0]
 8004cc4:	440b      	add	r3, r1
 8004cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8004cc8:	e7dc      	b.n	8004c84 <AccGyroMag_AttributeModified_CB+0xc>
      Error_Handler();
 8004cca:	f001 f98d 	bl	8005fe8 <Error_Handler>
 8004cce:	e7f4      	b.n	8004cba <AccGyroMag_AttributeModified_CB+0x42>
    W2ST_OFF_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG);
 8004cd0:	4a07      	ldr	r2, [pc, #28]	; (8004cf0 <AccGyroMag_AttributeModified_CB+0x78>)
 8004cd2:	6813      	ldr	r3, [r2, #0]
 8004cd4:	f023 0304 	bic.w	r3, r3, #4
 8004cd8:	6013      	str	r3, [r2, #0]
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 8004cda:	210c      	movs	r1, #12
 8004cdc:	4807      	ldr	r0, [pc, #28]	; (8004cfc <AccGyroMag_AttributeModified_CB+0x84>)
 8004cde:	f005 f93b 	bl	8009f58 <HAL_TIM_OC_Stop_IT>
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	d0ce      	beq.n	8004c84 <AccGyroMag_AttributeModified_CB+0xc>
      Error_Handler();
 8004ce6:	f001 f97f 	bl	8005fe8 <Error_Handler>
 8004cea:	e7cb      	b.n	8004c84 <AccGyroMag_AttributeModified_CB+0xc>
    XPRINTF("--->Acc/Gyro/Mag=%s", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG) ? " ON\r\n" : " OFF\r\n\n");
 8004cec:	4a05      	ldr	r2, [pc, #20]	; (8004d04 <AccGyroMag_AttributeModified_CB+0x8c>)
 8004cee:	e7cf      	b.n	8004c90 <AccGyroMag_AttributeModified_CB+0x18>
 8004cf0:	2000081c 	.word	0x2000081c
 8004cf4:	0800e218 	.word	0x0800e218
 8004cf8:	0800e228 	.word	0x0800e228
 8004cfc:	2000034c 	.word	0x2000034c
 8004d00:	20000004 	.word	0x20000004
 8004d04:	0800e220 	.word	0x0800e220

08004d08 <GAP_DisconnectionComplete_CB>:
{
 8004d08:	b530      	push	{r4, r5, lr}
 8004d0a:	b0c1      	sub	sp, #260	; 0x104
  connected = FALSE;
 8004d0c:	2500      	movs	r5, #0
 8004d0e:	4b10      	ldr	r3, [pc, #64]	; (8004d50 <GAP_DisconnectionComplete_CB+0x48>)
 8004d10:	601d      	str	r5, [r3, #0]
  XPRINTF("<<<<<<DISCONNECTED\r\n");
 8004d12:	46ec      	mov	ip, sp
 8004d14:	4c0f      	ldr	r4, [pc, #60]	; (8004d54 <GAP_DisconnectionComplete_CB+0x4c>)
 8004d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004d1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d20:	f84c 0b04 	str.w	r0, [ip], #4
 8004d24:	f88c 1000 	strb.w	r1, [ip]
 8004d28:	2114      	movs	r1, #20
 8004d2a:	4668      	mov	r0, sp
 8004d2c:	f001 fcd2 	bl	80066d4 <CDC_Fill_Buffer>
  set_connectable = TRUE;
 8004d30:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <GAP_DisconnectionComplete_CB+0x50>)
 8004d32:	2201      	movs	r2, #1
 8004d34:	701a      	strb	r2, [r3, #0]
  ConnectionBleStatus=0;
 8004d36:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <GAP_DisconnectionComplete_CB+0x54>)
 8004d38:	601d      	str	r5, [r3, #0]
  if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 8004d3a:	210c      	movs	r1, #12
 8004d3c:	4808      	ldr	r0, [pc, #32]	; (8004d60 <GAP_DisconnectionComplete_CB+0x58>)
 8004d3e:	f005 f90b 	bl	8009f58 <HAL_TIM_OC_Stop_IT>
 8004d42:	b908      	cbnz	r0, 8004d48 <GAP_DisconnectionComplete_CB+0x40>
}
 8004d44:	b041      	add	sp, #260	; 0x104
 8004d46:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8004d48:	f001 f94e 	bl	8005fe8 <Error_Handler>
}
 8004d4c:	e7fa      	b.n	8004d44 <GAP_DisconnectionComplete_CB+0x3c>
 8004d4e:	bf00      	nop
 8004d50:	2000020c 	.word	0x2000020c
 8004d54:	0800e23c 	.word	0x0800e23c
 8004d58:	20000000 	.word	0x20000000
 8004d5c:	2000081c 	.word	0x2000081c
 8004d60:	2000034c 	.word	0x2000034c

08004d64 <safe_aci_gatt_update_char_value>:
{
 8004d64:	b510      	push	{r4, lr}
 8004d66:	b082      	sub	sp, #8
  if (breath > 0) {
 8004d68:	4c09      	ldr	r4, [pc, #36]	; (8004d90 <safe_aci_gatt_update_char_value+0x2c>)
 8004d6a:	68a4      	ldr	r4, [r4, #8]
 8004d6c:	2c00      	cmp	r4, #0
 8004d6e:	dd05      	ble.n	8004d7c <safe_aci_gatt_update_char_value+0x18>
    breath--;
 8004d70:	3c01      	subs	r4, #1
 8004d72:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <safe_aci_gatt_update_char_value+0x2c>)
 8004d74:	609c      	str	r4, [r3, #8]
  tBleStatus ret = BLE_STATUS_INSUFFICIENT_RESOURCES;
 8004d76:	2064      	movs	r0, #100	; 0x64
}
 8004d78:	b002      	add	sp, #8
 8004d7a:	bd10      	pop	{r4, pc}
    ret = aci_gatt_update_char_value(servHandle,charHandle,charValOffset,charValueLen,charValue);
 8004d7c:	9c04      	ldr	r4, [sp, #16]
 8004d7e:	9400      	str	r4, [sp, #0]
 8004d80:	f006 f827 	bl	800add2 <aci_gatt_update_char_value>
    if (ret != BLE_STATUS_SUCCESS){
 8004d84:	2800      	cmp	r0, #0
 8004d86:	d0f7      	beq.n	8004d78 <safe_aci_gatt_update_char_value+0x14>
      breath = ACC_BLUENRG_CONGESTION_SKIP;
 8004d88:	4b01      	ldr	r3, [pc, #4]	; (8004d90 <safe_aci_gatt_update_char_value+0x2c>)
 8004d8a:	221e      	movs	r2, #30
 8004d8c:	609a      	str	r2, [r3, #8]
 8004d8e:	e7f3      	b.n	8004d78 <safe_aci_gatt_update_char_value+0x14>
 8004d90:	2000020c 	.word	0x2000020c

08004d94 <Add_HW_SW_ServW2ST_Service>:
{
 8004d94:	b530      	push	{r4, r5, lr}
 8004d96:	b0cb      	sub	sp, #300	; 0x12c
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8004d98:	231b      	movs	r3, #27
 8004d9a:	f88d 3118 	strb.w	r3, [sp, #280]	; 0x118
 8004d9e:	23c5      	movs	r3, #197	; 0xc5
 8004da0:	f88d 3119 	strb.w	r3, [sp, #281]	; 0x119
 8004da4:	23d5      	movs	r3, #213	; 0xd5
 8004da6:	f88d 311a 	strb.w	r3, [sp, #282]	; 0x11a
 8004daa:	23a5      	movs	r3, #165	; 0xa5
 8004dac:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
 8004db0:	2002      	movs	r0, #2
 8004db2:	f88d 011c 	strb.w	r0, [sp, #284]	; 0x11c
 8004db6:	2300      	movs	r3, #0
 8004db8:	f88d 311d 	strb.w	r3, [sp, #285]	; 0x11d
 8004dbc:	22b4      	movs	r2, #180	; 0xb4
 8004dbe:	f88d 211e 	strb.w	r2, [sp, #286]	; 0x11e
 8004dc2:	229a      	movs	r2, #154	; 0x9a
 8004dc4:	f88d 211f 	strb.w	r2, [sp, #287]	; 0x11f
 8004dc8:	22e1      	movs	r2, #225	; 0xe1
 8004dca:	f88d 2120 	strb.w	r2, [sp, #288]	; 0x120
 8004dce:	2211      	movs	r2, #17
 8004dd0:	f88d 2121 	strb.w	r2, [sp, #289]	; 0x121
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f88d 2122 	strb.w	r2, [sp, #290]	; 0x122
 8004dda:	f88d 3123 	strb.w	r3, [sp, #291]	; 0x123
 8004dde:	f88d 3124 	strb.w	r3, [sp, #292]	; 0x124
 8004de2:	f88d 3125 	strb.w	r3, [sp, #293]	; 0x125
 8004de6:	f88d 3126 	strb.w	r3, [sp, #294]	; 0x126
 8004dea:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE,
 8004dee:	4b35      	ldr	r3, [pc, #212]	; (8004ec4 <Add_HW_SW_ServW2ST_Service+0x130>)
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	230d      	movs	r3, #13
 8004df4:	a946      	add	r1, sp, #280	; 0x118
 8004df6:	f005 ff41 	bl	800ac7c <aci_gatt_add_serv>
  if (ret != BLE_STATUS_SUCCESS) {
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	d13e      	bne.n	8004e7c <Add_HW_SW_ServW2ST_Service+0xe8>
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8004dfe:	231b      	movs	r3, #27
 8004e00:	f88d 3118 	strb.w	r3, [sp, #280]	; 0x118
 8004e04:	23c5      	movs	r3, #197	; 0xc5
 8004e06:	f88d 3119 	strb.w	r3, [sp, #281]	; 0x119
 8004e0a:	23d5      	movs	r3, #213	; 0xd5
 8004e0c:	f88d 311a 	strb.w	r3, [sp, #282]	; 0x11a
 8004e10:	23a5      	movs	r3, #165	; 0xa5
 8004e12:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
 8004e16:	2102      	movs	r1, #2
 8004e18:	f88d 111c 	strb.w	r1, [sp, #284]	; 0x11c
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f88d 311d 	strb.w	r3, [sp, #285]	; 0x11d
 8004e22:	2236      	movs	r2, #54	; 0x36
 8004e24:	f88d 211e 	strb.w	r2, [sp, #286]	; 0x11e
 8004e28:	22ac      	movs	r2, #172	; 0xac
 8004e2a:	f88d 211f 	strb.w	r2, [sp, #287]	; 0x11f
 8004e2e:	22e1      	movs	r2, #225	; 0xe1
 8004e30:	f88d 2120 	strb.w	r2, [sp, #288]	; 0x120
 8004e34:	2211      	movs	r2, #17
 8004e36:	f88d 2121 	strb.w	r2, [sp, #289]	; 0x121
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f88d 2122 	strb.w	r2, [sp, #290]	; 0x122
 8004e40:	f88d 3123 	strb.w	r3, [sp, #291]	; 0x123
 8004e44:	f88d 3124 	strb.w	r3, [sp, #292]	; 0x124
 8004e48:	f88d 3125 	strb.w	r3, [sp, #293]	; 0x125
 8004e4c:	22e0      	movs	r2, #224	; 0xe0
 8004e4e:	f88d 2126 	strb.w	r2, [sp, #294]	; 0x126
 8004e52:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 2+3*3*2,
 8004e56:	481c      	ldr	r0, [pc, #112]	; (8004ec8 <Add_HW_SW_ServW2ST_Service+0x134>)
 8004e58:	f100 020e 	add.w	r2, r0, #14
 8004e5c:	9205      	str	r2, [sp, #20]
 8004e5e:	9304      	str	r3, [sp, #16]
 8004e60:	2210      	movs	r2, #16
 8004e62:	9203      	str	r2, [sp, #12]
 8004e64:	2404      	movs	r4, #4
 8004e66:	9402      	str	r4, [sp, #8]
 8004e68:	9301      	str	r3, [sp, #4]
 8004e6a:	9200      	str	r2, [sp, #0]
 8004e6c:	2314      	movs	r3, #20
 8004e6e:	aa46      	add	r2, sp, #280	; 0x118
 8004e70:	8980      	ldrh	r0, [r0, #12]
 8004e72:	f005 ff48 	bl	800ad06 <aci_gatt_add_char>
  if (ret != BLE_STATUS_SUCCESS) {
 8004e76:	b9a0      	cbnz	r0, 8004ea2 <Add_HW_SW_ServW2ST_Service+0x10e>
}
 8004e78:	b04b      	add	sp, #300	; 0x12c
 8004e7a:	bd30      	pop	{r4, r5, pc}
	  XPRINTF("Error Creating Service\r\n");
 8004e7c:	f10d 0c18 	add.w	ip, sp, #24
 8004e80:	4c12      	ldr	r4, [pc, #72]	; (8004ecc <Add_HW_SW_ServW2ST_Service+0x138>)
 8004e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004e88:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004e8c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8004e90:	f88c 2000 	strb.w	r2, [ip]
 8004e94:	2118      	movs	r1, #24
 8004e96:	eb0d 0001 	add.w	r0, sp, r1
 8004e9a:	f001 fc1b 	bl	80066d4 <CDC_Fill_Buffer>
  return BLE_STATUS_ERROR;
 8004e9e:	2047      	movs	r0, #71	; 0x47
    goto fail;
 8004ea0:	e7ea      	b.n	8004e78 <Add_HW_SW_ServW2ST_Service+0xe4>
	  XPRINTF("Error Creating Characterstic\r\n");
 8004ea2:	ac06      	add	r4, sp, #24
 8004ea4:	4d0a      	ldr	r5, [pc, #40]	; (8004ed0 <Add_HW_SW_ServW2ST_Service+0x13c>)
 8004ea6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eaa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004eae:	c407      	stmia	r4!, {r0, r1, r2}
 8004eb0:	f824 3b02 	strh.w	r3, [r4], #2
 8004eb4:	0c1b      	lsrs	r3, r3, #16
 8004eb6:	7023      	strb	r3, [r4, #0]
 8004eb8:	211e      	movs	r1, #30
 8004eba:	a806      	add	r0, sp, #24
 8004ebc:	f001 fc0a 	bl	80066d4 <CDC_Fill_Buffer>
  return BLE_STATUS_ERROR;
 8004ec0:	2047      	movs	r0, #71	; 0x47
    goto fail;
 8004ec2:	e7d9      	b.n	8004e78 <Add_HW_SW_ServW2ST_Service+0xe4>
 8004ec4:	20000218 	.word	0x20000218
 8004ec8:	2000020c 	.word	0x2000020c
 8004ecc:	0800e254 	.word	0x0800e254
 8004ed0:	0800e270 	.word	0x0800e270

08004ed4 <AccGyroMag_Update>:
{  
 8004ed4:	b570      	push	{r4, r5, r6, lr}
 8004ed6:	b0c8      	sub	sp, #288	; 0x120
 8004ed8:	4606      	mov	r6, r0
 8004eda:	460d      	mov	r5, r1
 8004edc:	4614      	mov	r4, r2
  STORE_LE_16(buff   ,(HAL_GetTick()>>3));
 8004ede:	f001 ff77 	bl	8006dd0 <HAL_GetTick>
 8004ee2:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 8004ee6:	f88d 010c 	strb.w	r0, [sp, #268]	; 0x10c
 8004eea:	f001 ff71 	bl	8006dd0 <HAL_GetTick>
 8004eee:	f3c0 20c7 	ubfx	r0, r0, #11, #8
 8004ef2:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
  STORE_LE_16(buff+2 ,Acc->x);
 8004ef6:	6833      	ldr	r3, [r6, #0]
 8004ef8:	f88d 310e 	strb.w	r3, [sp, #270]	; 0x10e
 8004efc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004f00:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
  STORE_LE_16(buff+4 ,Acc->y);
 8004f04:	6873      	ldr	r3, [r6, #4]
 8004f06:	f88d 3110 	strb.w	r3, [sp, #272]	; 0x110
 8004f0a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004f0e:	f88d 3111 	strb.w	r3, [sp, #273]	; 0x111
  STORE_LE_16(buff+6 ,Acc->z);
 8004f12:	68b3      	ldr	r3, [r6, #8]
 8004f14:	f88d 3112 	strb.w	r3, [sp, #274]	; 0x112
 8004f18:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004f1c:	f88d 3113 	strb.w	r3, [sp, #275]	; 0x113
  STORE_LE_16(buff+8 ,Gyro->x*10);
 8004f20:	682b      	ldr	r3, [r5, #0]
 8004f22:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004f26:	0052      	lsls	r2, r2, #1
 8004f28:	f88d 2114 	strb.w	r2, [sp, #276]	; 0x114
 8004f2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004f30:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8004f34:	f88d 3115 	strb.w	r3, [sp, #277]	; 0x115
  STORE_LE_16(buff+10,Gyro->y*10);
 8004f38:	686b      	ldr	r3, [r5, #4]
 8004f3a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004f3e:	0052      	lsls	r2, r2, #1
 8004f40:	f88d 2116 	strb.w	r2, [sp, #278]	; 0x116
 8004f44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004f48:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8004f4c:	f88d 3117 	strb.w	r3, [sp, #279]	; 0x117
  STORE_LE_16(buff+12,Gyro->z);
 8004f50:	68ab      	ldr	r3, [r5, #8]
 8004f52:	f88d 3118 	strb.w	r3, [sp, #280]	; 0x118
 8004f56:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004f5a:	f88d 3119 	strb.w	r3, [sp, #281]	; 0x119
  STORE_LE_16(buff+14,Mag->x);
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	f88d 311a 	strb.w	r3, [sp, #282]	; 0x11a
 8004f64:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004f68:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
  STORE_LE_16(buff+16,Mag->y);
 8004f6c:	6863      	ldr	r3, [r4, #4]
 8004f6e:	f88d 311c 	strb.w	r3, [sp, #284]	; 0x11c
 8004f72:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004f76:	f88d 311d 	strb.w	r3, [sp, #285]	; 0x11d
  STORE_LE_16(buff+18,Mag->z);
 8004f7a:	68a3      	ldr	r3, [r4, #8]
 8004f7c:	f88d 311e 	strb.w	r3, [sp, #286]	; 0x11e
 8004f80:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004f84:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
  ret = ACI_GATT_UPDATE_CHAR_VALUE(HWServW2STHandle, AccGyroMagCharHandle, 0, 2+3*3*2, buff);
 8004f88:	480e      	ldr	r0, [pc, #56]	; (8004fc4 <AccGyroMag_Update+0xf0>)
 8004f8a:	ab43      	add	r3, sp, #268	; 0x10c
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	2314      	movs	r3, #20
 8004f90:	2200      	movs	r2, #0
 8004f92:	89c1      	ldrh	r1, [r0, #14]
 8004f94:	8980      	ldrh	r0, [r0, #12]
 8004f96:	f7ff fee5 	bl	8004d64 <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 8004f9a:	b908      	cbnz	r0, 8004fa0 <AccGyroMag_Update+0xcc>
}
 8004f9c:	b048      	add	sp, #288	; 0x120
 8004f9e:	bd70      	pop	{r4, r5, r6, pc}
      XPRINTF("Error Updating Acc/Gyro/Mag Char\r\n");
 8004fa0:	ac03      	add	r4, sp, #12
 8004fa2:	4d09      	ldr	r5, [pc, #36]	; (8004fc8 <AccGyroMag_Update+0xf4>)
 8004fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fac:	682b      	ldr	r3, [r5, #0]
 8004fae:	f824 3b02 	strh.w	r3, [r4], #2
 8004fb2:	0c1b      	lsrs	r3, r3, #16
 8004fb4:	7023      	strb	r3, [r4, #0]
 8004fb6:	2122      	movs	r1, #34	; 0x22
 8004fb8:	a803      	add	r0, sp, #12
 8004fba:	f001 fb8b 	bl	80066d4 <CDC_Fill_Buffer>
    return BLE_STATUS_ERROR;
 8004fbe:	2047      	movs	r0, #71	; 0x47
 8004fc0:	e7ec      	b.n	8004f9c <AccGyroMag_Update+0xc8>
 8004fc2:	bf00      	nop
 8004fc4:	2000020c 	.word	0x2000020c
 8004fc8:	0800e290 	.word	0x0800e290

08004fcc <setConnectable>:
{  
 8004fcc:	b570      	push	{r4, r5, r6, lr}
 8004fce:	b092      	sub	sp, #72	; 0x48
  char local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,NodeName[1],NodeName[2],NodeName[3],NodeName[4],NodeName[5],NodeName[6],NodeName[7]};
 8004fd0:	2609      	movs	r6, #9
 8004fd2:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8004fd6:	4b37      	ldr	r3, [pc, #220]	; (80050b4 <setConnectable+0xe8>)
 8004fd8:	f893 e001 	ldrb.w	lr, [r3, #1]
 8004fdc:	f88d e041 	strb.w	lr, [sp, #65]	; 0x41
 8004fe0:	f893 c002 	ldrb.w	ip, [r3, #2]
 8004fe4:	f88d c042 	strb.w	ip, [sp, #66]	; 0x42
 8004fe8:	78dc      	ldrb	r4, [r3, #3]
 8004fea:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
 8004fee:	7918      	ldrb	r0, [r3, #4]
 8004ff0:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
 8004ff4:	7959      	ldrb	r1, [r3, #5]
 8004ff6:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
 8004ffa:	799a      	ldrb	r2, [r3, #6]
 8004ffc:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
 8005000:	79db      	ldrb	r3, [r3, #7]
 8005002:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
  manuf_data[0 ] = 8U;
 8005006:	2508      	movs	r5, #8
 8005008:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
  manuf_data[1 ] = 0x09U;
 800500c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
  manuf_data[2 ] = NodeName[1];/* Complete Name */
 8005010:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
  manuf_data[3 ] = NodeName[2];
 8005014:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
  manuf_data[4 ] = NodeName[3];
 8005018:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
  manuf_data[5 ] = NodeName[4];
 800501c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
  manuf_data[6 ] = NodeName[5];
 8005020:	f88d 102a 	strb.w	r1, [sp, #42]	; 0x2a
  manuf_data[7 ] = NodeName[6];
 8005024:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
  manuf_data[8 ] = NodeName[7];           
 8005028:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  manuf_data[9 ] = 15U;
 800502c:	230f      	movs	r3, #15
 800502e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  manuf_data[10] = 0xFFU;
 8005032:	23ff      	movs	r3, #255	; 0xff
 8005034:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  manuf_data[11] = 0x30U;/* STM Manufacter AD */
 8005038:	2330      	movs	r3, #48	; 0x30
 800503a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  manuf_data[12] = 0x00U;
 800503e:	2400      	movs	r4, #0
 8005040:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  manuf_data[13] = 0x02U;
 8005044:	2302      	movs	r3, #2
 8005046:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  manuf_data[14] = 0x02U; /* Board Type */
 800504a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  manuf_data[15] = 0x08U; /* Firmware ID */
 800504e:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
  manuf_data[16] = 0x00U;
 8005052:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
  manuf_data[17] = 0x00U;
 8005056:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  manuf_data[18] = 0x00U;
 800505a:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  manuf_data[19] = bdaddr[5];
 800505e:	4b16      	ldr	r3, [pc, #88]	; (80050b8 <setConnectable+0xec>)
 8005060:	795a      	ldrb	r2, [r3, #5]
 8005062:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  manuf_data[20] = bdaddr[4];
 8005066:	791a      	ldrb	r2, [r3, #4]
 8005068:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  manuf_data[21] = bdaddr[3];
 800506c:	78da      	ldrb	r2, [r3, #3]
 800506e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  manuf_data[22] = bdaddr[2];
 8005072:	789a      	ldrb	r2, [r3, #2]
 8005074:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
  manuf_data[23] = bdaddr[1];
 8005078:	785a      	ldrb	r2, [r3, #1]
 800507a:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
  manuf_data[24] = bdaddr[0];
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  hci_le_set_scan_resp_data(0,NULL);
 8005084:	4621      	mov	r1, r4
 8005086:	4620      	mov	r0, r4
 8005088:	f006 f81b 	bl	800b0c2 <hci_le_set_scan_resp_data>
  aci_gap_set_discoverable(ADV_IND, 0, 0,
 800508c:	9406      	str	r4, [sp, #24]
 800508e:	9405      	str	r4, [sp, #20]
 8005090:	9404      	str	r4, [sp, #16]
 8005092:	9403      	str	r4, [sp, #12]
 8005094:	ab10      	add	r3, sp, #64	; 0x40
 8005096:	9302      	str	r3, [sp, #8]
 8005098:	9501      	str	r5, [sp, #4]
 800509a:	9400      	str	r4, [sp, #0]
 800509c:	2301      	movs	r3, #1
 800509e:	4622      	mov	r2, r4
 80050a0:	4621      	mov	r1, r4
 80050a2:	4620      	mov	r0, r4
 80050a4:	f005 fcf2 	bl	800aa8c <aci_gap_set_discoverable>
  aci_gap_update_adv_data(25, manuf_data);
 80050a8:	a909      	add	r1, sp, #36	; 0x24
 80050aa:	2019      	movs	r0, #25
 80050ac:	f005 fd95 	bl	800abda <aci_gap_update_adv_data>
}
 80050b0:	b012      	add	sp, #72	; 0x48
 80050b2:	bd70      	pop	{r4, r5, r6, pc}
 80050b4:	200006bc 	.word	0x200006bc
 80050b8:	20000320 	.word	0x20000320

080050bc <Read_Request_CB>:
{
 80050bc:	b508      	push	{r3, lr}
  if(connection_handle != 0)
 80050be:	4b03      	ldr	r3, [pc, #12]	; (80050cc <Read_Request_CB+0x10>)
 80050c0:	8898      	ldrh	r0, [r3, #4]
 80050c2:	b900      	cbnz	r0, 80050c6 <Read_Request_CB+0xa>
}
 80050c4:	bd08      	pop	{r3, pc}
    aci_gatt_allow_read(connection_handle);
 80050c6:	f005 febc 	bl	800ae42 <aci_gatt_allow_read>
}
 80050ca:	e7fb      	b.n	80050c4 <Read_Request_CB+0x8>
 80050cc:	2000020c 	.word	0x2000020c

080050d0 <Attribute_Modified_CB>:
{
 80050d0:	b508      	push	{r3, lr}
    	if(attr_handle == AccGyroMagCharHandle + 2) {
 80050d2:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <Attribute_Modified_CB+0x18>)
 80050d4:	89db      	ldrh	r3, [r3, #14]
 80050d6:	3302      	adds	r3, #2
 80050d8:	4298      	cmp	r0, r3
 80050da:	d000      	beq.n	80050de <Attribute_Modified_CB+0xe>
}
 80050dc:	bd08      	pop	{r3, pc}
      AccGyroMag_AttributeModified_CB(att_data);
 80050de:	4608      	mov	r0, r1
 80050e0:	f7ff fdca 	bl	8004c78 <AccGyroMag_AttributeModified_CB>
}
 80050e4:	e7fa      	b.n	80050dc <Attribute_Modified_CB+0xc>
 80050e6:	bf00      	nop
 80050e8:	2000020c 	.word	0x2000020c

080050ec <HCI_Event_CB>:
 *         parsed.
 * @param  void *pckt Pointer to the ACI packet
 * @retval None
 */
void HCI_Event_CB(void *pckt)
{
 80050ec:	b530      	push	{r4, r5, lr}
 80050ee:	b0c1      	sub	sp, #260	; 0x104
 80050f0:	4605      	mov	r5, r0
  hci_uart_pckt *hci_pckt = pckt;
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
  
  XPRINTF("HCI_Event_CB\r\n\r\n");
 80050f2:	46ec      	mov	ip, sp
 80050f4:	4c1d      	ldr	r4, [pc, #116]	; (800516c <HCI_Event_CB+0x80>)
 80050f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	f88c 3000 	strb.w	r3, [ip]
 8005102:	2110      	movs	r1, #16
 8005104:	4668      	mov	r0, sp
 8005106:	f001 fae5 	bl	80066d4 <CDC_Fill_Buffer>

  if(hci_pckt->type != HCI_EVENT_PKT) {
 800510a:	782b      	ldrb	r3, [r5, #0]
 800510c:	2b04      	cmp	r3, #4
 800510e:	d106      	bne.n	800511e <HCI_Event_CB+0x32>
    return;
  }
  
  switch(event_pckt->evt){
 8005110:	786b      	ldrb	r3, [r5, #1]
 8005112:	2b3e      	cmp	r3, #62	; 0x3e
 8005114:	d008      	beq.n	8005128 <HCI_Event_CB+0x3c>
 8005116:	2bff      	cmp	r3, #255	; 0xff
 8005118:	d010      	beq.n	800513c <HCI_Event_CB+0x50>
 800511a:	2b05      	cmp	r3, #5
 800511c:	d001      	beq.n	8005122 <HCI_Event_CB+0x36>
        break;
      }
    }
    break;
  }
}
 800511e:	b041      	add	sp, #260	; 0x104
 8005120:	bd30      	pop	{r4, r5, pc}
      GAP_DisconnectionComplete_CB();
 8005122:	f7ff fdf1 	bl	8004d08 <GAP_DisconnectionComplete_CB>
    break;
 8005126:	e7fa      	b.n	800511e <HCI_Event_CB+0x32>
      switch(evt->subevent){
 8005128:	78eb      	ldrb	r3, [r5, #3]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d1f7      	bne.n	800511e <HCI_Event_CB+0x32>
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 800512e:	f8b5 1005 	ldrh.w	r1, [r5, #5]
 8005132:	f105 0009 	add.w	r0, r5, #9
 8005136:	f7ff fd93 	bl	8004c60 <GAP_ConnectionComplete_CB>
        break;
 800513a:	e7f0      	b.n	800511e <HCI_Event_CB+0x32>
      switch(blue_evt->ecode){
 800513c:	f8b5 3003 	ldrh.w	r3, [r5, #3]
 8005140:	f640 4201 	movw	r2, #3073	; 0xc01
 8005144:	4293      	cmp	r3, r2
 8005146:	d008      	beq.n	800515a <HCI_Event_CB+0x6e>
 8005148:	f640 4214 	movw	r2, #3092	; 0xc14
 800514c:	4293      	cmp	r3, r2
 800514e:	d1e6      	bne.n	800511e <HCI_Event_CB+0x32>
          Read_Request_CB(pr->attr_handle);                    
 8005150:	f8b5 0007 	ldrh.w	r0, [r5, #7]
 8005154:	f7ff ffb2 	bl	80050bc <Read_Request_CB>
        break;
 8005158:	e7e1      	b.n	800511e <HCI_Event_CB+0x32>
          Attribute_Modified_CB(evt->attr_handle, evt->att_data,evt->data_length);
 800515a:	7a6a      	ldrb	r2, [r5, #9]
 800515c:	f105 010c 	add.w	r1, r5, #12
 8005160:	f8b5 0007 	ldrh.w	r0, [r5, #7]
 8005164:	f7ff ffb4 	bl	80050d0 <Attribute_Modified_CB>
        break;
 8005168:	e7d9      	b.n	800511e <HCI_Event_CB+0x32>
 800516a:	bf00      	nop
 800516c:	0800e2b4 	.word	0x0800e2b4

08005170 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8005170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005172:	b0c9      	sub	sp, #292	; 0x124
  GPIO_InitTypeDef GPIO_InitStruct;
  
  HAL_PWREx_EnableVddIO2();
 8005174:	f002 fd9a 	bl	8007cac <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005178:	4b2a      	ldr	r3, [pc, #168]	; (8005224 <HCI_TL_SPI_Init+0xb4>)
 800517a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800517c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005180:	64da      	str	r2, [r3, #76]	; 0x4c
 8005182:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005184:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005188:	9200      	str	r2, [sp, #0]
 800518a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800518c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800518e:	f042 0204 	orr.w	r2, r2, #4
 8005192:	64da      	str	r2, [r3, #76]	; 0x4c
 8005194:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005196:	f002 0204 	and.w	r2, r2, #4
 800519a:	9201      	str	r2, [sp, #4]
 800519c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800519e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051a0:	f042 0202 	orr.w	r2, r2, #2
 80051a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80051a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	9302      	str	r3, [sp, #8]
 80051ae:	9b02      	ldr	r3, [sp, #8]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80051b0:	4e1d      	ldr	r6, [pc, #116]	; (8005228 <HCI_TL_SPI_Init+0xb8>)
 80051b2:	2201      	movs	r2, #1
 80051b4:	2104      	movs	r1, #4
 80051b6:	4630      	mov	r0, r6
 80051b8:	f002 f807 	bl	80071ca <HAL_GPIO_WritePin>
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80051bc:	2320      	movs	r3, #32
 80051be:	9343      	str	r3, [sp, #268]	; 0x10c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80051c0:	4b1a      	ldr	r3, [pc, #104]	; (800522c <HCI_TL_SPI_Init+0xbc>)
 80051c2:	9344      	str	r3, [sp, #272]	; 0x110
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c4:	2400      	movs	r4, #0
 80051c6:	9445      	str	r4, [sp, #276]	; 0x114
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80051c8:	a943      	add	r1, sp, #268	; 0x10c
 80051ca:	4819      	ldr	r0, [pc, #100]	; (8005230 <HCI_TL_SPI_Init+0xc0>)
 80051cc:	f001 fe72 	bl	8006eb4 <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80051d0:	2501      	movs	r5, #1
 80051d2:	9543      	str	r5, [sp, #268]	; 0x10c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051d4:	9544      	str	r5, [sp, #272]	; 0x110
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d6:	9445      	str	r4, [sp, #276]	; 0x114
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d8:	9446      	str	r4, [sp, #280]	; 0x118
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80051da:	a943      	add	r1, sp, #268	; 0x10c
 80051dc:	4815      	ldr	r0, [pc, #84]	; (8005234 <HCI_TL_SPI_Init+0xc4>)
 80051de:	f001 fe69 	bl	8006eb4 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80051e2:	2704      	movs	r7, #4
 80051e4:	9743      	str	r7, [sp, #268]	; 0x10c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051e6:	9544      	str	r5, [sp, #272]	; 0x110
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e8:	9445      	str	r4, [sp, #276]	; 0x114
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ea:	9446      	str	r4, [sp, #280]	; 0x118
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 80051ec:	a943      	add	r1, sp, #268	; 0x10c
 80051ee:	4630      	mov	r0, r6
 80051f0:	f001 fe60 	bl	8006eb4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80051f4:	462a      	mov	r2, r5
 80051f6:	4639      	mov	r1, r7
 80051f8:	4630      	mov	r0, r6
 80051fa:	f001 ffe6 	bl	80071ca <HAL_GPIO_WritePin>

  XPRINTF("\r\nIntialised HCI SPI.\r\n");
 80051fe:	f10d 0c0c 	add.w	ip, sp, #12
 8005202:	4c0d      	ldr	r4, [pc, #52]	; (8005238 <HCI_TL_SPI_Init+0xc8>)
 8005204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005206:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800520a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800520e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8005212:	2117      	movs	r1, #23
 8005214:	a803      	add	r0, sp, #12
 8005216:	f001 fa5d 	bl	80066d4 <CDC_Fill_Buffer>
    
  return BSP_SPI1_Init();
 800521a:	f001 fd01 	bl	8006c20 <BSP_SPI1_Init>
}
 800521e:	b049      	add	sp, #292	; 0x124
 8005220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005222:	bf00      	nop
 8005224:	40021000 	.word	0x40021000
 8005228:	48000400 	.word	0x48000400
 800522c:	10110000 	.word	0x10110000
 8005230:	48000800 	.word	0x48000800
 8005234:	48001c00 	.word	0x48001c00
 8005238:	0800e2c8 	.word	0x0800e2c8

0800523c <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 800523c:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 800523e:	2120      	movs	r1, #32
 8005240:	4806      	ldr	r0, [pc, #24]	; (800525c <HCI_TL_SPI_DeInit+0x20>)
 8005242:	f001 ff23 	bl	800708c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 8005246:	2104      	movs	r1, #4
 8005248:	4805      	ldr	r0, [pc, #20]	; (8005260 <HCI_TL_SPI_DeInit+0x24>)
 800524a:	f001 ff1f 	bl	800708c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 800524e:	2101      	movs	r1, #1
 8005250:	4804      	ldr	r0, [pc, #16]	; (8005264 <HCI_TL_SPI_DeInit+0x28>)
 8005252:	f001 ff1b 	bl	800708c <HAL_GPIO_DeInit>
  return 0;
}
 8005256:	2000      	movs	r0, #0
 8005258:	bd08      	pop	{r3, pc}
 800525a:	bf00      	nop
 800525c:	48000800 	.word	0x48000800
 8005260:	48000400 	.word	0x48000400
 8005264:	48001c00 	.word	0x48001c00

08005268 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8005268:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800526a:	4c09      	ldr	r4, [pc, #36]	; (8005290 <HCI_TL_SPI_Reset+0x28>)
 800526c:	2200      	movs	r2, #0
 800526e:	2101      	movs	r1, #1
 8005270:	4620      	mov	r0, r4
 8005272:	f001 ffaa 	bl	80071ca <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8005276:	2005      	movs	r0, #5
 8005278:	f000 fe80 	bl	8005f7c <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800527c:	2201      	movs	r2, #1
 800527e:	4611      	mov	r1, r2
 8005280:	4620      	mov	r0, r4
 8005282:	f001 ffa2 	bl	80071ca <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 8005286:	2005      	movs	r0, #5
 8005288:	f000 fe78 	bl	8005f7c <HAL_Delay>
  return 0;
}  
 800528c:	2000      	movs	r0, #0
 800528e:	bd10      	pop	{r4, pc}
 8005290:	48001c00 	.word	0x48001c00

08005294 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8005294:	b570      	push	{r4, r5, r6, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	4606      	mov	r6, r0
 800529a:	460d      	mov	r5, r1
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
 800529c:	23ff      	movs	r3, #255	; 0xff
 800529e:	f88d 300f 	strb.w	r3, [sp, #15]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80052a2:	4b1d      	ldr	r3, [pc, #116]	; (8005318 <HCI_TL_SPI_Receive+0x84>)
 80052a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80052a8:	9002      	str	r0, [sp, #8]
 80052aa:	f88d 100c 	strb.w	r1, [sp, #12]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80052ae:	2200      	movs	r2, #0
 80052b0:	2104      	movs	r1, #4
 80052b2:	481a      	ldr	r0, [pc, #104]	; (800531c <HCI_TL_SPI_Receive+0x88>)
 80052b4:	f001 ff89 	bl	80071ca <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80052b8:	2205      	movs	r2, #5
 80052ba:	4669      	mov	r1, sp
 80052bc:	a802      	add	r0, sp, #8
 80052be:	f001 fc73 	bl	8006ba8 <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 80052c2:	f89d 3000 	ldrb.w	r3, [sp]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d008      	beq.n	80052dc <HCI_TL_SPI_Receive+0x48>
  uint8_t len = 0;
 80052ca:	2400      	movs	r4, #0
        buffer[len] = read_char;
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80052cc:	2201      	movs	r2, #1
 80052ce:	2104      	movs	r1, #4
 80052d0:	4812      	ldr	r0, [pc, #72]	; (800531c <HCI_TL_SPI_Receive+0x88>)
 80052d2:	f001 ff7a 	bl	80071ca <HAL_GPIO_WritePin>
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
}
 80052d6:	4620      	mov	r0, r4
 80052d8:	b004      	add	sp, #16
 80052da:	bd70      	pop	{r4, r5, r6, pc}
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80052dc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80052e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if(byte_count > 0) {
 80052e4:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80052e8:	d014      	beq.n	8005314 <HCI_TL_SPI_Receive+0x80>
      if (byte_count > size){
 80052ea:	42ab      	cmp	r3, r5
 80052ec:	d800      	bhi.n	80052f0 <HCI_TL_SPI_Receive+0x5c>
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80052ee:	461d      	mov	r5, r3
      for(len = 0; len < byte_count; len++)
 80052f0:	2400      	movs	r4, #0
 80052f2:	e00b      	b.n	800530c <HCI_TL_SPI_Receive+0x78>
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 80052f4:	2201      	movs	r2, #1
 80052f6:	f10d 010e 	add.w	r1, sp, #14
 80052fa:	f10d 000f 	add.w	r0, sp, #15
 80052fe:	f001 fc53 	bl	8006ba8 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8005302:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8005306:	5533      	strb	r3, [r6, r4]
      for(len = 0; len < byte_count; len++)
 8005308:	3401      	adds	r4, #1
 800530a:	b2e4      	uxtb	r4, r4
 800530c:	b2a3      	uxth	r3, r4
 800530e:	42ab      	cmp	r3, r5
 8005310:	d3f0      	bcc.n	80052f4 <HCI_TL_SPI_Receive+0x60>
 8005312:	e7db      	b.n	80052cc <HCI_TL_SPI_Receive+0x38>
  uint8_t len = 0;
 8005314:	2400      	movs	r4, #0
 8005316:	e7d9      	b.n	80052cc <HCI_TL_SPI_Receive+0x38>
 8005318:	0800e1b8 	.word	0x0800e1b8
 800531c:	48000400 	.word	0x48000400

08005320 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 8005320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005322:	b085      	sub	sp, #20
 8005324:	4607      	mov	r7, r0
 8005326:	460e      	mov	r6, r1
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8005328:	4b1c      	ldr	r3, [pc, #112]	; (800539c <HCI_TL_SPI_Send+0x7c>)
 800532a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800532e:	9002      	str	r0, [sp, #8]
 8005330:	f88d 100c 	strb.w	r1, [sp, #12]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8005334:	f001 fd4c 	bl	8006dd0 <HAL_GetTick>
 8005338:	4605      	mov	r5, r0
 800533a:	e011      	b.n	8005360 <HCI_TL_SPI_Send+0x40>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
    
    if(header_slave[0] == 0x02) 
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
 800533c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8005340:	42b3      	cmp	r3, r6
 8005342:	d21e      	bcs.n	8005382 <HCI_TL_SPI_Send+0x62>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
      } 
      else 
      {
        /* Buffer is too small */
        result = -2;
 8005344:	f06f 0401 	mvn.w	r4, #1
      /* SPI is not ready */
      result = -1;
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8005348:	2201      	movs	r2, #1
 800534a:	2104      	movs	r1, #4
 800534c:	4814      	ldr	r0, [pc, #80]	; (80053a0 <HCI_TL_SPI_Send+0x80>)
 800534e:	f001 ff3c 	bl	80071ca <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8005352:	f001 fd3d 	bl	8006dd0 <HAL_GetTick>
 8005356:	1b40      	subs	r0, r0, r5
 8005358:	280f      	cmp	r0, #15
 800535a:	d819      	bhi.n	8005390 <HCI_TL_SPI_Send+0x70>
    {
      result = -3;
      break;
    }
  } while(result < 0);
 800535c:	2c00      	cmp	r4, #0
 800535e:	da19      	bge.n	8005394 <HCI_TL_SPI_Send+0x74>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8005360:	2200      	movs	r2, #0
 8005362:	2104      	movs	r1, #4
 8005364:	480e      	ldr	r0, [pc, #56]	; (80053a0 <HCI_TL_SPI_Send+0x80>)
 8005366:	f001 ff30 	bl	80071ca <HAL_GPIO_WritePin>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800536a:	2205      	movs	r2, #5
 800536c:	4669      	mov	r1, sp
 800536e:	a802      	add	r0, sp, #8
 8005370:	f001 fc1a 	bl	8006ba8 <BSP_SPI1_SendRecv>
    if(header_slave[0] == 0x02) 
 8005374:	f89d 3000 	ldrb.w	r3, [sp]
 8005378:	2b02      	cmp	r3, #2
 800537a:	d0df      	beq.n	800533c <HCI_TL_SPI_Send+0x1c>
      result = -1;
 800537c:	f04f 34ff 	mov.w	r4, #4294967295
 8005380:	e7e2      	b.n	8005348 <HCI_TL_SPI_Send+0x28>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8005382:	4632      	mov	r2, r6
 8005384:	4907      	ldr	r1, [pc, #28]	; (80053a4 <HCI_TL_SPI_Send+0x84>)
 8005386:	4638      	mov	r0, r7
 8005388:	f001 fc0e 	bl	8006ba8 <BSP_SPI1_SendRecv>
    result = 0;
 800538c:	2400      	movs	r4, #0
 800538e:	e7db      	b.n	8005348 <HCI_TL_SPI_Send+0x28>
      result = -3;
 8005390:	f06f 0402 	mvn.w	r4, #2
  
  return result;
}
 8005394:	4620      	mov	r0, r4
 8005396:	b005      	add	sp, #20
 8005398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800539a:	bf00      	nop
 800539c:	0800e1c0 	.word	0x0800e1c0
 80053a0:	48000400 	.word	0x48000400
 80053a4:	20000220 	.word	0x20000220

080053a8 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80053a8:	b508      	push	{r3, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80053aa:	2120      	movs	r1, #32
 80053ac:	4803      	ldr	r0, [pc, #12]	; (80053bc <IsDataAvailable+0x14>)
 80053ae:	f001 ff05 	bl	80071bc <HAL_GPIO_ReadPin>
} 
 80053b2:	2801      	cmp	r0, #1
 80053b4:	bf14      	ite	ne
 80053b6:	2000      	movne	r0, #0
 80053b8:	2001      	moveq	r0, #1
 80053ba:	bd08      	pop	{r3, pc}
 80053bc:	48000800 	.word	0x48000800

080053c0 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */ 
void hci_tl_lowlevel_init(void)
{
 80053c0:	b500      	push	{lr}
 80053c2:	b089      	sub	sp, #36	; 0x24
  /* USER CODE END hci_tl_lowlevel_init 1 */
#ifdef HCI_TL
  tHciIO fops;  
  
  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80053c4:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <hci_tl_lowlevel_init+0x38>)
 80053c6:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80053c8:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <hci_tl_lowlevel_init+0x3c>)
 80053ca:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80053cc:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <hci_tl_lowlevel_init+0x40>)
 80053ce:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80053d0:	4b0c      	ldr	r3, [pc, #48]	; (8005404 <hci_tl_lowlevel_init+0x44>)
 80053d2:	9304      	str	r3, [sp, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80053d4:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <hci_tl_lowlevel_init+0x48>)
 80053d6:	9303      	str	r3, [sp, #12]
  fops.GetTick = BSP_GetTick;
 80053d8:	4b0c      	ldr	r3, [pc, #48]	; (800540c <hci_tl_lowlevel_init+0x4c>)
 80053da:	9307      	str	r3, [sp, #28]
  
  hci_register_io_bus (&fops);
 80053dc:	a801      	add	r0, sp, #4
 80053de:	f005 ff31 	bl	800b244 <hci_register_io_bus>
  /* USER CODE END hci_tl_lowlevel_init 2 */
  
  /* Register event irq handler */
  //HAL_EXTI_GetHandle(&hexti5, EXTI_LINE_5);
  //HAL_EXTI_RegisterCallback(&hexti5, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0x03, 0x00);
 80053e2:	2200      	movs	r2, #0
 80053e4:	2103      	movs	r1, #3
 80053e6:	2017      	movs	r0, #23
 80053e8:	f001 fd0a 	bl	8006e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80053ec:	2017      	movs	r0, #23
 80053ee:	f001 fd3f 	bl	8006e70 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */
  
  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80053f2:	b009      	add	sp, #36	; 0x24
 80053f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80053f8:	08005171 	.word	0x08005171
 80053fc:	0800523d 	.word	0x0800523d
 8005400:	08005321 	.word	0x08005321
 8005404:	08005295 	.word	0x08005295
 8005408:	08005269 	.word	0x08005269
 800540c:	08006bd5 	.word	0x08006bd5

08005410 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8005410:	b508      	push	{r3, lr}
  /* Call hci_notify_asynch_evt() */
#ifdef HCI_TL
  while(IsDataAvailable())
 8005412:	f7ff ffc9 	bl	80053a8 <IsDataAvailable>
 8005416:	b120      	cbz	r0, 8005422 <hci_tl_lowlevel_isr+0x12>
  {        
    if(hci_notify_asynch_evt(NULL)) {
 8005418:	2000      	movs	r0, #0
 800541a:	f005 ffed 	bl	800b3f8 <hci_notify_asynch_evt>
 800541e:	2800      	cmp	r0, #0
 8005420:	d0f7      	beq.n	8005412 <hci_tl_lowlevel_isr+0x2>
#endif /* HCI_TL */

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */ 
}
 8005422:	bd08      	pop	{r3, pc}

08005424 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8005424:	b510      	push	{r4, lr}
 8005426:	b0ba      	sub	sp, #232	; 0xe8
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005428:	2400      	movs	r4, #0
 800542a:	9435      	str	r4, [sp, #212]	; 0xd4
 800542c:	9436      	str	r4, [sp, #216]	; 0xd8
 800542e:	9437      	str	r4, [sp, #220]	; 0xdc
 8005430:	9438      	str	r4, [sp, #224]	; 0xe0
 8005432:	9439      	str	r4, [sp, #228]	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005434:	2244      	movs	r2, #68	; 0x44
 8005436:	4621      	mov	r1, r4
 8005438:	a824      	add	r0, sp, #144	; 0x90
 800543a:	f008 fad9 	bl	800d9f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800543e:	2288      	movs	r2, #136	; 0x88
 8005440:	4621      	mov	r1, r4
 8005442:	a802      	add	r0, sp, #8
 8005444:	f008 fad4 	bl	800d9f0 <memset>

  __HAL_RCC_PWR_CLK_ENABLE();
 8005448:	4b2a      	ldr	r3, [pc, #168]	; (80054f4 <SystemClock_Config+0xd0>)
 800544a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800544c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005450:	659a      	str	r2, [r3, #88]	; 0x58
 8005452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005458:	9301      	str	r3, [sp, #4]
 800545a:	9b01      	ldr	r3, [sp, #4]
  HAL_PWR_EnableBkUpAccess();
 800545c:	f002 fc0e 	bl	8007c7c <HAL_PWR_EnableBkUpAccess>

  /* Enable the LSE Oscilator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8005460:	2304      	movs	r3, #4
 8005462:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005464:	2301      	movs	r3, #1
 8005466:	9326      	str	r3, [sp, #152]	; 0x98
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 8005468:	a824      	add	r0, sp, #144	; 0x90
 800546a:	f002 fcc9 	bl	8007e00 <HAL_RCC_OscConfig>
 800546e:	b100      	cbz	r0, 8005472 <SystemClock_Config+0x4e>
    while(1);
 8005470:	e7fe      	b.n	8005470 <SystemClock_Config+0x4c>
  }

  /* Enable the CSS interrupt in case LSE signal is corrupted or not present */
  HAL_RCCEx_DisableLSECSS();
 8005472:	f003 fc17 	bl	8008ca4 <HAL_RCCEx_DisableLSECSS>

  /* Enable MSI Oscillator and activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8005476:	2310      	movs	r3, #16
 8005478:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 800547a:	2301      	movs	r3, #1
 800547c:	932a      	str	r3, [sp, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800547e:	2200      	movs	r2, #0
 8005480:	9228      	str	r2, [sp, #160]	; 0xa0
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8005482:	22b0      	movs	r2, #176	; 0xb0
 8005484:	922c      	str	r2, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8005486:	2202      	movs	r2, #2
 8005488:	922e      	str	r2, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 800548a:	932f      	str	r3, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM            = 6;
 800548c:	2306      	movs	r3, #6
 800548e:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN            = 40;
 8005490:	2328      	movs	r3, #40	; 0x28
 8005492:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP            = 7;
 8005494:	2307      	movs	r3, #7
 8005496:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ            = 4;
 8005498:	2304      	movs	r3, #4
 800549a:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLR            = 4;
 800549c:	9334      	str	r3, [sp, #208]	; 0xd0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 800549e:	a824      	add	r0, sp, #144	; 0x90
 80054a0:	f002 fcae 	bl	8007e00 <HAL_RCC_OscConfig>
 80054a4:	b100      	cbz	r0, 80054a8 <SystemClock_Config+0x84>
    while(1);
 80054a6:	e7fe      	b.n	80054a6 <SystemClock_Config+0x82>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80054a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054ac:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80054ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054b2:	9323      	str	r3, [sp, #140]	; 0x8c
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054b4:	a802      	add	r0, sp, #8
 80054b6:	f003 f9cb 	bl	8008850 <HAL_RCCEx_PeriphCLKConfig>
 80054ba:	b100      	cbz	r0, 80054be <SystemClock_Config+0x9a>
  {
    while(1);
 80054bc:	e7fe      	b.n	80054bc <SystemClock_Config+0x98>
  }

  /* Enable MSI Auto-calibration through LSE */
  HAL_RCCEx_EnableMSIPLLMode();
 80054be:	f003 fbff 	bl	8008cc0 <HAL_RCCEx_EnableMSIPLLMode>

  /* Select MSI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80054c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054c6:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 80054c8:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 80054cc:	931d      	str	r3, [sp, #116]	; 0x74
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80054ce:	a802      	add	r0, sp, #8
 80054d0:	f003 f9be 	bl	8008850 <HAL_RCCEx_PeriphCLKConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80054d4:	230f      	movs	r3, #15
 80054d6:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80054d8:	2303      	movs	r3, #3
 80054da:	9336      	str	r3, [sp, #216]	; 0xd8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80054dc:	2300      	movs	r3, #0
 80054de:	9337      	str	r3, [sp, #220]	; 0xdc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80054e0:	9338      	str	r3, [sp, #224]	; 0xe0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80054e2:	9339      	str	r3, [sp, #228]	; 0xe4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK){
 80054e4:	2104      	movs	r1, #4
 80054e6:	a835      	add	r0, sp, #212	; 0xd4
 80054e8:	f002 ffa0 	bl	800842c <HAL_RCC_ClockConfig>
 80054ec:	b100      	cbz	r0, 80054f0 <SystemClock_Config+0xcc>
    while(1);
 80054ee:	e7fe      	b.n	80054ee <SystemClock_Config+0xca>
  }
}
 80054f0:	b03a      	add	sp, #232	; 0xe8
 80054f2:	bd10      	pop	{r4, pc}
 80054f4:	40021000 	.word	0x40021000

080054f8 <BSP_LSM303AGR_WriteReg_Acc>:
{
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	460d      	mov	r5, r1
 80054fe:	4614      	mov	r4, r2
  uint8_t dataReg = (uint8_t)Reg;
 8005500:	f88d 0007 	strb.w	r0, [sp, #7]
  LSM_ACC_CS_LOW();
 8005504:	2200      	movs	r2, #0
 8005506:	2110      	movs	r1, #16
 8005508:	480f      	ldr	r0, [pc, #60]	; (8005548 <BSP_LSM303AGR_WriteReg_Acc+0x50>)
 800550a:	f001 fe5e 	bl	80071ca <HAL_GPIO_WritePin>
  if (BSP_SPI2_Send(&dataReg, 1) != 1)
 800550e:	2101      	movs	r1, #1
 8005510:	f10d 0007 	add.w	r0, sp, #7
 8005514:	f001 fb36 	bl	8006b84 <BSP_SPI2_Send>
 8005518:	2801      	cmp	r0, #1
 800551a:	d00f      	beq.n	800553c <BSP_LSM303AGR_WriteReg_Acc+0x44>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800551c:	f06f 0605 	mvn.w	r6, #5
  if (BSP_SPI2_Send(pdata, len) != len)
 8005520:	4621      	mov	r1, r4
 8005522:	4628      	mov	r0, r5
 8005524:	f001 fb2e 	bl	8006b84 <BSP_SPI2_Send>
 8005528:	42a0      	cmp	r0, r4
 800552a:	d109      	bne.n	8005540 <BSP_LSM303AGR_WriteReg_Acc+0x48>
  LSM_ACC_CS_HIGH();
 800552c:	2201      	movs	r2, #1
 800552e:	2110      	movs	r1, #16
 8005530:	4805      	ldr	r0, [pc, #20]	; (8005548 <BSP_LSM303AGR_WriteReg_Acc+0x50>)
 8005532:	f001 fe4a 	bl	80071ca <HAL_GPIO_WritePin>
}
 8005536:	4630      	mov	r0, r6
 8005538:	b002      	add	sp, #8
 800553a:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = BSP_ERROR_NONE;
 800553c:	2600      	movs	r6, #0
 800553e:	e7ef      	b.n	8005520 <BSP_LSM303AGR_WriteReg_Acc+0x28>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005540:	f06f 0605 	mvn.w	r6, #5
 8005544:	e7f2      	b.n	800552c <BSP_LSM303AGR_WriteReg_Acc+0x34>
 8005546:	bf00      	nop
 8005548:	48000800 	.word	0x48000800

0800554c <startAcc>:
static void startAcc() {
 800554c:	b510      	push	{r4, lr}
 800554e:	b084      	sub	sp, #16
	inData[0] = 0x00;
 8005550:	2400      	movs	r4, #0
 8005552:	f88d 4004 	strb.w	r4, [sp, #4]
	BSP_LSM303AGR_WriteReg_Acc(CTRL_REG2_A,inData,1);
 8005556:	2201      	movs	r2, #1
 8005558:	a901      	add	r1, sp, #4
 800555a:	2021      	movs	r0, #33	; 0x21
 800555c:	f7ff ffcc 	bl	80054f8 <BSP_LSM303AGR_WriteReg_Acc>
	inData[0] = 0x00;
 8005560:	f88d 4004 	strb.w	r4, [sp, #4]
	BSP_LSM303AGR_WriteReg_Acc(CTRL_REG3_A,inData,1);
 8005564:	2201      	movs	r2, #1
 8005566:	a901      	add	r1, sp, #4
 8005568:	2022      	movs	r0, #34	; 0x22
 800556a:	f7ff ffc5 	bl	80054f8 <BSP_LSM303AGR_WriteReg_Acc>
	inData[0] = 0x81;
 800556e:	2381      	movs	r3, #129	; 0x81
 8005570:	f88d 3004 	strb.w	r3, [sp, #4]
	BSP_LSM303AGR_WriteReg_Acc(CTRL_REG4_A,inData,1);
 8005574:	2201      	movs	r2, #1
 8005576:	a901      	add	r1, sp, #4
 8005578:	2023      	movs	r0, #35	; 0x23
 800557a:	f7ff ffbd 	bl	80054f8 <BSP_LSM303AGR_WriteReg_Acc>
	inData[0] = 0x57;
 800557e:	2357      	movs	r3, #87	; 0x57
 8005580:	f88d 3004 	strb.w	r3, [sp, #4]
	BSP_LSM303AGR_WriteReg_Acc(CTRL_REG1_A,inData,1);
 8005584:	2201      	movs	r2, #1
 8005586:	a901      	add	r1, sp, #4
 8005588:	2020      	movs	r0, #32
 800558a:	f7ff ffb5 	bl	80054f8 <BSP_LSM303AGR_WriteReg_Acc>
}
 800558e:	b004      	add	sp, #16
 8005590:	bd10      	pop	{r4, pc}
	...

08005594 <BSP_LSM303AGR_WriteReg_Mag>:
{
 8005594:	b570      	push	{r4, r5, r6, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	460d      	mov	r5, r1
 800559a:	4614      	mov	r4, r2
  uint8_t dataReg = (uint8_t)Reg;
 800559c:	f88d 0007 	strb.w	r0, [sp, #7]
  LSM_MAG_CS_LOW();
 80055a0:	2200      	movs	r2, #0
 80055a2:	2102      	movs	r1, #2
 80055a4:	480f      	ldr	r0, [pc, #60]	; (80055e4 <BSP_LSM303AGR_WriteReg_Mag+0x50>)
 80055a6:	f001 fe10 	bl	80071ca <HAL_GPIO_WritePin>
  if (BSP_SPI2_Send(&dataReg, 1) != 1)
 80055aa:	2101      	movs	r1, #1
 80055ac:	f10d 0007 	add.w	r0, sp, #7
 80055b0:	f001 fae8 	bl	8006b84 <BSP_SPI2_Send>
 80055b4:	2801      	cmp	r0, #1
 80055b6:	d00f      	beq.n	80055d8 <BSP_LSM303AGR_WriteReg_Mag+0x44>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80055b8:	f06f 0605 	mvn.w	r6, #5
  if (BSP_SPI2_Send(pdata, len) != len)
 80055bc:	4621      	mov	r1, r4
 80055be:	4628      	mov	r0, r5
 80055c0:	f001 fae0 	bl	8006b84 <BSP_SPI2_Send>
 80055c4:	42a0      	cmp	r0, r4
 80055c6:	d109      	bne.n	80055dc <BSP_LSM303AGR_WriteReg_Mag+0x48>
  LSM_MAG_CS_HIGH();
 80055c8:	2201      	movs	r2, #1
 80055ca:	2102      	movs	r1, #2
 80055cc:	4805      	ldr	r0, [pc, #20]	; (80055e4 <BSP_LSM303AGR_WriteReg_Mag+0x50>)
 80055ce:	f001 fdfc 	bl	80071ca <HAL_GPIO_WritePin>
}
 80055d2:	4630      	mov	r0, r6
 80055d4:	b002      	add	sp, #8
 80055d6:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = BSP_ERROR_NONE;
 80055d8:	2600      	movs	r6, #0
 80055da:	e7ef      	b.n	80055bc <BSP_LSM303AGR_WriteReg_Mag+0x28>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80055dc:	f06f 0605 	mvn.w	r6, #5
 80055e0:	e7f2      	b.n	80055c8 <BSP_LSM303AGR_WriteReg_Mag+0x34>
 80055e2:	bf00      	nop
 80055e4:	48000400 	.word	0x48000400

080055e8 <startMag>:
static void startMag() {
 80055e8:	b500      	push	{lr}
 80055ea:	b085      	sub	sp, #20
	inData[0] = 0x8C;
 80055ec:	238c      	movs	r3, #140	; 0x8c
 80055ee:	f88d 3004 	strb.w	r3, [sp, #4]
	BSP_LSM303AGR_WriteReg_Mag(CFG_REG_A_M,inData,1);
 80055f2:	2201      	movs	r2, #1
 80055f4:	a901      	add	r1, sp, #4
 80055f6:	2060      	movs	r0, #96	; 0x60
 80055f8:	f7ff ffcc 	bl	8005594 <BSP_LSM303AGR_WriteReg_Mag>
	inData[0] = 0x03;
 80055fc:	2303      	movs	r3, #3
 80055fe:	f88d 3004 	strb.w	r3, [sp, #4]
	BSP_LSM303AGR_WriteReg_Mag(CFG_REG_B_M,inData,1);
 8005602:	2201      	movs	r2, #1
 8005604:	a901      	add	r1, sp, #4
 8005606:	2061      	movs	r0, #97	; 0x61
 8005608:	f7ff ffc4 	bl	8005594 <BSP_LSM303AGR_WriteReg_Mag>
	inData[0] = 0x10;
 800560c:	2310      	movs	r3, #16
 800560e:	f88d 3004 	strb.w	r3, [sp, #4]
	BSP_LSM303AGR_WriteReg_Mag(CFG_REG_C_M,inData,1);
 8005612:	2201      	movs	r2, #1
 8005614:	a901      	add	r1, sp, #4
 8005616:	2062      	movs	r0, #98	; 0x62
 8005618:	f7ff ffbc 	bl	8005594 <BSP_LSM303AGR_WriteReg_Mag>
}
 800561c:	b005      	add	sp, #20
 800561e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005624 <Init_BlueNRG_Stack>:
{
 8005624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005626:	b0d3      	sub	sp, #332	; 0x14c
  char customName[8] = "CSys704";
 8005628:	4a6c      	ldr	r2, [pc, #432]	; (80057dc <Init_BlueNRG_Stack+0x1b8>)
 800562a:	ab4e      	add	r3, sp, #312	; 0x138
 800562c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005630:	e883 0003 	stmia.w	r3, {r0, r1}
  for(int i=0; i<7; i++)
 8005634:	2300      	movs	r3, #0
 8005636:	2b06      	cmp	r3, #6
 8005638:	dc08      	bgt.n	800564c <Init_BlueNRG_Stack+0x28>
    BoardName[i]= customName[i];
 800563a:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 800563e:	446a      	add	r2, sp
 8005640:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8005644:	f802 1c08 	strb.w	r1, [r2, #-8]
  for(int i=0; i<7; i++)
 8005648:	3301      	adds	r3, #1
 800564a:	e7f4      	b.n	8005636 <Init_BlueNRG_Stack+0x12>
  BoardName[7]= 0;
 800564c:	2100      	movs	r1, #0
 800564e:	f88d 1147 	strb.w	r1, [sp, #327]	; 0x147
  hci_init(HCI_Event_CB, NULL);
 8005652:	4863      	ldr	r0, [pc, #396]	; (80057e0 <Init_BlueNRG_Stack+0x1bc>)
 8005654:	f005 fdcc 	bl	800b1f0 <hci_init>
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8005658:	f50d 7197 	add.w	r1, sp, #302	; 0x12e
 800565c:	a84c      	add	r0, sp, #304	; 0x130
 800565e:	f005 fcae 	bl	800afbe <getBlueNRGVersion>
  aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, 6, &data_len_out, bdaddr);
 8005662:	4c60      	ldr	r4, [pc, #384]	; (80057e4 <Init_BlueNRG_Stack+0x1c0>)
 8005664:	4623      	mov	r3, r4
 8005666:	f20d 1231 	addw	r2, sp, #305	; 0x131
 800566a:	2106      	movs	r1, #6
 800566c:	2080      	movs	r0, #128	; 0x80
 800566e:	f005 fc42 	bl	800aef6 <aci_hal_read_config_data>
  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8005672:	7963      	ldrb	r3, [r4, #5]
 8005674:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005678:	2bc0      	cmp	r3, #192	; 0xc0
 800567a:	d016      	beq.n	80056aa <Init_BlueNRG_Stack+0x86>
    XPRINTF("\r\nStatic Random address not well formed.\r\n");
 800567c:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 8005680:	4c59      	ldr	r4, [pc, #356]	; (80057e8 <Init_BlueNRG_Stack+0x1c4>)
 8005682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005684:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800568a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800568e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005692:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8005696:	f82c 2b02 	strh.w	r2, [ip], #2
 800569a:	0c12      	lsrs	r2, r2, #16
 800569c:	f88c 2000 	strb.w	r2, [ip]
 80056a0:	212a      	movs	r1, #42	; 0x2a
 80056a2:	a80b      	add	r0, sp, #44	; 0x2c
 80056a4:	f001 f816 	bl	80066d4 <CDC_Fill_Buffer>
    while(1);
 80056a8:	e7fe      	b.n	80056a8 <Init_BlueNRG_Stack+0x84>
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, data_len_out,
 80056aa:	4a4e      	ldr	r2, [pc, #312]	; (80057e4 <Init_BlueNRG_Stack+0x1c0>)
 80056ac:	f89d 1131 	ldrb.w	r1, [sp, #305]	; 0x131
 80056b0:	2000      	movs	r0, #0
 80056b2:	f005 fbed 	bl	800ae90 <aci_hal_write_config_data>
  hci_reset();
 80056b6:	f005 fcab 	bl	800b010 <hci_reset>
  ret = aci_gatt_init();
 80056ba:	f005 fabe 	bl	800ac3a <aci_gatt_init>
  if(ret){
 80056be:	bb38      	cbnz	r0, 8005710 <Init_BlueNRG_Stack+0xec>
  ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80056c0:	f50d 7399 	add.w	r3, sp, #306	; 0x132
 80056c4:	9301      	str	r3, [sp, #4]
 80056c6:	ab4d      	add	r3, sp, #308	; 0x134
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	f50d 739b 	add.w	r3, sp, #310	; 0x136
 80056ce:	2207      	movs	r2, #7
 80056d0:	2100      	movs	r1, #0
 80056d2:	2001      	movs	r0, #1
 80056d4:	f005 f9a2 	bl	800aa1c <aci_gap_init_IDB05A1>
  if(ret != BLE_STATUS_SUCCESS){
 80056d8:	bb48      	cbnz	r0, 800572e <Init_BlueNRG_Stack+0x10a>
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 80056da:	ab50      	add	r3, sp, #320	; 0x140
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	2307      	movs	r3, #7
 80056e0:	2200      	movs	r2, #0
 80056e2:	f8bd 1134 	ldrh.w	r1, [sp, #308]	; 0x134
 80056e6:	f8bd 0136 	ldrh.w	r0, [sp, #310]	; 0x136
 80056ea:	f005 fb72 	bl	800add2 <aci_gatt_update_char_value>
  if(ret){
 80056ee:	b348      	cbz	r0, 8005744 <Init_BlueNRG_Stack+0x120>
     XPRINTF("\r\naci_gatt_update_char_value failed\r\n");
 80056f0:	ac0b      	add	r4, sp, #44	; 0x2c
 80056f2:	4d3e      	ldr	r5, [pc, #248]	; (80057ec <Init_BlueNRG_Stack+0x1c8>)
 80056f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005700:	f844 0b04 	str.w	r0, [r4], #4
 8005704:	8021      	strh	r1, [r4, #0]
 8005706:	2125      	movs	r1, #37	; 0x25
 8005708:	a80b      	add	r0, sp, #44	; 0x2c
 800570a:	f000 ffe3 	bl	80066d4 <CDC_Fill_Buffer>
    while(1);
 800570e:	e7fe      	b.n	800570e <Init_BlueNRG_Stack+0xea>
     XPRINTF("\r\nGATT_Init failed\r\n");
 8005710:	ac0b      	add	r4, sp, #44	; 0x2c
 8005712:	4d37      	ldr	r5, [pc, #220]	; (80057f0 <Init_BlueNRG_Stack+0x1cc>)
 8005714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005718:	e895 0003 	ldmia.w	r5, {r0, r1}
 800571c:	f844 0b04 	str.w	r0, [r4], #4
 8005720:	7021      	strb	r1, [r4, #0]
 8005722:	2114      	movs	r1, #20
 8005724:	a80b      	add	r0, sp, #44	; 0x2c
 8005726:	f000 ffd5 	bl	80066d4 <CDC_Fill_Buffer>
}
 800572a:	b053      	add	sp, #332	; 0x14c
 800572c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     XPRINTF("\r\nGAP_Init failed\r\n");
 800572e:	ac0b      	add	r4, sp, #44	; 0x2c
 8005730:	4d30      	ldr	r5, [pc, #192]	; (80057f4 <Init_BlueNRG_Stack+0x1d0>)
 8005732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005736:	682b      	ldr	r3, [r5, #0]
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	2113      	movs	r1, #19
 800573c:	a80b      	add	r0, sp, #44	; 0x2c
 800573e:	f000 ffc9 	bl	80066d4 <CDC_Fill_Buffer>
     goto fail;
 8005742:	e7f2      	b.n	800572a <Init_BlueNRG_Stack+0x106>
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8005744:	2001      	movs	r0, #1
 8005746:	9003      	str	r0, [sp, #12]
 8005748:	4b2b      	ldr	r3, [pc, #172]	; (80057f8 <Init_BlueNRG_Stack+0x1d4>)
 800574a:	9302      	str	r3, [sp, #8]
 800574c:	2100      	movs	r1, #0
 800574e:	9101      	str	r1, [sp, #4]
 8005750:	2310      	movs	r3, #16
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	2307      	movs	r3, #7
 8005756:	460a      	mov	r2, r1
 8005758:	f005 f9f8 	bl	800ab4c <aci_gap_set_auth_requirement>
  if (ret != BLE_STATUS_SUCCESS) {
 800575c:	2800      	cmp	r0, #0
 800575e:	d12d      	bne.n	80057bc <Init_BlueNRG_Stack+0x198>
  XPRINTF("SERVER: BLE Stack Initialized \r\n"
 8005760:	f89d 2130 	ldrb.w	r2, [sp, #304]	; 0x130
 8005764:	f8bd 112e 	ldrh.w	r1, [sp, #302]	; 0x12e
 8005768:	f001 000f 	and.w	r0, r1, #15
 800576c:	4b1d      	ldr	r3, [pc, #116]	; (80057e4 <Init_BlueNRG_Stack+0x1c0>)
 800576e:	795c      	ldrb	r4, [r3, #5]
 8005770:	791f      	ldrb	r7, [r3, #4]
 8005772:	f893 e003 	ldrb.w	lr, [r3, #3]
 8005776:	789d      	ldrb	r5, [r3, #2]
 8005778:	785e      	ldrb	r6, [r3, #1]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	9309      	str	r3, [sp, #36]	; 0x24
 800577e:	9608      	str	r6, [sp, #32]
 8005780:	9507      	str	r5, [sp, #28]
 8005782:	f8cd e018 	str.w	lr, [sp, #24]
 8005786:	9705      	str	r7, [sp, #20]
 8005788:	9404      	str	r4, [sp, #16]
 800578a:	ab50      	add	r3, sp, #320	; 0x140
 800578c:	9303      	str	r3, [sp, #12]
 800578e:	3061      	adds	r0, #97	; 0x61
 8005790:	9002      	str	r0, [sp, #8]
 8005792:	f3c1 1303 	ubfx	r3, r1, #4, #4
 8005796:	9301      	str	r3, [sp, #4]
 8005798:	0a09      	lsrs	r1, r1, #8
 800579a:	9100      	str	r1, [sp, #0]
 800579c:	f002 030f 	and.w	r3, r2, #15
 80057a0:	0912      	lsrs	r2, r2, #4
 80057a2:	4916      	ldr	r1, [pc, #88]	; (80057fc <Init_BlueNRG_Stack+0x1d8>)
 80057a4:	a80b      	add	r0, sp, #44	; 0x2c
 80057a6:	f008 f903 	bl	800d9b0 <siprintf>
 80057aa:	4601      	mov	r1, r0
 80057ac:	a80b      	add	r0, sp, #44	; 0x2c
 80057ae:	f000 ff91 	bl	80066d4 <CDC_Fill_Buffer>
  aci_hal_set_tx_power_level(1,4);
 80057b2:	2104      	movs	r1, #4
 80057b4:	2001      	movs	r0, #1
 80057b6:	f005 fbda 	bl	800af6e <aci_hal_set_tx_power_level>
  return;
 80057ba:	e7b6      	b.n	800572a <Init_BlueNRG_Stack+0x106>
     XPRINTF("\r\nGAP setting Authentication failed\r\n");
 80057bc:	ac0b      	add	r4, sp, #44	; 0x2c
 80057be:	4d10      	ldr	r5, [pc, #64]	; (8005800 <Init_BlueNRG_Stack+0x1dc>)
 80057c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80057cc:	f844 0b04 	str.w	r0, [r4], #4
 80057d0:	8021      	strh	r1, [r4, #0]
 80057d2:	2125      	movs	r1, #37	; 0x25
 80057d4:	a80b      	add	r0, sp, #44	; 0x2c
 80057d6:	f000 ff7d 	bl	80066d4 <CDC_Fill_Buffer>
     goto fail;
 80057da:	e7a6      	b.n	800572a <Init_BlueNRG_Stack+0x106>
 80057dc:	0800e3fc 	.word	0x0800e3fc
 80057e0:	080050ed 	.word	0x080050ed
 80057e4:	20000320 	.word	0x20000320
 80057e8:	0800e2e0 	.word	0x0800e2e0
 80057ec:	0800e338 	.word	0x0800e338
 80057f0:	0800e30c 	.word	0x0800e30c
 80057f4:	0800e324 	.word	0x0800e324
 80057f8:	0001e240 	.word	0x0001e240
 80057fc:	0800e388 	.word	0x0800e388
 8005800:	0800e360 	.word	0x0800e360

08005804 <Init_BlueNRG_Custom_Services>:
{
 8005804:	b510      	push	{r4, lr}
 8005806:	b0c0      	sub	sp, #256	; 0x100
  ret = Add_HW_SW_ServW2ST_Service();
 8005808:	f7ff fac4 	bl	8004d94 <Add_HW_SW_ServW2ST_Service>
  if(ret == BLE_STATUS_SUCCESS)
 800580c:	b998      	cbnz	r0, 8005836 <Init_BlueNRG_Custom_Services+0x32>
     XPRINTF("HW & SW Service W2ST added successfully\r\n");
 800580e:	46ec      	mov	ip, sp
 8005810:	4c11      	ldr	r4, [pc, #68]	; (8005858 <Init_BlueNRG_Custom_Services+0x54>)
 8005812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005814:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800581a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800581e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005822:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8005826:	f8ac 2000 	strh.w	r2, [ip]
 800582a:	2129      	movs	r1, #41	; 0x29
 800582c:	4668      	mov	r0, sp
 800582e:	f000 ff51 	bl	80066d4 <CDC_Fill_Buffer>
}
 8005832:	b040      	add	sp, #256	; 0x100
 8005834:	bd10      	pop	{r4, pc}
     XPRINTF("\r\nError while adding HW & SW Service W2ST\r\n");
 8005836:	46ec      	mov	ip, sp
 8005838:	4c08      	ldr	r4, [pc, #32]	; (800585c <Init_BlueNRG_Custom_Services+0x58>)
 800583a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800583c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005842:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005846:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800584a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800584e:	212b      	movs	r1, #43	; 0x2b
 8005850:	4668      	mov	r0, sp
 8005852:	f000 ff3f 	bl	80066d4 <CDC_Fill_Buffer>
}
 8005856:	e7ec      	b.n	8005832 <Init_BlueNRG_Custom_Services+0x2e>
 8005858:	0800e404 	.word	0x0800e404
 800585c:	0800e430 	.word	0x0800e430

08005860 <SendMotionData>:
{
 8005860:	b508      	push	{r3, lr}
  AccGyroMag_Update(&ACC_Value,(BSP_MOTION_SENSOR_Axes_t*)&COMP_Value,&MAG_Value);
 8005862:	4804      	ldr	r0, [pc, #16]	; (8005874 <SendMotionData+0x14>)
 8005864:	f100 0208 	add.w	r2, r0, #8
 8005868:	f100 0114 	add.w	r1, r0, #20
 800586c:	3020      	adds	r0, #32
 800586e:	f7ff fb31 	bl	8004ed4 <AccGyroMag_Update>
}
 8005872:	bd08      	pop	{r3, pc}
 8005874:	20000320 	.word	0x20000320

08005878 <HAL_TIM_OC_DelayElapsedCallback>:
{
 8005878:	b508      	push	{r3, lr}
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 800587a:	7f03      	ldrb	r3, [r0, #28]
 800587c:	2b08      	cmp	r3, #8
 800587e:	d000      	beq.n	8005882 <HAL_TIM_OC_DelayElapsedCallback+0xa>
}
 8005880:	bd08      	pop	{r3, pc}
     uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8005882:	210c      	movs	r1, #12
 8005884:	f004 f85a 	bl	800993c <HAL_TIM_ReadCapturedValue>
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + uhCCR4_Val));
 8005888:	4b04      	ldr	r3, [pc, #16]	; (800589c <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 800588a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588c:	4904      	ldr	r1, [pc, #16]	; (80058a0 <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 800588e:	6809      	ldr	r1, [r1, #0]
 8005890:	4408      	add	r0, r1
 8005892:	6410      	str	r0, [r2, #64]	; 0x40
    SendAccGyroMag=1;
 8005894:	2201      	movs	r2, #1
 8005896:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005898:	e7f2      	b.n	8005880 <HAL_TIM_OC_DelayElapsedCallback+0x8>
 800589a:	bf00      	nop
 800589c:	20000320 	.word	0x20000320
 80058a0:	20000004 	.word	0x20000004

080058a4 <HAL_TIM_PeriodElapsedCallback>:
{
 80058a4:	b508      	push	{r3, lr}
  if(htim == (&TimEnvHandle)) {
 80058a6:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80058a8:	4298      	cmp	r0, r3
 80058aa:	d003      	beq.n	80058b4 <HAL_TIM_PeriodElapsedCallback+0x10>
    } else if(htim == (&TimHandle)) {
 80058ac:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80058ae:	4298      	cmp	r0, r3
 80058b0:	d005      	beq.n	80058be <HAL_TIM_PeriodElapsedCallback+0x1a>
}
 80058b2:	bd08      	pop	{r3, pc}
	  ReadSensor=1;
 80058b4:	3b7c      	subs	r3, #124	; 0x7c
 80058b6:	2201      	movs	r2, #1
 80058b8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80058bc:	e7f9      	b.n	80058b2 <HAL_TIM_PeriodElapsedCallback+0xe>
      CDC_TIM_PeriodElapsedCallback(htim);
 80058be:	f000 ff29 	bl	8006714 <CDC_TIM_PeriodElapsedCallback>
}
 80058c2:	e7f6      	b.n	80058b2 <HAL_TIM_PeriodElapsedCallback+0xe>
 80058c4:	2000039c 	.word	0x2000039c
 80058c8:	20000824 	.word	0x20000824

080058cc <Sensor_IO_SPI_CS_Init_All>:
{
 80058cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d0:	b08b      	sub	sp, #44	; 0x2c
  BSP_LSM6DSM_CS_GPIO_CLK_ENABLE();
 80058d2:	4b72      	ldr	r3, [pc, #456]	; (8005a9c <Sensor_IO_SPI_CS_Init_All+0x1d0>)
 80058d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058d6:	f042 0202 	orr.w	r2, r2, #2
 80058da:	64da      	str	r2, [r3, #76]	; 0x4c
 80058dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058de:	f002 0202 	and.w	r2, r2, #2
 80058e2:	9200      	str	r2, [sp, #0]
 80058e4:	9a00      	ldr	r2, [sp, #0]
  BSP_LSM303AGR_M_CS_GPIO_CLK_ENABLE();
 80058e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058e8:	f042 0202 	orr.w	r2, r2, #2
 80058ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80058ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058f0:	f002 0202 	and.w	r2, r2, #2
 80058f4:	9201      	str	r2, [sp, #4]
 80058f6:	9a01      	ldr	r2, [sp, #4]
  BSP_LSM303AGR_X_CS_GPIO_CLK_ENABLE();
 80058f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058fa:	f042 0204 	orr.w	r2, r2, #4
 80058fe:	64da      	str	r2, [r3, #76]	; 0x4c
 8005900:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005902:	f002 0204 	and.w	r2, r2, #4
 8005906:	9202      	str	r2, [sp, #8]
 8005908:	9a02      	ldr	r2, [sp, #8]
  BSP_LPS22HB_CS_GPIO_CLK_ENABLE();
 800590a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800590c:	f042 0201 	orr.w	r2, r2, #1
 8005910:	64da      	str	r2, [r3, #76]	; 0x4c
 8005912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	9303      	str	r3, [sp, #12]
 800591a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 800591c:	4d60      	ldr	r5, [pc, #384]	; (8005aa0 <Sensor_IO_SPI_CS_Init_All+0x1d4>)
 800591e:	2201      	movs	r2, #1
 8005920:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005924:	4628      	mov	r0, r5
 8005926:	f001 fc50 	bl	80071ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN,GPIO_PIN_SET);
 800592a:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8005aa4 <Sensor_IO_SPI_CS_Init_All+0x1d8>
 800592e:	2201      	movs	r2, #1
 8005930:	2110      	movs	r1, #16
 8005932:	4640      	mov	r0, r8
 8005934:	f001 fc49 	bl	80071ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,GPIO_PIN_SET);
 8005938:	2201      	movs	r2, #1
 800593a:	2102      	movs	r1, #2
 800593c:	4628      	mov	r0, r5
 800593e:	f001 fc44 	bl	80071ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8005942:	2201      	movs	r2, #1
 8005944:	2108      	movs	r1, #8
 8005946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800594a:	f001 fc3e 	bl	80071ca <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800594e:	2303      	movs	r3, #3
 8005950:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005952:	2600      	movs	r6, #0
 8005954:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005956:	2401      	movs	r4, #1
 8005958:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = BSP_LSM6DSM_CS_PIN;
 800595a:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 800595e:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(BSP_LSM6DSM_CS_PORT, &GPIO_InitStruct);
 8005962:	a905      	add	r1, sp, #20
 8005964:	4628      	mov	r0, r5
 8005966:	f001 faa5 	bl	8006eb4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 800596a:	4622      	mov	r2, r4
 800596c:	4649      	mov	r1, r9
 800596e:	4628      	mov	r0, r5
 8005970:	f001 fc2b 	bl	80071ca <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BSP_LSM303AGR_X_CS_PIN;
 8005974:	2710      	movs	r7, #16
 8005976:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(BSP_LSM303AGR_X_CS_PORT, &GPIO_InitStruct);
 8005978:	a905      	add	r1, sp, #20
 800597a:	4640      	mov	r0, r8
 800597c:	f001 fa9a 	bl	8006eb4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN,GPIO_PIN_SET);
 8005980:	4622      	mov	r2, r4
 8005982:	4639      	mov	r1, r7
 8005984:	4640      	mov	r0, r8
 8005986:	f001 fc20 	bl	80071ca <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BSP_LSM303AGR_M_CS_PIN;
 800598a:	f04f 0b02 	mov.w	fp, #2
 800598e:	f8cd b014 	str.w	fp, [sp, #20]
  HAL_GPIO_Init(BSP_LSM303AGR_M_CS_PORT, &GPIO_InitStruct);
 8005992:	a905      	add	r1, sp, #20
 8005994:	4628      	mov	r0, r5
 8005996:	f001 fa8d 	bl	8006eb4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,GPIO_PIN_SET);
 800599a:	4622      	mov	r2, r4
 800599c:	4659      	mov	r1, fp
 800599e:	4628      	mov	r0, r5
 80059a0:	f001 fc13 	bl	80071ca <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BSP_LPS22HB_CS_PIN;
 80059a4:	f04f 0a08 	mov.w	sl, #8
 80059a8:	f8cd a014 	str.w	sl, [sp, #20]
  HAL_GPIO_Init(BSP_LPS22HB_CS_PORT, &GPIO_InitStruct);
 80059ac:	a905      	add	r1, sp, #20
 80059ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059b2:	f001 fa7f 	bl	8006eb4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 80059b6:	4622      	mov	r2, r4
 80059b8:	4651      	mov	r1, sl
 80059ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059be:	f001 fc04 	bl	80071ca <HAL_GPIO_WritePin>
  	 if(BSP_SPI2_Init() == BSP_ERROR_NONE)
 80059c2:	f001 f981 	bl	8006cc8 <BSP_SPI2_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_RESET);
 80059c6:	4632      	mov	r2, r6
 80059c8:	4659      	mov	r1, fp
 80059ca:	4628      	mov	r0, r5
 80059cc:	f001 fbfd 	bl	80071ca <HAL_GPIO_WritePin>
  inData[0] = (0x62U);
 80059d0:	2362      	movs	r3, #98	; 0x62
 80059d2:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData,1);
 80059d6:	4621      	mov	r1, r4
 80059d8:	eb0d 0007 	add.w	r0, sp, r7
 80059dc:	f001 f8d2 	bl	8006b84 <BSP_SPI2_Send>
  inData[0] = 0x20;
 80059e0:	2320      	movs	r3, #32
 80059e2:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData,1);
 80059e6:	4621      	mov	r1, r4
 80059e8:	eb0d 0007 	add.w	r0, sp, r7
 80059ec:	f001 f8ca 	bl	8006b84 <BSP_SPI2_Send>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_SET);
 80059f0:	4622      	mov	r2, r4
 80059f2:	4659      	mov	r1, fp
 80059f4:	4628      	mov	r0, r5
 80059f6:	f001 fbe8 	bl	80071ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN, GPIO_PIN_RESET);
 80059fa:	4632      	mov	r2, r6
 80059fc:	4639      	mov	r1, r7
 80059fe:	4640      	mov	r0, r8
 8005a00:	f001 fbe3 	bl	80071ca <HAL_GPIO_WritePin>
  inData[0] = (0x23U);
 8005a04:	2323      	movs	r3, #35	; 0x23
 8005a06:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData,1);
 8005a0a:	4621      	mov	r1, r4
 8005a0c:	eb0d 0007 	add.w	r0, sp, r7
 8005a10:	f001 f8b8 	bl	8006b84 <BSP_SPI2_Send>
  inData[0] = 0x01;
 8005a14:	f88d 4010 	strb.w	r4, [sp, #16]
  BSP_SPI2_Send(inData,1);
 8005a18:	4621      	mov	r1, r4
 8005a1a:	eb0d 0007 	add.w	r0, sp, r7
 8005a1e:	f001 f8b1 	bl	8006b84 <BSP_SPI2_Send>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN, GPIO_PIN_SET);
 8005a22:	4622      	mov	r2, r4
 8005a24:	4639      	mov	r1, r7
 8005a26:	4640      	mov	r0, r8
 8005a28:	f001 fbcf 	bl	80071ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_RESET);
 8005a2c:	4632      	mov	r2, r6
 8005a2e:	4651      	mov	r1, sl
 8005a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a34:	f001 fbc9 	bl	80071ca <HAL_GPIO_WritePin>
  inData[0] = (0x10U);
 8005a38:	f88d 7010 	strb.w	r7, [sp, #16]
  BSP_SPI2_Send(inData,1);
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	eb0d 0007 	add.w	r0, sp, r7
 8005a42:	f001 f89f 	bl	8006b84 <BSP_SPI2_Send>
  inData[0] = 0x01;
 8005a46:	f88d 4010 	strb.w	r4, [sp, #16]
  BSP_SPI2_Send(inData,1);
 8005a4a:	4621      	mov	r1, r4
 8005a4c:	eb0d 0007 	add.w	r0, sp, r7
 8005a50:	f001 f898 	bl	8006b84 <BSP_SPI2_Send>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8005a54:	4622      	mov	r2, r4
 8005a56:	4651      	mov	r1, sl
 8005a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a5c:	f001 fbb5 	bl	80071ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_RESET);
 8005a60:	4632      	mov	r2, r6
 8005a62:	4649      	mov	r1, r9
 8005a64:	4628      	mov	r0, r5
 8005a66:	f001 fbb0 	bl	80071ca <HAL_GPIO_WritePin>
  inData[0] = (0x12U);
 8005a6a:	2312      	movs	r3, #18
 8005a6c:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData,1);
 8005a70:	4621      	mov	r1, r4
 8005a72:	eb0d 0007 	add.w	r0, sp, r7
 8005a76:	f001 f885 	bl	8006b84 <BSP_SPI2_Send>
  inData[0] = 0x0C;
 8005a7a:	230c      	movs	r3, #12
 8005a7c:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData,1);
 8005a80:	4621      	mov	r1, r4
 8005a82:	eb0d 0007 	add.w	r0, sp, r7
 8005a86:	f001 f87d 	bl	8006b84 <BSP_SPI2_Send>
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 8005a8a:	4622      	mov	r2, r4
 8005a8c:	4649      	mov	r1, r9
 8005a8e:	4628      	mov	r0, r5
 8005a90:	f001 fb9b 	bl	80071ca <HAL_GPIO_WritePin>
}
 8005a94:	4630      	mov	r0, r6
 8005a96:	b00b      	add	sp, #44	; 0x2c
 8005a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9c:	40021000 	.word	0x40021000
 8005aa0:	48000400 	.word	0x48000400
 8005aa4:	48000800 	.word	0x48000800

08005aa8 <LSM303AGR_SPI_Read_nBytes>:
{
 8005aa8:	b410      	push	{r4}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005aaa:	b672      	cpsid	i
  __HAL_SPI_ENABLE(xSpiHandle);
 8005aac:	6804      	ldr	r4, [r0, #0]
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ab4:	6023      	str	r3, [r4, #0]
  while (nBytesToRead > 1U)
 8005ab6:	2a01      	cmp	r2, #1
 8005ab8:	d90a      	bls.n	8005ad0 <LSM303AGR_SPI_Read_nBytes+0x28>
    if (xSpiHandle->Instance->SR & SPI_FLAG_RXNE)
 8005aba:	6803      	ldr	r3, [r0, #0]
 8005abc:	689c      	ldr	r4, [r3, #8]
 8005abe:	f014 0f01 	tst.w	r4, #1
 8005ac2:	d0f8      	beq.n	8005ab6 <LSM303AGR_SPI_Read_nBytes+0xe>
      *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005ac4:	7b1b      	ldrb	r3, [r3, #12]
 8005ac6:	f801 3b01 	strb.w	r3, [r1], #1
      nBytesToRead--;
 8005aca:	3a01      	subs	r2, #1
 8005acc:	b292      	uxth	r2, r2
 8005ace:	e7f2      	b.n	8005ab6 <LSM303AGR_SPI_Read_nBytes+0xe>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
  __HAL_SPI_DISABLE(xSpiHandle);
 8005ad8:	6802      	ldr	r2, [r0, #0]
 8005ada:	6813      	ldr	r3, [r2, #0]
 8005adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ae0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005ae2:	b662      	cpsie	i
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8005ae4:	6803      	ldr	r3, [r0, #0]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	f012 0f01 	tst.w	r2, #1
 8005aec:	d0fa      	beq.n	8005ae4 <LSM303AGR_SPI_Read_nBytes+0x3c>
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005aee:	7b1b      	ldrb	r3, [r3, #12]
 8005af0:	700b      	strb	r3, [r1, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005af2:	6803      	ldr	r3, [r0, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005afa:	d1fa      	bne.n	8005af2 <LSM303AGR_SPI_Read_nBytes+0x4a>
}
 8005afc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <LSM303AGR_SPI_Read>:
  __ASM volatile ("cpsid i" : : : "memory");
 8005b02:	b672      	cpsid	i
  __HAL_SPI_ENABLE(xSpiHandle);
 8005b04:	6802      	ldr	r2, [r0, #0]
 8005b06:	6813      	ldr	r3, [r2, #0]
 8005b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b0c:	6013      	str	r3, [r2, #0]
  __asm("dsb\n");
 8005b0e:	f3bf 8f4f 	dsb	sy
  __asm("dsb\n");
 8005b12:	f3bf 8f4f 	dsb	sy
  __HAL_SPI_DISABLE(xSpiHandle);
 8005b16:	6802      	ldr	r2, [r0, #0]
 8005b18:	6813      	ldr	r3, [r2, #0]
 8005b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b1e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005b20:	b662      	cpsie	i
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8005b22:	6803      	ldr	r3, [r0, #0]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	f012 0f01 	tst.w	r2, #1
 8005b2a:	d0fa      	beq.n	8005b22 <LSM303AGR_SPI_Read+0x20>
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005b2c:	7b1b      	ldrb	r3, [r3, #12]
 8005b2e:	700b      	strb	r3, [r1, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005b30:	6803      	ldr	r3, [r0, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005b38:	d1fa      	bne.n	8005b30 <LSM303AGR_SPI_Read+0x2e>
}
 8005b3a:	4770      	bx	lr

08005b3c <LSM303AGR_SPI_Write>:
  while ((xSpiHandle->Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8005b3c:	6803      	ldr	r3, [r0, #0]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	f012 0f02 	tst.w	r2, #2
 8005b44:	d0fa      	beq.n	8005b3c <LSM303AGR_SPI_Write>
  *((__IO uint8_t*) &xSpiHandle->Instance->DR) = val;
 8005b46:	7319      	strb	r1, [r3, #12]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 8005b48:	6803      	ldr	r3, [r0, #0]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 8005b50:	d1fa      	bne.n	8005b48 <LSM303AGR_SPI_Write+0xc>
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005b58:	d1fb      	bne.n	8005b52 <LSM303AGR_SPI_Write+0x16>
}
 8005b5a:	4770      	bx	lr

08005b5c <BSP_LSM303AGR_ReadReg_Mag>:
{
 8005b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5e:	460d      	mov	r5, r1
 8005b60:	4614      	mov	r4, r2
  uint8_t dataReg = (uint8_t)Reg;
 8005b62:	b2c7      	uxtb	r7, r0
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_RESET);
 8005b64:	2200      	movs	r2, #0
 8005b66:	2102      	movs	r1, #2
 8005b68:	4818      	ldr	r0, [pc, #96]	; (8005bcc <BSP_LSM303AGR_ReadReg_Mag+0x70>)
 8005b6a:	f001 fb2e 	bl	80071ca <HAL_GPIO_WritePin>
  LSM303AGR_SPI_Write(&hbusspi2, (dataReg) | 0x80);
 8005b6e:	4e18      	ldr	r6, [pc, #96]	; (8005bd0 <BSP_LSM303AGR_ReadReg_Mag+0x74>)
 8005b70:	f047 0180 	orr.w	r1, r7, #128	; 0x80
 8005b74:	4630      	mov	r0, r6
 8005b76:	f7ff ffe1 	bl	8005b3c <LSM303AGR_SPI_Write>
  __HAL_SPI_DISABLE(&hbusspi2);
 8005b7a:	6832      	ldr	r2, [r6, #0]
 8005b7c:	6813      	ldr	r3, [r2, #0]
 8005b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b82:	6013      	str	r3, [r2, #0]
  SPI_1LINE_RX(&hbusspi2);
 8005b84:	6832      	ldr	r2, [r6, #0]
 8005b86:	6813      	ldr	r3, [r2, #0]
 8005b88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b8c:	6013      	str	r3, [r2, #0]
  if (len > 1)
 8005b8e:	2c01      	cmp	r4, #1
 8005b90:	d916      	bls.n	8005bc0 <BSP_LSM303AGR_ReadReg_Mag+0x64>
    LSM303AGR_SPI_Read_nBytes(&hbusspi2, (pdata), len);
 8005b92:	4622      	mov	r2, r4
 8005b94:	4629      	mov	r1, r5
 8005b96:	4630      	mov	r0, r6
 8005b98:	f7ff ff86 	bl	8005aa8 <LSM303AGR_SPI_Read_nBytes>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_SET);
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	2102      	movs	r1, #2
 8005ba0:	480a      	ldr	r0, [pc, #40]	; (8005bcc <BSP_LSM303AGR_ReadReg_Mag+0x70>)
 8005ba2:	f001 fb12 	bl	80071ca <HAL_GPIO_WritePin>
  SPI_1LINE_TX(&hbusspi2);
 8005ba6:	4a0a      	ldr	r2, [pc, #40]	; (8005bd0 <BSP_LSM303AGR_ReadReg_Mag+0x74>)
 8005ba8:	6811      	ldr	r1, [r2, #0]
 8005baa:	680b      	ldr	r3, [r1, #0]
 8005bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bb0:	600b      	str	r3, [r1, #0]
  __HAL_SPI_ENABLE(&hbusspi2);
 8005bb2:	6812      	ldr	r2, [r2, #0]
 8005bb4:	6813      	ldr	r3, [r2, #0]
 8005bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bba:	6013      	str	r3, [r2, #0]
}
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LSM303AGR_SPI_Read(&hbusspi2, (pdata));
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	4803      	ldr	r0, [pc, #12]	; (8005bd0 <BSP_LSM303AGR_ReadReg_Mag+0x74>)
 8005bc4:	f7ff ff9d 	bl	8005b02 <LSM303AGR_SPI_Read>
 8005bc8:	e7e8      	b.n	8005b9c <BSP_LSM303AGR_ReadReg_Mag+0x40>
 8005bca:	bf00      	nop
 8005bcc:	48000400 	.word	0x48000400
 8005bd0:	20002588 	.word	0x20002588

08005bd4 <readMag>:
static void readMag() {
 8005bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bd8:	ed2d 8b02 	vpush	{d8}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	2600      	movs	r6, #0
 8005be0:	4637      	mov	r7, r6
 8005be2:	46b1      	mov	r9, r6
	for (int i=0; i< NUM_SAMPLES; i++){
 8005be4:	46b0      	mov	r8, r6
 8005be6:	e077      	b.n	8005cd8 <readMag+0x104>
		BSP_LSM303AGR_ReadReg_Mag(STATUS_REG_M,&magStatus,1);
 8005be8:	2201      	movs	r2, #1
 8005bea:	f10d 0107 	add.w	r1, sp, #7
 8005bee:	2067      	movs	r0, #103	; 0x67
 8005bf0:	f7ff ffb4 	bl	8005b5c <BSP_LSM303AGR_ReadReg_Mag>
	} while (!(magStatus & ZYXDA_BIT));
 8005bf4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005bf8:	f013 0f08 	tst.w	r3, #8
 8005bfc:	d0f4      	beq.n	8005be8 <readMag+0x14>
	BSP_LSM303AGR_ReadReg_Mag(OUTX_L_REG_M,&magLSB,1);
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f10d 0106 	add.w	r1, sp, #6
 8005c04:	2068      	movs	r0, #104	; 0x68
 8005c06:	f7ff ffa9 	bl	8005b5c <BSP_LSM303AGR_ReadReg_Mag>
	BSP_LSM303AGR_ReadReg_Mag(OUTX_H_REG_M,&magMSB,1);
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f10d 0105 	add.w	r1, sp, #5
 8005c10:	2069      	movs	r0, #105	; 0x69
 8005c12:	f7ff ffa3 	bl	8005b5c <BSP_LSM303AGR_ReadReg_Mag>
	OUTX_NOST_M = (int16_t)(magMSB <<8 | magLSB);
 8005c16:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005c1a:	021b      	lsls	r3, r3, #8
 8005c1c:	b21b      	sxth	r3, r3
 8005c1e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	ee07 3a90 	vmov	s15, r3
	magX_mG = (int16_t)(OUTX_NOST_M * magConversion *1000);		// multiply by mag conversion unit in mg
 8005c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c2c:	eddf 8a3a 	vldr	s17, [pc, #232]	; 8005d18 <readMag+0x144>
 8005c30:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8005c34:	ed9f 8a39 	vldr	s16, [pc, #228]	; 8005d1c <readMag+0x148>
 8005c38:	ee67 7a88 	vmul.f32	s15, s15, s16
 8005c3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c40:	ee17 3a90 	vmov	r3, s15
 8005c44:	b21d      	sxth	r5, r3
	BSP_LSM303AGR_ReadReg_Mag(OUTY_L_REG_M,&magLSB,1);
 8005c46:	2201      	movs	r2, #1
 8005c48:	f10d 0106 	add.w	r1, sp, #6
 8005c4c:	206a      	movs	r0, #106	; 0x6a
 8005c4e:	f7ff ff85 	bl	8005b5c <BSP_LSM303AGR_ReadReg_Mag>
	BSP_LSM303AGR_ReadReg_Mag(OUTY_H_REG_M,&magMSB,1);
 8005c52:	2201      	movs	r2, #1
 8005c54:	f10d 0105 	add.w	r1, sp, #5
 8005c58:	206b      	movs	r0, #107	; 0x6b
 8005c5a:	f7ff ff7f 	bl	8005b5c <BSP_LSM303AGR_ReadReg_Mag>
	OUTY_NOST_M = (int16_t)(magMSB <<8 | magLSB);
 8005c5e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005c62:	021b      	lsls	r3, r3, #8
 8005c64:	b21b      	sxth	r3, r3
 8005c66:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	ee07 3a90 	vmov	s15, r3
	magY_mG = (int16_t)(OUTY_NOST_M * magConversion*1000);
 8005c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c74:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8005c78:	ee67 7a88 	vmul.f32	s15, s15, s16
 8005c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c80:	ee17 3a90 	vmov	r3, s15
 8005c84:	b21c      	sxth	r4, r3
	BSP_LSM303AGR_ReadReg_Mag(OUTZ_L_REG_M,&magLSB,1);
 8005c86:	2201      	movs	r2, #1
 8005c88:	f10d 0106 	add.w	r1, sp, #6
 8005c8c:	206c      	movs	r0, #108	; 0x6c
 8005c8e:	f7ff ff65 	bl	8005b5c <BSP_LSM303AGR_ReadReg_Mag>
	BSP_LSM303AGR_ReadReg_Mag(OUTZ_H_REG_M,&magMSB,1);
 8005c92:	2201      	movs	r2, #1
 8005c94:	f10d 0105 	add.w	r1, sp, #5
 8005c98:	206d      	movs	r0, #109	; 0x6d
 8005c9a:	f7ff ff5f 	bl	8005b5c <BSP_LSM303AGR_ReadReg_Mag>
	OUTZ_NOST_M = (int16_t)(magMSB <<8 | magLSB);
 8005c9e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005ca2:	021b      	lsls	r3, r3, #8
 8005ca4:	b21b      	sxth	r3, r3
 8005ca6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	ee07 3a90 	vmov	s15, r3
	magZ_mG = (int16_t)(OUTZ_NOST_M * magConversion*1000);
 8005cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cb4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8005cb8:	ee67 7a88 	vmul.f32	s15, s15, s16
 8005cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cc0:	ee17 3a90 	vmov	r3, s15
	magX_sum +=magX_mG;
 8005cc4:	4435      	add	r5, r6
 8005cc6:	b22e      	sxth	r6, r5
	magY_sum +=magY_mG;
 8005cc8:	443c      	add	r4, r7
 8005cca:	b227      	sxth	r7, r4
	magZ_sum +=magZ_mG;
 8005ccc:	fa09 f383 	sxtah	r3, r9, r3
 8005cd0:	fa0f f983 	sxth.w	r9, r3
	for (int i=0; i< NUM_SAMPLES; i++){
 8005cd4:	f108 0801 	add.w	r8, r8, #1
 8005cd8:	f1b8 0f04 	cmp.w	r8, #4
 8005cdc:	dd84      	ble.n	8005be8 <readMag+0x14>
	MAG_Value.x= magX_sum / NUM_SAMPLES - hardiron_x;
 8005cde:	4a10      	ldr	r2, [pc, #64]	; (8005d20 <readMag+0x14c>)
 8005ce0:	fb82 3106 	smull	r3, r1, r2, r6
 8005ce4:	17f3      	asrs	r3, r6, #31
 8005ce6:	ebc3 0361 	rsb	r3, r3, r1, asr #1
 8005cea:	b21b      	sxth	r3, r3
 8005cec:	490d      	ldr	r1, [pc, #52]	; (8005d24 <readMag+0x150>)
 8005cee:	608b      	str	r3, [r1, #8]
	MAG_Value.y= magY_sum / NUM_SAMPLES - hardiron_y;
 8005cf0:	fb82 3007 	smull	r3, r0, r2, r7
 8005cf4:	17fb      	asrs	r3, r7, #31
 8005cf6:	ebc3 0360 	rsb	r3, r3, r0, asr #1
 8005cfa:	b21b      	sxth	r3, r3
 8005cfc:	60cb      	str	r3, [r1, #12]
	MAG_Value.z= magZ_sum / NUM_SAMPLES;
 8005cfe:	fb82 3209 	smull	r3, r2, r2, r9
 8005d02:	ea4f 73e9 	mov.w	r3, r9, asr #31
 8005d06:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 8005d0a:	b21b      	sxth	r3, r3
 8005d0c:	610b      	str	r3, [r1, #16]
}
 8005d0e:	b003      	add	sp, #12
 8005d10:	ecbd 8b02 	vpop	{d8}
 8005d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d18:	3ac80190 	.word	0x3ac80190
 8005d1c:	447a0000 	.word	0x447a0000
 8005d20:	66666667 	.word	0x66666667
 8005d24:	20000320 	.word	0x20000320

08005d28 <BSP_LSM303AGR_ReadReg_Acc>:
{
 8005d28:	b570      	push	{r4, r5, r6, lr}
 8005d2a:	460d      	mov	r5, r1
 8005d2c:	4614      	mov	r4, r2
  uint8_t dataReg = (uint8_t)Reg;
 8005d2e:	b2c6      	uxtb	r6, r0
  LSM_ACC_CS_LOW();
 8005d30:	2200      	movs	r2, #0
 8005d32:	2110      	movs	r1, #16
 8005d34:	481c      	ldr	r0, [pc, #112]	; (8005da8 <BSP_LSM303AGR_ReadReg_Acc+0x80>)
 8005d36:	f001 fa48 	bl	80071ca <HAL_GPIO_WritePin>
  if (len > 1) {
 8005d3a:	2c01      	cmp	r4, #1
 8005d3c:	d928      	bls.n	8005d90 <BSP_LSM303AGR_ReadReg_Acc+0x68>
	  LSM303AGR_SPI_Write(&hbusspi2, (dataReg) | 0x80 | 0x40);
 8005d3e:	f046 01c0 	orr.w	r1, r6, #192	; 0xc0
 8005d42:	481a      	ldr	r0, [pc, #104]	; (8005dac <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005d44:	f7ff fefa 	bl	8005b3c <LSM303AGR_SPI_Write>
  __HAL_SPI_DISABLE(&hbusspi2);
 8005d48:	4a18      	ldr	r2, [pc, #96]	; (8005dac <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005d4a:	6811      	ldr	r1, [r2, #0]
 8005d4c:	680b      	ldr	r3, [r1, #0]
 8005d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d52:	600b      	str	r3, [r1, #0]
  SPI_1LINE_RX(&hbusspi2);
 8005d54:	6812      	ldr	r2, [r2, #0]
 8005d56:	6813      	ldr	r3, [r2, #0]
 8005d58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d5c:	6013      	str	r3, [r2, #0]
  if (len > 1)
 8005d5e:	2c01      	cmp	r4, #1
 8005d60:	d91c      	bls.n	8005d9c <BSP_LSM303AGR_ReadReg_Acc+0x74>
    LSM303AGR_SPI_Read_nBytes(&hbusspi2, (pdata), len);
 8005d62:	4622      	mov	r2, r4
 8005d64:	4629      	mov	r1, r5
 8005d66:	4811      	ldr	r0, [pc, #68]	; (8005dac <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005d68:	f7ff fe9e 	bl	8005aa8 <LSM303AGR_SPI_Read_nBytes>
  LSM_ACC_CS_HIGH();
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	2110      	movs	r1, #16
 8005d70:	480d      	ldr	r0, [pc, #52]	; (8005da8 <BSP_LSM303AGR_ReadReg_Acc+0x80>)
 8005d72:	f001 fa2a 	bl	80071ca <HAL_GPIO_WritePin>
  SPI_1LINE_TX(&hbusspi2);
 8005d76:	4a0d      	ldr	r2, [pc, #52]	; (8005dac <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005d78:	6811      	ldr	r1, [r2, #0]
 8005d7a:	680b      	ldr	r3, [r1, #0]
 8005d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d80:	600b      	str	r3, [r1, #0]
  __HAL_SPI_ENABLE(&hbusspi2);
 8005d82:	6812      	ldr	r2, [r2, #0]
 8005d84:	6813      	ldr	r3, [r2, #0]
 8005d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d8a:	6013      	str	r3, [r2, #0]
}
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	bd70      	pop	{r4, r5, r6, pc}
	  LSM303AGR_SPI_Write(&hbusspi2, (dataReg) | 0x80);
 8005d90:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 8005d94:	4805      	ldr	r0, [pc, #20]	; (8005dac <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005d96:	f7ff fed1 	bl	8005b3c <LSM303AGR_SPI_Write>
 8005d9a:	e7d5      	b.n	8005d48 <BSP_LSM303AGR_ReadReg_Acc+0x20>
    LSM303AGR_SPI_Read(&hbusspi2, (pdata));
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	4803      	ldr	r0, [pc, #12]	; (8005dac <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005da0:	f7ff feaf 	bl	8005b02 <LSM303AGR_SPI_Read>
 8005da4:	e7e2      	b.n	8005d6c <BSP_LSM303AGR_ReadReg_Acc+0x44>
 8005da6:	bf00      	nop
 8005da8:	48000800 	.word	0x48000800
 8005dac:	20002588 	.word	0x20002588

08005db0 <InitLSM>:
static void InitLSM() {
 8005db0:	b510      	push	{r4, lr}
 8005db2:	b0c4      	sub	sp, #272	; 0x110
	Sensor_IO_SPI_CS_Init_All();
 8005db4:	f7ff fd8a 	bl	80058cc <Sensor_IO_SPI_CS_Init_All>
	inData[0] = 0x01;
 8005db8:	2401      	movs	r4, #1
 8005dba:	f88d 4104 	strb.w	r4, [sp, #260]	; 0x104
	BSP_LSM303AGR_WriteReg_Acc(0x23,inData,1);
 8005dbe:	4622      	mov	r2, r4
 8005dc0:	a941      	add	r1, sp, #260	; 0x104
 8005dc2:	2023      	movs	r0, #35	; 0x23
 8005dc4:	f7ff fb98 	bl	80054f8 <BSP_LSM303AGR_WriteReg_Acc>
	inData[0] = 0x20;
 8005dc8:	2320      	movs	r3, #32
 8005dca:	f88d 3104 	strb.w	r3, [sp, #260]	; 0x104
	BSP_LSM303AGR_WriteReg_Mag(0x62U,inData,1);
 8005dce:	4622      	mov	r2, r4
 8005dd0:	a941      	add	r1, sp, #260	; 0x104
 8005dd2:	2062      	movs	r0, #98	; 0x62
 8005dd4:	f7ff fbde 	bl	8005594 <BSP_LSM303AGR_WriteReg_Mag>
	BSP_LSM303AGR_ReadReg_Mag(0x4F,inData,1);
 8005dd8:	4622      	mov	r2, r4
 8005dda:	a941      	add	r1, sp, #260	; 0x104
 8005ddc:	204f      	movs	r0, #79	; 0x4f
 8005dde:	f7ff febd 	bl	8005b5c <BSP_LSM303AGR_ReadReg_Mag>
	XPRINTF("IAM Mag= %d,%d",inData[0],inData[1]);
 8005de2:	f89d 3105 	ldrb.w	r3, [sp, #261]	; 0x105
 8005de6:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
 8005dea:	490d      	ldr	r1, [pc, #52]	; (8005e20 <InitLSM+0x70>)
 8005dec:	a801      	add	r0, sp, #4
 8005dee:	f007 fddf 	bl	800d9b0 <siprintf>
 8005df2:	4601      	mov	r1, r0
 8005df4:	a801      	add	r0, sp, #4
 8005df6:	f000 fc6d 	bl	80066d4 <CDC_Fill_Buffer>
	BSP_LSM303AGR_ReadReg_Acc(0x0F,inData,1);
 8005dfa:	4622      	mov	r2, r4
 8005dfc:	a941      	add	r1, sp, #260	; 0x104
 8005dfe:	200f      	movs	r0, #15
 8005e00:	f7ff ff92 	bl	8005d28 <BSP_LSM303AGR_ReadReg_Acc>
	XPRINTF("IAM Acc= %d,%d",inData[0],inData[1]);
 8005e04:	f89d 3105 	ldrb.w	r3, [sp, #261]	; 0x105
 8005e08:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
 8005e0c:	4905      	ldr	r1, [pc, #20]	; (8005e24 <InitLSM+0x74>)
 8005e0e:	a801      	add	r0, sp, #4
 8005e10:	f007 fdce 	bl	800d9b0 <siprintf>
 8005e14:	4601      	mov	r1, r0
 8005e16:	a801      	add	r0, sp, #4
 8005e18:	f000 fc5c 	bl	80066d4 <CDC_Fill_Buffer>
}
 8005e1c:	b044      	add	sp, #272	; 0x110
 8005e1e:	bd10      	pop	{r4, pc}
 8005e20:	0800e45c 	.word	0x0800e45c
 8005e24:	0800e46c 	.word	0x0800e46c

08005e28 <readAcc>:
static void readAcc() {
 8005e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e2c:	ed2d 8b02 	vpush	{d8}
 8005e30:	b083      	sub	sp, #12
 8005e32:	2600      	movs	r6, #0
 8005e34:	4637      	mov	r7, r6
 8005e36:	46b1      	mov	r9, r6
	for (int i=0; i<NUM_SAMPLES; i++){
 8005e38:	46b0      	mov	r8, r6
 8005e3a:	e077      	b.n	8005f2c <readAcc+0x104>
		BSP_LSM303AGR_ReadReg_Acc(STATUS_REG_A,&accStatus,1);
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f10d 0107 	add.w	r1, sp, #7
 8005e42:	2027      	movs	r0, #39	; 0x27
 8005e44:	f7ff ff70 	bl	8005d28 <BSP_LSM303AGR_ReadReg_Acc>
	} while (!(accStatus & ZYXDA_BIT));
 8005e48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005e4c:	f013 0f08 	tst.w	r3, #8
 8005e50:	d0f4      	beq.n	8005e3c <readAcc+0x14>
	BSP_LSM303AGR_ReadReg_Acc(OUT_X_L_A,&accLSB,1);
 8005e52:	2201      	movs	r2, #1
 8005e54:	f10d 0106 	add.w	r1, sp, #6
 8005e58:	2028      	movs	r0, #40	; 0x28
 8005e5a:	f7ff ff65 	bl	8005d28 <BSP_LSM303AGR_ReadReg_Acc>
	BSP_LSM303AGR_ReadReg_Acc(OUT_X_H_A,&accMSB,1);
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f10d 0105 	add.w	r1, sp, #5
 8005e64:	2029      	movs	r0, #41	; 0x29
 8005e66:	f7ff ff5f 	bl	8005d28 <BSP_LSM303AGR_ReadReg_Acc>
	OUTX_NOST_A = (int16_t)(accMSB <<8 | accLSB);
 8005e6a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005e6e:	021b      	lsls	r3, r3, #8
 8005e70:	b21b      	sxth	r3, r3
 8005e72:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	ee07 3a90 	vmov	s15, r3
	accX_mg = (int16_t)(OUTX_NOST_A * accConversion *1000);
 8005e7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e80:	eddf 8a3a 	vldr	s17, [pc, #232]	; 8005f6c <readAcc+0x144>
 8005e84:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8005e88:	ed9f 8a39 	vldr	s16, [pc, #228]	; 8005f70 <readAcc+0x148>
 8005e8c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8005e90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e94:	ee17 3a90 	vmov	r3, s15
 8005e98:	b21d      	sxth	r5, r3
	BSP_LSM303AGR_ReadReg_Acc(OUT_Y_L_A,&accLSB,1);
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f10d 0106 	add.w	r1, sp, #6
 8005ea0:	202a      	movs	r0, #42	; 0x2a
 8005ea2:	f7ff ff41 	bl	8005d28 <BSP_LSM303AGR_ReadReg_Acc>
	BSP_LSM303AGR_ReadReg_Acc(OUT_Y_H_A,&accMSB,1);
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f10d 0105 	add.w	r1, sp, #5
 8005eac:	202b      	movs	r0, #43	; 0x2b
 8005eae:	f7ff ff3b 	bl	8005d28 <BSP_LSM303AGR_ReadReg_Acc>
	OUTY_NOST_A = (int16_t)(accMSB <<8 | accLSB);
 8005eb2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005eb6:	021b      	lsls	r3, r3, #8
 8005eb8:	b21b      	sxth	r3, r3
 8005eba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	ee07 3a90 	vmov	s15, r3
	accY_mg = (int16_t)(OUTY_NOST_A * accConversion *1000);
 8005ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ec8:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8005ecc:	ee67 7a88 	vmul.f32	s15, s15, s16
 8005ed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ed4:	ee17 3a90 	vmov	r3, s15
 8005ed8:	b21c      	sxth	r4, r3
	BSP_LSM303AGR_ReadReg_Acc(OUT_Z_L_A,&accLSB,1);
 8005eda:	2201      	movs	r2, #1
 8005edc:	f10d 0106 	add.w	r1, sp, #6
 8005ee0:	202c      	movs	r0, #44	; 0x2c
 8005ee2:	f7ff ff21 	bl	8005d28 <BSP_LSM303AGR_ReadReg_Acc>
	BSP_LSM303AGR_ReadReg_Acc(OUT_Z_H_A,&accMSB,1);
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f10d 0105 	add.w	r1, sp, #5
 8005eec:	202d      	movs	r0, #45	; 0x2d
 8005eee:	f7ff ff1b 	bl	8005d28 <BSP_LSM303AGR_ReadReg_Acc>
	OUTZ_NOST_A = (int16_t)(accMSB <<8 | accLSB);
 8005ef2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005ef6:	021b      	lsls	r3, r3, #8
 8005ef8:	b21b      	sxth	r3, r3
 8005efa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	ee07 3a90 	vmov	s15, r3
	accZ_mg = (int16_t)(OUTZ_NOST_A * accConversion * 1000);
 8005f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f08:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8005f0c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8005f10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f14:	ee17 3a90 	vmov	r3, s15
	accX_sum +=accX_mg;
 8005f18:	4435      	add	r5, r6
 8005f1a:	b22e      	sxth	r6, r5
	accY_sum +=accY_mg;
 8005f1c:	443c      	add	r4, r7
 8005f1e:	b227      	sxth	r7, r4
	accZ_sum +=accZ_mg;
 8005f20:	fa09 f383 	sxtah	r3, r9, r3
 8005f24:	fa0f f983 	sxth.w	r9, r3
	for (int i=0; i<NUM_SAMPLES; i++){
 8005f28:	f108 0801 	add.w	r8, r8, #1
 8005f2c:	f1b8 0f04 	cmp.w	r8, #4
 8005f30:	dd84      	ble.n	8005e3c <readAcc+0x14>
	ACC_Value.x= accX_sum / NUM_SAMPLES;
 8005f32:	4a10      	ldr	r2, [pc, #64]	; (8005f74 <readAcc+0x14c>)
 8005f34:	fb82 3106 	smull	r3, r1, r2, r6
 8005f38:	17f3      	asrs	r3, r6, #31
 8005f3a:	ebc3 0361 	rsb	r3, r3, r1, asr #1
 8005f3e:	b21b      	sxth	r3, r3
 8005f40:	490d      	ldr	r1, [pc, #52]	; (8005f78 <readAcc+0x150>)
 8005f42:	620b      	str	r3, [r1, #32]
	ACC_Value.y= accY_sum / NUM_SAMPLES;
 8005f44:	fb82 3007 	smull	r3, r0, r2, r7
 8005f48:	17fb      	asrs	r3, r7, #31
 8005f4a:	ebc3 0360 	rsb	r3, r3, r0, asr #1
 8005f4e:	b21b      	sxth	r3, r3
 8005f50:	624b      	str	r3, [r1, #36]	; 0x24
	ACC_Value.z= accZ_sum / NUM_SAMPLES;
 8005f52:	fb82 3209 	smull	r3, r2, r2, r9
 8005f56:	ea4f 73e9 	mov.w	r3, r9, asr #31
 8005f5a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 8005f5e:	b21b      	sxth	r3, r3
 8005f60:	628b      	str	r3, [r1, #40]	; 0x28
}
 8005f62:	b003      	add	sp, #12
 8005f64:	ecbd 8b02 	vpop	{d8}
 8005f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f6c:	38800000 	.word	0x38800000
 8005f70:	447a0000 	.word	0x447a0000
 8005f74:	66666667 	.word	0x66666667
 8005f78:	20000320 	.word	0x20000320

08005f7c <HAL_Delay>:
  * @note This is a user implementation using WFI state
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8005f7c:	b510      	push	{r4, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8005f82:	f000 ff25 	bl	8006dd0 <HAL_GetTick>
 8005f86:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay){
 8005f88:	e000      	b.n	8005f8c <HAL_Delay+0x10>
    __WFI();
 8005f8a:	bf30      	wfi
  while((HAL_GetTick() - tickstart) < Delay){
 8005f8c:	f000 ff20 	bl	8006dd0 <HAL_GetTick>
 8005f90:	1b00      	subs	r0, r0, r4
 8005f92:	9b01      	ldr	r3, [sp, #4]
 8005f94:	4298      	cmp	r0, r3
 8005f96:	d3f8      	bcc.n	8005f8a <HAL_Delay+0xe>
  }
}
 8005f98:	b002      	add	sp, #8
 8005f9a:	bd10      	pop	{r4, pc}

08005f9c <InitTargetPlatform>:
{
 8005f9c:	b510      	push	{r4, lr}
  HAL_PWREx_EnableVddUSB();
 8005f9e:	f001 fe7d 	bl	8007c9c <HAL_PWREx_EnableVddUSB>
  USBD_Init(&USBD_Device, &VCP_Desc, 0);
 8005fa2:	4c0d      	ldr	r4, [pc, #52]	; (8005fd8 <InitTargetPlatform+0x3c>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	490d      	ldr	r1, [pc, #52]	; (8005fdc <InitTargetPlatform+0x40>)
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f005 fc75 	bl	800b898 <USBD_Init>
  USBD_RegisterClass(&USBD_Device, USBD_CDC_CLASS);
 8005fae:	490c      	ldr	r1, [pc, #48]	; (8005fe0 <InitTargetPlatform+0x44>)
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f005 fc88 	bl	800b8c6 <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops);
 8005fb6:	490b      	ldr	r1, [pc, #44]	; (8005fe4 <InitTargetPlatform+0x48>)
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f005 fc38 	bl	800b82e <USBD_CDC_RegisterInterface>
  USBD_Start(&USBD_Device);
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f005 fc98 	bl	800b8f4 <USBD_Start>
  HAL_Delay(5000);
 8005fc4:	f241 3088 	movw	r0, #5000	; 0x1388
 8005fc8:	f7ff ffd8 	bl	8005f7c <HAL_Delay>
  BSP_LED_Init( LED1 );
 8005fcc:	2000      	movs	r0, #0
 8005fce:	f000 fd37 	bl	8006a40 <BSP_LED_Init>
  InitLSM(); //N4S
 8005fd2:	f7ff feed 	bl	8005db0 <InitLSM>
}
 8005fd6:	bd10      	pop	{r4, pc}
 8005fd8:	200003ec 	.word	0x200003ec
 8005fdc:	20000060 	.word	0x20000060
 8005fe0:	20000168 	.word	0x20000168
 8005fe4:	20000018 	.word	0x20000018

08005fe8 <Error_Handler>:
  * @retval None
  */
void Error_Handler(void)
{
  /* User may add here some code to deal with this error */
  while(1){
 8005fe8:	e7fe      	b.n	8005fe8 <Error_Handler>
	...

08005fec <InitTimers>:
{
 8005fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fee:	b089      	sub	sp, #36	; 0x24
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1);
 8005ff0:	4f2e      	ldr	r7, [pc, #184]	; (80060ac <InitTimers+0xc0>)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	4e2e      	ldr	r6, [pc, #184]	; (80060b0 <InitTimers+0xc4>)
 8005ff6:	fba6 2303 	umull	r2, r3, r6, r3
 8005ffa:	0b5b      	lsrs	r3, r3, #13
 8005ffc:	3b01      	subs	r3, #1
  TimEnvHandle.Instance = TIM4;
 8005ffe:	4c2d      	ldr	r4, [pc, #180]	; (80060b4 <InitTimers+0xc8>)
 8006000:	4a2d      	ldr	r2, [pc, #180]	; (80060b8 <InitTimers+0xcc>)
 8006002:	67e2      	str	r2, [r4, #124]	; 0x7c
  TimEnvHandle.Init.Period = 655;
 8006004:	f240 228f 	movw	r2, #655	; 0x28f
 8006008:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  TimEnvHandle.Init.Prescaler = uwPrescalerValue;
 800600c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  TimEnvHandle.Init.ClockDivision = 0;
 8006010:	2500      	movs	r5, #0
 8006012:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  TimEnvHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006016:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  if(HAL_TIM_Base_Init(&TimEnvHandle) != HAL_OK) {
 800601a:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 800601e:	f003 fddb 	bl	8009bd8 <HAL_TIM_Base_Init>
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	fba6 6303 	umull	r6, r3, r6, r3
 8006028:	0b5b      	lsrs	r3, r3, #13
 800602a:	3b01      	subs	r3, #1
  TimCCHandle.Instance = TIM1;
 800602c:	4a23      	ldr	r2, [pc, #140]	; (80060bc <InitTimers+0xd0>)
 800602e:	62e2      	str	r2, [r4, #44]	; 0x2c
  TimCCHandle.Init.Period        = 65535;
 8006030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006034:	63a2      	str	r2, [r4, #56]	; 0x38
  TimCCHandle.Init.Prescaler     = uwPrescalerValue;
 8006036:	6323      	str	r3, [r4, #48]	; 0x30
  TimCCHandle.Init.ClockDivision = 0;
 8006038:	63e5      	str	r5, [r4, #60]	; 0x3c
  TimCCHandle.Init.CounterMode   = TIM_COUNTERMODE_UP;
 800603a:	6365      	str	r5, [r4, #52]	; 0x34
  if(HAL_TIM_OC_Init(&TimCCHandle) != HAL_OK)
 800603c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8006040:	f003 fdfa 	bl	8009c38 <HAL_TIM_OC_Init>
 8006044:	bb40      	cbnz	r0, 8006098 <InitTimers+0xac>
  sConfig.OCMode     = TIM_OCMODE_TOGGLE;
 8006046:	2330      	movs	r3, #48	; 0x30
 8006048:	9301      	str	r3, [sp, #4]
  sConfig.OCPolarity = TIM_OCPOLARITY_LOW;
 800604a:	2302      	movs	r3, #2
 800604c:	9303      	str	r3, [sp, #12]
  sConfig.Pulse = DEFAULT_uhCCR1_Val;
 800604e:	2364      	movs	r3, #100	; 0x64
 8006050:	9302      	str	r3, [sp, #8]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_1) != HAL_OK)
 8006052:	2200      	movs	r2, #0
 8006054:	a901      	add	r1, sp, #4
 8006056:	481a      	ldr	r0, [pc, #104]	; (80060c0 <InitTimers+0xd4>)
 8006058:	f003 fe64 	bl	8009d24 <HAL_TIM_OC_ConfigChannel>
 800605c:	b9f0      	cbnz	r0, 800609c <InitTimers+0xb0>
  sConfig.Pulse = DEFAULT_uhCCR2_Val;
 800605e:	23c8      	movs	r3, #200	; 0xc8
 8006060:	9302      	str	r3, [sp, #8]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_2) != HAL_OK)
 8006062:	2204      	movs	r2, #4
 8006064:	eb0d 0102 	add.w	r1, sp, r2
 8006068:	4815      	ldr	r0, [pc, #84]	; (80060c0 <InitTimers+0xd4>)
 800606a:	f003 fe5b 	bl	8009d24 <HAL_TIM_OC_ConfigChannel>
 800606e:	b9b8      	cbnz	r0, 80060a0 <InitTimers+0xb4>
  sConfig.Pulse = DEFAULT_uhCCR3_Val;
 8006070:	f240 2371 	movw	r3, #625	; 0x271
 8006074:	9302      	str	r3, [sp, #8]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_3) != HAL_OK)
 8006076:	2208      	movs	r2, #8
 8006078:	a901      	add	r1, sp, #4
 800607a:	4811      	ldr	r0, [pc, #68]	; (80060c0 <InitTimers+0xd4>)
 800607c:	f003 fe52 	bl	8009d24 <HAL_TIM_OC_ConfigChannel>
 8006080:	b980      	cbnz	r0, 80060a4 <InitTimers+0xb8>
  sConfig.Pulse = DEFAULT_uhCCR4_Val;
 8006082:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006086:	9302      	str	r3, [sp, #8]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_4) != HAL_OK)
 8006088:	220c      	movs	r2, #12
 800608a:	a901      	add	r1, sp, #4
 800608c:	480c      	ldr	r0, [pc, #48]	; (80060c0 <InitTimers+0xd4>)
 800608e:	f003 fe49 	bl	8009d24 <HAL_TIM_OC_ConfigChannel>
 8006092:	b948      	cbnz	r0, 80060a8 <InitTimers+0xbc>
}
 8006094:	b009      	add	sp, #36	; 0x24
 8006096:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8006098:	f7ff ffa6 	bl	8005fe8 <Error_Handler>
    Error_Handler();
 800609c:	f7ff ffa4 	bl	8005fe8 <Error_Handler>
    Error_Handler();
 80060a0:	f7ff ffa2 	bl	8005fe8 <Error_Handler>
    Error_Handler();
 80060a4:	f7ff ffa0 	bl	8005fe8 <Error_Handler>
    Error_Handler();
 80060a8:	f7ff ff9e 	bl	8005fe8 <Error_Handler>
 80060ac:	20000084 	.word	0x20000084
 80060b0:	d1b71759 	.word	0xd1b71759
 80060b4:	20000320 	.word	0x20000320
 80060b8:	40000800 	.word	0x40000800
 80060bc:	40012c00 	.word	0x40012c00
 80060c0:	2000034c 	.word	0x2000034c
 80060c4:	00000000 	.word	0x00000000

080060c8 <main>:
{
 80060c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ca:	ed2d 8b02 	vpush	{d8}
 80060ce:	b0c1      	sub	sp, #260	; 0x104
  HAL_Init();
 80060d0:	f000 fe62 	bl	8006d98 <HAL_Init>
  SystemClock_Config();
 80060d4:	f7ff f9a6 	bl	8005424 <SystemClock_Config>
  InitTargetPlatform();
 80060d8:	f7ff ff60 	bl	8005f9c <InitTargetPlatform>
  Init_BlueNRG_Stack();
 80060dc:	f7ff faa2 	bl	8005624 <Init_BlueNRG_Stack>
  Init_BlueNRG_Custom_Services();
 80060e0:	f7ff fb90 	bl	8005804 <Init_BlueNRG_Custom_Services>
  InitTimers();
 80060e4:	f7ff ff82 	bl	8005fec <InitTimers>
  if(HAL_TIM_Base_Start_IT(&TimEnvHandle) != HAL_OK){
 80060e8:	48b5      	ldr	r0, [pc, #724]	; (80063c0 <main+0x2f8>)
 80060ea:	f003 fbe1 	bl	80098b0 <HAL_TIM_Base_Start_IT>
 80060ee:	b108      	cbz	r0, 80060f4 <main+0x2c>
    Error_Handler();
 80060f0:	f7ff ff7a 	bl	8005fe8 <Error_Handler>
  connected = FALSE;
 80060f4:	4bb3      	ldr	r3, [pc, #716]	; (80063c4 <main+0x2fc>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]
  NodeName[1] = 'g';
 80060fa:	4bb3      	ldr	r3, [pc, #716]	; (80063c8 <main+0x300>)
 80060fc:	2267      	movs	r2, #103	; 0x67
 80060fe:	f883 239d 	strb.w	r2, [r3, #925]	; 0x39d
  NodeName[2] = 'k';
 8006102:	226b      	movs	r2, #107	; 0x6b
 8006104:	f883 239e 	strb.w	r2, [r3, #926]	; 0x39e
  NodeName[3] = 'i';
 8006108:	2269      	movs	r2, #105	; 0x69
 800610a:	f883 239f 	strb.w	r2, [r3, #927]	; 0x39f
  NodeName[4] = 'm';
 800610e:	226d      	movs	r2, #109	; 0x6d
 8006110:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
  NodeName[5] = '9';
 8006114:	2239      	movs	r2, #57	; 0x39
 8006116:	f883 23a1 	strb.w	r2, [r3, #929]	; 0x3a1
  NodeName[6] = '0';
 800611a:	2230      	movs	r2, #48	; 0x30
 800611c:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2
  NodeName[7] = '2';
 8006120:	2232      	movs	r2, #50	; 0x32
 8006122:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
  startMag();
 8006126:	f7ff fa5f 	bl	80055e8 <startMag>
  startAcc();
 800612a:	f7ff fa0f 	bl	800554c <startAcc>
 800612e:	e127      	b.n	8006380 <main+0x2b8>
          if(!(HAL_GetTick()&0x3FF)) {
 8006130:	f000 fe4e 	bl	8006dd0 <HAL_GetTick>
 8006134:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8006138:	2800      	cmp	r0, #0
 800613a:	f040 8126 	bne.w	800638a <main+0x2c2>
        	  BSP_LED_Toggle(LED1);
 800613e:	f000 fcbf 	bl	8006ac0 <BSP_LED_Toggle>
 8006142:	e122      	b.n	800638a <main+0x2c2>
      setConnectable();
 8006144:	f7fe ff42 	bl	8004fcc <setConnectable>
      set_connectable = FALSE;
 8006148:	4ba0      	ldr	r3, [pc, #640]	; (80063cc <main+0x304>)
 800614a:	2200      	movs	r2, #0
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	e121      	b.n	8006394 <main+0x2cc>
      HCI_ProcessEvent=0;
 8006150:	4b9d      	ldr	r3, [pc, #628]	; (80063c8 <main+0x300>)
 8006152:	2200      	movs	r2, #0
 8006154:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4
      hci_user_evt_proc();
 8006158:	f005 f92c 	bl	800b3b4 <hci_user_evt_proc>
 800615c:	e120      	b.n	80063a0 <main+0x2d8>
    	ReadSensor=0;
 800615e:	4c9a      	ldr	r4, [pc, #616]	; (80063c8 <main+0x300>)
 8006160:	2300      	movs	r3, #0
 8006162:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    	readMag();
 8006166:	f7ff fd35 	bl	8005bd4 <readMag>
    	readAcc();
 800616a:	f7ff fe5d 	bl	8005e28 <readAcc>
    float magX_h = MAG_Value.x; // in milli Gauss
 800616e:	68a0      	ldr	r0, [r4, #8]
    float magY_h = MAG_Value.y;
 8006170:	ed94 8a03 	vldr	s16, [r4, #12]
 8006174:	eeb8 8a48 	vcvt.f32.u32	s16, s16
	float currentHeading = (atan2(magY_h,magX_h)*180)/PI;
 8006178:	ee07 0a90 	vmov	s15, r0
 800617c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006180:	ee17 0a90 	vmov	r0, s15
 8006184:	f7fe f9d8 	bl	8004538 <__aeabi_f2d>
 8006188:	4604      	mov	r4, r0
 800618a:	460d      	mov	r5, r1
 800618c:	ee18 0a10 	vmov	r0, s16
 8006190:	f7fe f9d2 	bl	8004538 <__aeabi_f2d>
 8006194:	4622      	mov	r2, r4
 8006196:	462b      	mov	r3, r5
 8006198:	f006 f8ac 	bl	800c2f4 <atan2>
 800619c:	2200      	movs	r2, #0
 800619e:	4b8c      	ldr	r3, [pc, #560]	; (80063d0 <main+0x308>)
 80061a0:	f7fe fa22 	bl	80045e8 <__aeabi_dmul>
 80061a4:	a384      	add	r3, pc, #528	; (adr r3, 80063b8 <main+0x2f0>)
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	f7fe fb47 	bl	800483c <__aeabi_ddiv>
 80061ae:	f7fe fcdd 	bl	8004b6c <__aeabi_d2f>
 80061b2:	ee07 0a90 	vmov	s15, r0
    if (currentHeading<0){
 80061b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061be:	f100 8099 	bmi.w	80062f4 <main+0x22c>
    if (initialHeading<0){
 80061c2:	4b84      	ldr	r3, [pc, #528]	; (80063d4 <main+0x30c>)
 80061c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80061c8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80061cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d0:	f100 8095 	bmi.w	80062fe <main+0x236>
    float relativeHeading = currentHeading - initialHeading;
 80061d4:	4b7f      	ldr	r3, [pc, #508]	; (80063d4 <main+0x30c>)
 80061d6:	ed93 8a01 	vldr	s16, [r3, #4]
 80061da:	ee37 8ac8 	vsub.f32	s16, s15, s16
    if (relativeHeading <0){
 80061de:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80061e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e6:	f100 808d 	bmi.w	8006304 <main+0x23c>
    int16_t currentHeadingInt = (int16_t)currentHeading;
 80061ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    int16_t relativeHeadingInt = (int16_t)relativeHeading;
 80061ee:	eebd 7ac8 	vcvt.s32.f32	s14, s16
 80061f2:	ee17 3a10 	vmov	r3, s14
 80061f6:	b21c      	sxth	r4, r3
    XPRINTF("Heading from Mag = %d degrees, Relative Heading from Mag = %d degrees\n", currentHeadingInt, relativeHeadingInt);
 80061f8:	4623      	mov	r3, r4
 80061fa:	ee17 2a90 	vmov	r2, s15
 80061fe:	b212      	sxth	r2, r2
 8006200:	4975      	ldr	r1, [pc, #468]	; (80063d8 <main+0x310>)
 8006202:	4668      	mov	r0, sp
 8006204:	f007 fbd4 	bl	800d9b0 <siprintf>
 8006208:	4601      	mov	r1, r0
 800620a:	4668      	mov	r0, sp
 800620c:	f000 fa62 	bl	80066d4 <CDC_Fill_Buffer>
    float accZ_mg = ACC_Value.z;
 8006210:	4b6d      	ldr	r3, [pc, #436]	; (80063c8 <main+0x300>)
 8006212:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006216:	eef8 8a67 	vcvt.f32.u32	s17, s15
    if (!stepDetected && accZ_mg >= STEP_START_THRESHOLD){
 800621a:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800621e:	b933      	cbnz	r3, 800622e <main+0x166>
 8006220:	eddf 7a6e 	vldr	s15, [pc, #440]	; 80063dc <main+0x314>
 8006224:	eef4 8ae7 	vcmpe.f32	s17, s15
 8006228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800622c:	da6f      	bge.n	800630e <main+0x246>
    else if (stepDetected && accZ_mg <= STEP_FINISH_THRESHOLD){
 800622e:	b133      	cbz	r3, 800623e <main+0x176>
 8006230:	eddf 7a6b 	vldr	s15, [pc, #428]	; 80063e0 <main+0x318>
 8006234:	eef4 8ae7 	vcmpe.f32	s17, s15
 8006238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800623c:	d975      	bls.n	800632a <main+0x262>
    oldAccZ = accZ_mg;	// Store the old Z acceleration
 800623e:	4b65      	ldr	r3, [pc, #404]	; (80063d4 <main+0x30c>)
 8006240:	edc3 8a02 	vstr	s17, [r3, #8]
    if (stepCounted){
 8006244:	4b60      	ldr	r3, [pc, #384]	; (80063c8 <main+0x300>)
 8006246:	f893 33a9 	ldrb.w	r3, [r3, #937]	; 0x3a9
 800624a:	2b00      	cmp	r3, #0
 800624c:	d03c      	beq.n	80062c8 <main+0x200>
    	totalDistance += stepDistance; // total distance
 800624e:	4d5e      	ldr	r5, [pc, #376]	; (80063c8 <main+0x300>)
 8006250:	edd5 7aec 	vldr	s15, [r5, #944]	; 0x3b0
 8006254:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80063e4 <main+0x31c>
 8006258:	ee77 7a87 	vadd.f32	s15, s15, s14
 800625c:	edc5 7aec 	vstr	s15, [r5, #944]	; 0x3b0
    	float positionChangeX= stepDistance * sin(relativeHeading* PI/180.0);
 8006260:	ee18 0a10 	vmov	r0, s16
 8006264:	f7fe f968 	bl	8004538 <__aeabi_f2d>
 8006268:	a353      	add	r3, pc, #332	; (adr r3, 80063b8 <main+0x2f0>)
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	f7fe f9bb 	bl	80045e8 <__aeabi_dmul>
 8006272:	2200      	movs	r2, #0
 8006274:	4b56      	ldr	r3, [pc, #344]	; (80063d0 <main+0x308>)
 8006276:	f7fe fae1 	bl	800483c <__aeabi_ddiv>
 800627a:	4606      	mov	r6, r0
 800627c:	460f      	mov	r7, r1
 800627e:	f006 f881 	bl	800c384 <sin>
 8006282:	2200      	movs	r2, #0
 8006284:	4b58      	ldr	r3, [pc, #352]	; (80063e8 <main+0x320>)
 8006286:	f7fe f9af 	bl	80045e8 <__aeabi_dmul>
 800628a:	f7fe fc6f 	bl	8004b6c <__aeabi_d2f>
 800628e:	ee08 0a10 	vmov	s16, r0
    	float positionChangeY= stepDistance * cos(relativeHeading* PI/180.0);
 8006292:	4630      	mov	r0, r6
 8006294:	4639      	mov	r1, r7
 8006296:	f006 f82f 	bl	800c2f8 <cos>
 800629a:	2200      	movs	r2, #0
 800629c:	4b52      	ldr	r3, [pc, #328]	; (80063e8 <main+0x320>)
 800629e:	f7fe f9a3 	bl	80045e8 <__aeabi_dmul>
 80062a2:	f7fe fc63 	bl	8004b6c <__aeabi_d2f>
 80062a6:	ee07 0a10 	vmov	s14, r0
    	currentPositionX += positionChangeX;
 80062aa:	edd5 7aed 	vldr	s15, [r5, #948]	; 0x3b4
 80062ae:	ee77 7a88 	vadd.f32	s15, s15, s16
 80062b2:	edc5 7aed 	vstr	s15, [r5, #948]	; 0x3b4
    	currentPositionY += positionChangeY;
 80062b6:	edd5 7aee 	vldr	s15, [r5, #952]	; 0x3b8
 80062ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062be:	edc5 7aee 	vstr	s15, [r5, #952]	; 0x3b8
    	stepCounted = false; // Reset for the next step count
 80062c2:	2300      	movs	r3, #0
 80062c4:	f885 33a9 	strb.w	r3, [r5, #937]	; 0x3a9
    COMP_Value.x = (int16_t)currentPositionX;
 80062c8:	4b3f      	ldr	r3, [pc, #252]	; (80063c8 <main+0x300>)
 80062ca:	edd3 7aed 	vldr	s15, [r3, #948]	; 0x3b4
 80062ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062d2:	ee17 2a90 	vmov	r2, s15
 80062d6:	b212      	sxth	r2, r2
 80062d8:	615a      	str	r2, [r3, #20]
    COMP_Value.y = (int16_t)currentPositionY;
 80062da:	edd3 7aee 	vldr	s15, [r3, #952]	; 0x3b8
 80062de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062e2:	ee17 2a90 	vmov	r2, s15
 80062e6:	b212      	sxth	r2, r2
 80062e8:	619a      	str	r2, [r3, #24]
    COMP_Value.Heading = relativeHeadingInt *10;
 80062ea:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80062ee:	0064      	lsls	r4, r4, #1
 80062f0:	61dc      	str	r4, [r3, #28]
 80062f2:	e05b      	b.n	80063ac <main+0x2e4>
    	currentHeading +=360;
 80062f4:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80063ec <main+0x324>
 80062f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062fc:	e761      	b.n	80061c2 <main+0xfa>
    	initialHeading = currentHeading;
 80062fe:	edc3 7a01 	vstr	s15, [r3, #4]
 8006302:	e767      	b.n	80061d4 <main+0x10c>
    	relativeHeading += 360;
 8006304:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80063ec <main+0x324>
 8006308:	ee38 8a07 	vadd.f32	s16, s16, s14
 800630c:	e76d      	b.n	80061ea <main+0x122>
    	XPRINTF("Step Started\n");
 800630e:	4b38      	ldr	r3, [pc, #224]	; (80063f0 <main+0x328>)
 8006310:	466d      	mov	r5, sp
 8006312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006314:	c507      	stmia	r5!, {r0, r1, r2}
 8006316:	802b      	strh	r3, [r5, #0]
 8006318:	210d      	movs	r1, #13
 800631a:	4668      	mov	r0, sp
 800631c:	f000 f9da 	bl	80066d4 <CDC_Fill_Buffer>
    	stepDetected = true;
 8006320:	4b29      	ldr	r3, [pc, #164]	; (80063c8 <main+0x300>)
 8006322:	2201      	movs	r2, #1
 8006324:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
 8006328:	e789      	b.n	800623e <main+0x176>
    	XPRINTF("Step ended\n");
 800632a:	466b      	mov	r3, sp
 800632c:	4a31      	ldr	r2, [pc, #196]	; (80063f4 <main+0x32c>)
 800632e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006330:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006334:	210b      	movs	r1, #11
 8006336:	4618      	mov	r0, r3
 8006338:	f000 f9cc 	bl	80066d4 <CDC_Fill_Buffer>
    	stepDetected = false;
 800633c:	4b22      	ldr	r3, [pc, #136]	; (80063c8 <main+0x300>)
 800633e:	2200      	movs	r2, #0
 8006340:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
    	if(!stepCounted){
 8006344:	f893 33a9 	ldrb.w	r3, [r3, #937]	; 0x3a9
 8006348:	b943      	cbnz	r3, 800635c <main+0x294>
    		stepCount ++;
 800634a:	4b1f      	ldr	r3, [pc, #124]	; (80063c8 <main+0x300>)
 800634c:	f8d3 23ac 	ldr.w	r2, [r3, #940]	; 0x3ac
 8006350:	3201      	adds	r2, #1
 8006352:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    		stepCounted = true;		// one step only counted once
 8006356:	2201      	movs	r2, #1
 8006358:	f883 23a9 	strb.w	r2, [r3, #937]	; 0x3a9
    	XPRINTF("Step count: %d\n", stepCount);
 800635c:	4b1a      	ldr	r3, [pc, #104]	; (80063c8 <main+0x300>)
 800635e:	f8d3 23ac 	ldr.w	r2, [r3, #940]	; 0x3ac
 8006362:	4925      	ldr	r1, [pc, #148]	; (80063f8 <main+0x330>)
 8006364:	4668      	mov	r0, sp
 8006366:	f007 fb23 	bl	800d9b0 <siprintf>
 800636a:	4601      	mov	r1, r0
 800636c:	4668      	mov	r0, sp
 800636e:	f000 f9b1 	bl	80066d4 <CDC_Fill_Buffer>
 8006372:	e764      	b.n	800623e <main+0x176>
		SendMotionData();
 8006374:	f7ff fa74 	bl	8005860 <SendMotionData>
    	SendAccGyroMag=0;
 8006378:	4b13      	ldr	r3, [pc, #76]	; (80063c8 <main+0x300>)
 800637a:	2200      	movs	r2, #0
 800637c:	679a      	str	r2, [r3, #120]	; 0x78
    __WFI();
 800637e:	bf30      	wfi
      if(!connected) {
 8006380:	4b10      	ldr	r3, [pc, #64]	; (80063c4 <main+0x2fc>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	f43f aed3 	beq.w	8006130 <main+0x68>
    if(set_connectable){
 800638a:	4b10      	ldr	r3, [pc, #64]	; (80063cc <main+0x304>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	f47f aed8 	bne.w	8006144 <main+0x7c>
    if(HCI_ProcessEvent) {
 8006394:	4b0c      	ldr	r3, [pc, #48]	; (80063c8 <main+0x300>)
 8006396:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 800639a:	2b00      	cmp	r3, #0
 800639c:	f47f aed8 	bne.w	8006150 <main+0x88>
    if(ReadSensor) {
 80063a0:	4b09      	ldr	r3, [pc, #36]	; (80063c8 <main+0x300>)
 80063a2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f47f aed9 	bne.w	800615e <main+0x96>
    if(SendAccGyroMag) {
 80063ac:	4b06      	ldr	r3, [pc, #24]	; (80063c8 <main+0x300>)
 80063ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d0e4      	beq.n	800637e <main+0x2b6>
 80063b4:	e7de      	b.n	8006374 <main+0x2ac>
 80063b6:	bf00      	nop
 80063b8:	fc8b007a 	.word	0xfc8b007a
 80063bc:	400921fa 	.word	0x400921fa
 80063c0:	2000039c 	.word	0x2000039c
 80063c4:	2000020c 	.word	0x2000020c
 80063c8:	20000320 	.word	0x20000320
 80063cc:	20000000 	.word	0x20000000
 80063d0:	40668000 	.word	0x40668000
 80063d4:	20000004 	.word	0x20000004
 80063d8:	0800e47c 	.word	0x0800e47c
 80063dc:	44898000 	.word	0x44898000
 80063e0:	44610000 	.word	0x44610000
 80063e4:	42640000 	.word	0x42640000
 80063e8:	404c8000 	.word	0x404c8000
 80063ec:	43b40000 	.word	0x43b40000
 80063f0:	0800e4c4 	.word	0x0800e4c4
 80063f4:	0800e4d4 	.word	0x0800e4d4
 80063f8:	0800e4e0 	.word	0x0800e4e0

080063fc <HAL_GPIO_EXTI_Callback>:
 * @param  uint16_t GPIO_Pin Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  switch(GPIO_Pin){
 80063fc:	2820      	cmp	r0, #32
 80063fe:	d000      	beq.n	8006402 <HAL_GPIO_EXTI_Callback+0x6>
 8006400:	4770      	bx	lr
{
 8006402:	b508      	push	{r3, lr}
  case HCI_TL_SPI_EXTI_PIN:
      hci_tl_lowlevel_isr();
 8006404:	f7ff f804 	bl	8005410 <hci_tl_lowlevel_isr>
      HCI_ProcessEvent=1;
 8006408:	4b02      	ldr	r3, [pc, #8]	; (8006414 <HAL_GPIO_EXTI_Callback+0x18>)
 800640a:	2201      	movs	r2, #1
 800640c:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4

//  case BSP_LSM6DSM_INT2:
//    MEMSInterrupt=1;
//    break;
  }
}
 8006410:	bd08      	pop	{r3, pc}
 8006412:	bf00      	nop
 8006414:	20000320 	.word	0x20000320

08006418 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8006418:	b530      	push	{r4, r5, lr}
 800641a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800641c:	4c16      	ldr	r4, [pc, #88]	; (8006478 <HAL_PCD_MspInit+0x60>)
 800641e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006420:	f043 0301 	orr.w	r3, r3, #1
 8006424:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006426:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	9301      	str	r3, [sp, #4]
 800642e:	9b01      	ldr	r3, [sp, #4]

  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8006430:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006434:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006436:	2302      	movs	r3, #2
 8006438:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800643a:	2500      	movs	r5, #0
 800643c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800643e:	2303      	movs	r3, #3
 8006440:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006442:	230a      	movs	r3, #10
 8006444:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006446:	a903      	add	r1, sp, #12
 8006448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800644c:	f000 fd32 	bl	8006eb4 <HAL_GPIO_Init>

  /* Enable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006450:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006452:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006456:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006458:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800645a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800645e:	9302      	str	r3, [sp, #8]
 8006460:	9b02      	ldr	r3, [sp, #8]

  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8006462:	462a      	mov	r2, r5
 8006464:	2106      	movs	r1, #6
 8006466:	2043      	movs	r0, #67	; 0x43
 8006468:	f000 fcca 	bl	8006e00 <HAL_NVIC_SetPriority>

  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800646c:	2043      	movs	r0, #67	; 0x43
 800646e:	f000 fcff 	bl	8006e70 <HAL_NVIC_EnableIRQ>
}
 8006472:	b009      	add	sp, #36	; 0x24
 8006474:	bd30      	pop	{r4, r5, pc}
 8006476:	bf00      	nop
 8006478:	40021000 	.word	0x40021000

0800647c <HAL_TIM_Base_MspInit>:
  *  - Peripheral's Interrupt Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800647c:	b500      	push	{lr}
 800647e:	b083      	sub	sp, #12
  if (htim->Instance == TIM4) {
 8006480:	6803      	ldr	r3, [r0, #0]
 8006482:	4a17      	ldr	r2, [pc, #92]	; (80064e0 <HAL_TIM_Base_MspInit+0x64>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d005      	beq.n	8006494 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0xF, 0);

    /* Enable the TIMx global Interrupt */
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  #endif /* ALLMEMS1_MOTIONFA */
  } else if (htim->Instance == TIM5) {
 8006488:	4a16      	ldr	r2, [pc, #88]	; (80064e4 <HAL_TIM_Base_MspInit+0x68>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d015      	beq.n	80064ba <HAL_TIM_Base_MspInit+0x3e>

    /* Enable the TIMx global Interrupt */
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  }

}  
 800648e:	b003      	add	sp, #12
 8006490:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006494:	4b14      	ldr	r3, [pc, #80]	; (80064e8 <HAL_TIM_Base_MspInit+0x6c>)
 8006496:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006498:	f042 0204 	orr.w	r2, r2, #4
 800649c:	659a      	str	r2, [r3, #88]	; 0x58
 800649e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a0:	f003 0304 	and.w	r3, r3, #4
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0xF, 0);
 80064a8:	2200      	movs	r2, #0
 80064aa:	210f      	movs	r1, #15
 80064ac:	201e      	movs	r0, #30
 80064ae:	f000 fca7 	bl	8006e00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80064b2:	201e      	movs	r0, #30
 80064b4:	f000 fcdc 	bl	8006e70 <HAL_NVIC_EnableIRQ>
 80064b8:	e7e9      	b.n	800648e <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80064ba:	4b0b      	ldr	r3, [pc, #44]	; (80064e8 <HAL_TIM_Base_MspInit+0x6c>)
 80064bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80064be:	f042 0208 	orr.w	r2, r2, #8
 80064c2:	659a      	str	r2, [r3, #88]	; 0x58
 80064c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c6:	f003 0308 	and.w	r3, r3, #8
 80064ca:	9301      	str	r3, [sp, #4]
 80064cc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0xF, 0);
 80064ce:	2200      	movs	r2, #0
 80064d0:	210f      	movs	r1, #15
 80064d2:	2032      	movs	r0, #50	; 0x32
 80064d4:	f000 fc94 	bl	8006e00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80064d8:	2032      	movs	r0, #50	; 0x32
 80064da:	f000 fcc9 	bl	8006e70 <HAL_NVIC_EnableIRQ>
}  
 80064de:	e7d6      	b.n	800648e <HAL_TIM_Base_MspInit+0x12>
 80064e0:	40000800 	.word	0x40000800
 80064e4:	40000c00 	.word	0x40000c00
 80064e8:	40021000 	.word	0x40021000

080064ec <HAL_TIM_OC_MspInit>:
  *  - Peripheral's Interrupt Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{ 
 80064ec:	b500      	push	{lr}
 80064ee:	b083      	sub	sp, #12
  /* TIM1 Peripheral clock enable */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80064f0:	4b0a      	ldr	r3, [pc, #40]	; (800651c <HAL_TIM_OC_MspInit+0x30>)
 80064f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80064f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064f8:	661a      	str	r2, [r3, #96]	; 0x60
 80064fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006500:	9301      	str	r3, [sp, #4]
 8006502:	9b01      	ldr	r3, [sp, #4]

  /* Enable TIM1 global Interrupt & set priority  */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0x8, 0);
 8006504:	2200      	movs	r2, #0
 8006506:	2108      	movs	r1, #8
 8006508:	201b      	movs	r0, #27
 800650a:	f000 fc79 	bl	8006e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800650e:	201b      	movs	r0, #27
 8006510:	f000 fcae 	bl	8006e70 <HAL_NVIC_EnableIRQ>
}
 8006514:	b003      	add	sp, #12
 8006516:	f85d fb04 	ldr.w	pc, [sp], #4
 800651a:	bf00      	nop
 800651c:	40021000 	.word	0x40021000

08006520 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8006520:	4770      	bx	lr

08006522 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8006522:	e7fe      	b.n	8006522 <HardFault_Handler>

08006524 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8006524:	e7fe      	b.n	8006524 <MemManage_Handler>

08006526 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8006526:	e7fe      	b.n	8006526 <BusFault_Handler>

08006528 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8006528:	e7fe      	b.n	8006528 <UsageFault_Handler>

0800652a <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 800652a:	4770      	bx	lr

0800652c <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 800652c:	4770      	bx	lr

0800652e <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 800652e:	4770      	bx	lr

08006530 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8006530:	b508      	push	{r3, lr}
  HAL_IncTick();
 8006532:	f000 fc41 	bl	8006db8 <HAL_IncTick>
}
 8006536:	bd08      	pop	{r3, pc}

08006538 <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 8006538:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&TimEnvHandle);
 800653a:	4802      	ldr	r0, [pc, #8]	; (8006544 <TIM4_IRQHandler+0xc>)
 800653c:	f003 fa1a 	bl	8009974 <HAL_TIM_IRQHandler>
}
 8006540:	bd08      	pop	{r3, pc}
 8006542:	bf00      	nop
 8006544:	2000039c 	.word	0x2000039c

08006548 <TIM5_IRQHandler>:
  * @retval None
  */
void TIM5_IRQHandler(void)
{  

}
 8006548:	4770      	bx	lr
	...

0800654c <TIM1_CC_IRQHandler>:
  * @brief  This function handles TIM1 Interrupt request
  * @param  None
  * @retval None
  */
void TIM1_CC_IRQHandler(void)
{
 800654c:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&TimCCHandle);
 800654e:	4802      	ldr	r0, [pc, #8]	; (8006558 <TIM1_CC_IRQHandler+0xc>)
 8006550:	f003 fa10 	bl	8009974 <HAL_TIM_IRQHandler>
}
 8006554:	bd08      	pop	{r3, pc}
 8006556:	bf00      	nop
 8006558:	2000034c 	.word	0x2000034c

0800655c <EXTI3_IRQHandler>:
* @brief  This function handles External line 2 interrupt request.
* @param  None
* @retval None
*/
void EXTI3_IRQHandler(void)
{
 800655c:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800655e:	2008      	movs	r0, #8
 8006560:	f000 fe42 	bl	80071e8 <HAL_GPIO_EXTI_IRQHandler>
//  SW_BV_send_Callback();

}
 8006564:	bd08      	pop	{r3, pc}

08006566 <EXTI9_5_IRQHandler>:
  *         interrupt request for BlueNRG.
  * @param  None
  * @retval None
  */
void EXTI9_5_IRQHandler(void)
{
 8006566:	b508      	push	{r3, lr}
  //HAL_GPIO_EXTI_IRQHandler(BNRG_SPI_EXTI_PIN);
  HAL_GPIO_EXTI_IRQHandler(HCI_TL_SPI_EXTI_PIN);
 8006568:	2020      	movs	r0, #32
 800656a:	f000 fe3d 	bl	80071e8 <HAL_GPIO_EXTI_IRQHandler>
}
 800656e:	bd08      	pop	{r3, pc}

08006570 <EXTI2_IRQHandler>:
  * @retval None
  */
void EXTI2_IRQHandler( void )
{
//  HAL_GPIO_EXTI_IRQHandler(BSP_LSM6DSM_INT2);
}
 8006570:	4770      	bx	lr
	...

08006574 <OTG_FS_IRQHandler>:
  * @brief  This function handles USB-On-The-Go FS global interrupt request.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 8006574:	b508      	push	{r3, lr}
  HAL_PCD_IRQHandler(&hpcd);
 8006576:	4802      	ldr	r0, [pc, #8]	; (8006580 <OTG_FS_IRQHandler+0xc>)
 8006578:	f000 ffa0 	bl	80074bc <HAL_PCD_IRQHandler>
}
 800657c:	bd08      	pop	{r3, pc}
 800657e:	bf00      	nop
 8006580:	20002080 	.word	0x20002080

08006584 <TIM8_UP_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM8_IRQHandler(void)
{
 8006584:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&TimHandle);
 8006586:	4802      	ldr	r0, [pc, #8]	; (8006590 <TIM8_UP_IRQHandler+0xc>)
 8006588:	f003 f9f4 	bl	8009974 <HAL_TIM_IRQHandler>
}
 800658c:	bd08      	pop	{r3, pc}
 800658e:	bf00      	nop
 8006590:	20000824 	.word	0x20000824

08006594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006594:	b510      	push	{r4, lr}
 8006596:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006598:	4a0c      	ldr	r2, [pc, #48]	; (80065cc <_sbrk+0x38>)
 800659a:	490d      	ldr	r1, [pc, #52]	; (80065d0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800659c:	480d      	ldr	r0, [pc, #52]	; (80065d4 <_sbrk+0x40>)
 800659e:	6800      	ldr	r0, [r0, #0]
 80065a0:	b140      	cbz	r0, 80065b4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80065a2:	480c      	ldr	r0, [pc, #48]	; (80065d4 <_sbrk+0x40>)
 80065a4:	6800      	ldr	r0, [r0, #0]
 80065a6:	4403      	add	r3, r0
 80065a8:	1a52      	subs	r2, r2, r1
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d806      	bhi.n	80065bc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80065ae:	4a09      	ldr	r2, [pc, #36]	; (80065d4 <_sbrk+0x40>)
 80065b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80065b2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80065b4:	4807      	ldr	r0, [pc, #28]	; (80065d4 <_sbrk+0x40>)
 80065b6:	4c08      	ldr	r4, [pc, #32]	; (80065d8 <_sbrk+0x44>)
 80065b8:	6004      	str	r4, [r0, #0]
 80065ba:	e7f2      	b.n	80065a2 <_sbrk+0xe>
    errno = ENOMEM;
 80065bc:	f007 fa30 	bl	800da20 <__errno>
 80065c0:	230c      	movs	r3, #12
 80065c2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80065c4:	f04f 30ff 	mov.w	r0, #4294967295
 80065c8:	e7f3      	b.n	80065b2 <_sbrk+0x1e>
 80065ca:	bf00      	nop
 80065cc:	20018000 	.word	0x20018000
 80065d0:	00002000 	.word	0x00002000
 80065d4:	20000820 	.word	0x20000820
 80065d8:	20002a8c 	.word	0x20002a8c

080065dc <CDC_Itf_DeInit>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_DeInit(void)
{
  return (USBD_OK);
}
 80065dc:	2000      	movs	r0, #0
 80065de:	4770      	bx	lr

080065e0 <CDC_Itf_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
  switch (cmd)
 80065e0:	2820      	cmp	r0, #32
 80065e2:	d003      	beq.n	80065ec <CDC_Itf_Control+0xc>
 80065e4:	2821      	cmp	r0, #33	; 0x21
 80065e6:	d014      	beq.n	8006612 <CDC_Itf_Control+0x32>
  default:
    break;
  }
  
  return (USBD_OK);
}
 80065e8:	2000      	movs	r0, #0
 80065ea:	4770      	bx	lr
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80065ec:	780b      	ldrb	r3, [r1, #0]
 80065ee:	784a      	ldrb	r2, [r1, #1]
 80065f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 80065f4:	788a      	ldrb	r2, [r1, #2]
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80065f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 80065fa:	78ca      	ldrb	r2, [r1, #3]
 80065fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8006600:	4a0c      	ldr	r2, [pc, #48]	; (8006634 <CDC_Itf_Control+0x54>)
 8006602:	6013      	str	r3, [r2, #0]
    LineCoding.format     = pbuf[4];
 8006604:	790b      	ldrb	r3, [r1, #4]
 8006606:	7113      	strb	r3, [r2, #4]
    LineCoding.paritytype = pbuf[5];
 8006608:	794b      	ldrb	r3, [r1, #5]
 800660a:	7153      	strb	r3, [r2, #5]
    LineCoding.datatype   = pbuf[6];
 800660c:	798b      	ldrb	r3, [r1, #6]
 800660e:	7193      	strb	r3, [r2, #6]
    break;
 8006610:	e7ea      	b.n	80065e8 <CDC_Itf_Control+0x8>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8006612:	4b08      	ldr	r3, [pc, #32]	; (8006634 <CDC_Itf_Control+0x54>)
 8006614:	781a      	ldrb	r2, [r3, #0]
 8006616:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8006618:	785a      	ldrb	r2, [r3, #1]
 800661a:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800661c:	789a      	ldrb	r2, [r3, #2]
 800661e:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8006620:	78da      	ldrb	r2, [r3, #3]
 8006622:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 8006624:	791a      	ldrb	r2, [r3, #4]
 8006626:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 8006628:	795a      	ldrb	r2, [r3, #5]
 800662a:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 800662c:	799b      	ldrb	r3, [r3, #6]
 800662e:	718b      	strb	r3, [r1, #6]
    break;
 8006630:	e7da      	b.n	80065e8 <CDC_Itf_Control+0x8>
 8006632:	bf00      	nop
 8006634:	20000010 	.word	0x20000010

08006638 <CDC_Itf_Receive>:
//  }
//  
//  /* Initiate next USB packet transfer */
//  USBD_CDC_ReceivePacket(&USBD_Device);
  return (USBD_OK);
}
 8006638:	2000      	movs	r0, #0
 800663a:	4770      	bx	lr

0800663c <CDC_TIM_Config>:
  * @brief  CDC_TIM_Config: Configure TIMx timer
  * @param  None.
  * @retval None.
  */
static void CDC_TIM_Config(void)
{  
 800663c:	b508      	push	{r3, lr}
  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 800663e:	4809      	ldr	r0, [pc, #36]	; (8006664 <CDC_TIM_Config+0x28>)
 8006640:	4b09      	ldr	r3, [pc, #36]	; (8006668 <CDC_TIM_Config+0x2c>)
 8006642:	6003      	str	r3, [r0, #0]
       + Period = 10000 - 1
       + Prescaler = ((SystemCoreClock/2)/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  TimHandle.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 8006644:	f241 3387 	movw	r3, #4999	; 0x1387
 8006648:	60c3      	str	r3, [r0, #12]
  TimHandle.Init.Prescaler = 80-1;
 800664a:	234f      	movs	r3, #79	; 0x4f
 800664c:	6043      	str	r3, [r0, #4]
  TimHandle.Init.ClockDivision = 0;
 800664e:	2300      	movs	r3, #0
 8006650:	6103      	str	r3, [r0, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006652:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8006654:	f003 fac0 	bl	8009bd8 <HAL_TIM_Base_Init>
 8006658:	b900      	cbnz	r0, 800665c <CDC_TIM_Config+0x20>
  {
    /* Initialization Error */
    Error_Handler();
  }
}
 800665a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800665c:	f7ff fcc4 	bl	8005fe8 <Error_Handler>
}
 8006660:	e7fb      	b.n	800665a <CDC_TIM_Config+0x1e>
 8006662:	bf00      	nop
 8006664:	20000824 	.word	0x20000824
 8006668:	40013400 	.word	0x40013400

0800666c <CDC_Itf_Init>:
{
 800666c:	b530      	push	{r4, r5, lr}
 800666e:	b083      	sub	sp, #12
  TIMx_CLK_ENABLE();
 8006670:	4b15      	ldr	r3, [pc, #84]	; (80066c8 <CDC_Itf_Init+0x5c>)
 8006672:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006674:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006678:	661a      	str	r2, [r3, #96]	; 0x60
 800667a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800667c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006680:	9301      	str	r3, [sp, #4]
 8006682:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(TIMx_IRQn, 0x6, 0);
 8006684:	2200      	movs	r2, #0
 8006686:	2106      	movs	r1, #6
 8006688:	202c      	movs	r0, #44	; 0x2c
 800668a:	f000 fbb9 	bl	8006e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 800668e:	202c      	movs	r0, #44	; 0x2c
 8006690:	f000 fbee 	bl	8006e70 <HAL_NVIC_EnableIRQ>
  CDC_TIM_Config();
 8006694:	f7ff ffd2 	bl	800663c <CDC_TIM_Config>
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 8006698:	480c      	ldr	r0, [pc, #48]	; (80066cc <CDC_Itf_Init+0x60>)
 800669a:	f003 f909 	bl	80098b0 <HAL_TIM_Base_Start_IT>
 800669e:	b978      	cbnz	r0, 80066c0 <CDC_Itf_Init+0x54>
  USBD_CDC_SetTxBuffer(&USBD_Device, UserTxBuffer, 0);
 80066a0:	4d0a      	ldr	r5, [pc, #40]	; (80066cc <CDC_Itf_Init+0x60>)
 80066a2:	4c0b      	ldr	r4, [pc, #44]	; (80066d0 <CDC_Itf_Init+0x64>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 80066aa:	4620      	mov	r0, r4
 80066ac:	f005 f8c6 	bl	800b83c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&USBD_Device, UserRxBuffer);
 80066b0:	f605 014c 	addw	r1, r5, #2124	; 0x84c
 80066b4:	4620      	mov	r0, r4
 80066b6:	f005 f8cc 	bl	800b852 <USBD_CDC_SetRxBuffer>
}
 80066ba:	2000      	movs	r0, #0
 80066bc:	b003      	add	sp, #12
 80066be:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80066c0:	f7ff fc92 	bl	8005fe8 <Error_Handler>
 80066c4:	e7ec      	b.n	80066a0 <CDC_Itf_Init+0x34>
 80066c6:	bf00      	nop
 80066c8:	40021000 	.word	0x40021000
 80066cc:	20000824 	.word	0x20000824
 80066d0:	200003ec 	.word	0x200003ec

080066d4 <CDC_Fill_Buffer>:
  for (i = 0; i < TotalLen; i++)
 80066d4:	2200      	movs	r2, #0
 80066d6:	428a      	cmp	r2, r1
 80066d8:	d215      	bcs.n	8006706 <CDC_Fill_Buffer+0x32>
{
 80066da:	b530      	push	{r4, r5, lr}
    UserTxBuffer[UserTxBufPtrIn] = Buf[i];
 80066dc:	4d0b      	ldr	r5, [pc, #44]	; (800670c <CDC_Fill_Buffer+0x38>)
 80066de:	f855 3cac 	ldr.w	r3, [r5, #-172]
 80066e2:	f810 e002 	ldrb.w	lr, [r0, r2]
 80066e6:	4c0a      	ldr	r4, [pc, #40]	; (8006710 <CDC_Fill_Buffer+0x3c>)
 80066e8:	eb04 0c03 	add.w	ip, r4, r3
 80066ec:	f88c e04c 	strb.w	lr, [ip, #76]	; 0x4c
    UserTxBufPtrIn = (UserTxBufPtrIn + 1) % APP_RX_DATA_SIZE;
 80066f0:	3301      	adds	r3, #1
 80066f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066f6:	f845 3cac 	str.w	r3, [r5, #-172]
  for (i = 0; i < TotalLen; i++)
 80066fa:	3201      	adds	r2, #1
 80066fc:	b292      	uxth	r2, r2
 80066fe:	428a      	cmp	r2, r1
 8006700:	d3ec      	bcc.n	80066dc <CDC_Fill_Buffer+0x8>
}
 8006702:	2000      	movs	r0, #0
 8006704:	bd30      	pop	{r4, r5, pc}
 8006706:	2000      	movs	r0, #0
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	2000191c 	.word	0x2000191c
 8006710:	20000824 	.word	0x20000824

08006714 <CDC_TIM_PeriodElapsedCallback>:
{
 8006714:	b538      	push	{r3, r4, r5, lr}
  if(UserTxBufPtrOut != UserTxBufPtrIn)
 8006716:	4a12      	ldr	r2, [pc, #72]	; (8006760 <CDC_TIM_PeriodElapsedCallback+0x4c>)
 8006718:	f852 3ca8 	ldr.w	r3, [r2, #-168]
 800671c:	f852 4cac 	ldr.w	r4, [r2, #-172]
 8006720:	42a3      	cmp	r3, r4
 8006722:	d016      	beq.n	8006752 <CDC_TIM_PeriodElapsedCallback+0x3e>
    if(UserTxBufPtrOut > UserTxBufPtrIn) /* Rollback */
 8006724:	d916      	bls.n	8006754 <CDC_TIM_PeriodElapsedCallback+0x40>
      buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 8006726:	f5c3 6400 	rsb	r4, r3, #2048	; 0x800
    USBD_CDC_SetTxBuffer(&USBD_Device, (uint8_t*)&UserTxBuffer[buffptr], buffsize);
 800672a:	4d0e      	ldr	r5, [pc, #56]	; (8006764 <CDC_TIM_PeriodElapsedCallback+0x50>)
 800672c:	4622      	mov	r2, r4
 800672e:	490e      	ldr	r1, [pc, #56]	; (8006768 <CDC_TIM_PeriodElapsedCallback+0x54>)
 8006730:	4419      	add	r1, r3
 8006732:	4628      	mov	r0, r5
 8006734:	f005 f882 	bl	800b83c <USBD_CDC_SetTxBuffer>
    if(USBD_CDC_TransmitPacket(&USBD_Device) == USBD_OK)
 8006738:	4628      	mov	r0, r5
 800673a:	f005 f893 	bl	800b864 <USBD_CDC_TransmitPacket>
 800673e:	b940      	cbnz	r0, 8006752 <CDC_TIM_PeriodElapsedCallback+0x3e>
      UserTxBufPtrOut += buffsize;
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <CDC_TIM_PeriodElapsedCallback+0x4c>)
 8006742:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 8006746:	4422      	add	r2, r4
 8006748:	f843 2ca8 	str.w	r2, [r3, #-168]
      if (UserTxBufPtrOut == APP_RX_DATA_SIZE)
 800674c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006750:	d002      	beq.n	8006758 <CDC_TIM_PeriodElapsedCallback+0x44>
}
 8006752:	bd38      	pop	{r3, r4, r5, pc}
      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 8006754:	1ae4      	subs	r4, r4, r3
 8006756:	e7e8      	b.n	800672a <CDC_TIM_PeriodElapsedCallback+0x16>
        UserTxBufPtrOut = 0;
 8006758:	2200      	movs	r2, #0
 800675a:	f843 2ca8 	str.w	r2, [r3, #-168]
}
 800675e:	e7f8      	b.n	8006752 <CDC_TIM_PeriodElapsedCallback+0x3e>
 8006760:	2000191c 	.word	0x2000191c
 8006764:	200003ec 	.word	0x200003ec
 8006768:	20000870 	.word	0x20000870

0800676c <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800676c:	b508      	push	{r3, lr}
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800676e:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8006772:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006776:	f005 f8d2 	bl	800b91e <USBD_LL_SetupStage>
}
 800677a:	bd08      	pop	{r3, pc}

0800677c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800677c:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800677e:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8006782:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006786:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800678a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800678e:	f005 f8f2 	bl	800b976 <USBD_LL_DataOutStage>
}
 8006792:	bd08      	pop	{r3, pc}

08006794 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006794:	b508      	push	{r3, lr}
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006796:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800679a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800679e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067a0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80067a4:	f005 f923 	bl	800b9ee <USBD_LL_DataInStage>
}
 80067a8:	bd08      	pop	{r3, pc}

080067aa <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80067aa:	b508      	push	{r3, lr}
  USBD_LL_SOF(hpcd->pData);
 80067ac:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80067b0:	f005 f9c3 	bl	800bb3a <USBD_LL_SOF>
}
 80067b4:	bd08      	pop	{r3, pc}

080067b6 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 80067b6:	b510      	push	{r4, lr}
 80067b8:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 80067ba:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80067be:	f005 f975 	bl	800baac <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 80067c2:	2101      	movs	r1, #1
 80067c4:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80067c8:	f005 f99d 	bl	800bb06 <USBD_LL_SetSpeed>
}
 80067cc:	bd10      	pop	{r4, pc}

080067ce <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
 80067ce:	b508      	push	{r3, lr}
  USBD_LL_Suspend(hpcd->pData);
 80067d0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80067d4:	f005 f99a 	bl	800bb0c <USBD_LL_Suspend>
}
 80067d8:	bd08      	pop	{r3, pc}

080067da <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80067da:	b508      	push	{r3, lr}
  USBD_LL_Resume(hpcd->pData);
 80067dc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80067e0:	f005 f99e 	bl	800bb20 <USBD_LL_Resume>
}
 80067e4:	bd08      	pop	{r3, pc}

080067e6 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80067e6:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 80067e8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80067ec:	f005 f9cd 	bl	800bb8a <USBD_LL_IsoOUTIncomplete>
}
 80067f0:	bd08      	pop	{r3, pc}

080067f2 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80067f2:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 80067f4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80067f8:	f005 f9b3 	bl	800bb62 <USBD_LL_IsoINIncomplete>
}
 80067fc:	bd08      	pop	{r3, pc}

080067fe <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80067fe:	b508      	push	{r3, lr}
  USBD_LL_DevConnected(hpcd->pData);
 8006800:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006804:	f005 f9d5 	bl	800bbb2 <USBD_LL_DevConnected>
}
 8006808:	bd08      	pop	{r3, pc}

0800680a <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800680a:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected(hpcd->pData);
 800680c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006810:	f005 f9d1 	bl	800bbb6 <USBD_LL_DevDisconnected>
}
 8006814:	bd08      	pop	{r3, pc}
	...

08006818 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006818:	b570      	push	{r4, r5, r6, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 800681a:	4c15      	ldr	r4, [pc, #84]	; (8006870 <USBD_LL_Init+0x58>)
 800681c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006820:	6023      	str	r3, [r4, #0]
  hpcd.Init.dev_endpoints = 5;
 8006822:	2305      	movs	r3, #5
 8006824:	6063      	str	r3, [r4, #4]
  hpcd.Init.use_dedicated_ep1 = 0;
 8006826:	2500      	movs	r5, #0
 8006828:	6325      	str	r5, [r4, #48]	; 0x30
  hpcd.Init.ep0_mps = 0x40;
 800682a:	2640      	movs	r6, #64	; 0x40
 800682c:	6166      	str	r6, [r4, #20]
  hpcd.Init.dma_enable = 0;
 800682e:	6125      	str	r5, [r4, #16]
  hpcd.Init.low_power_enable = 0;
 8006830:	6225      	str	r5, [r4, #32]
  hpcd.Init.lpm_enable = 0;
 8006832:	6265      	str	r5, [r4, #36]	; 0x24
  hpcd.Init.battery_charging_enable = 0;
 8006834:	62a5      	str	r5, [r4, #40]	; 0x28
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006836:	2302      	movs	r3, #2
 8006838:	61a3      	str	r3, [r4, #24]
  hpcd.Init.Sof_enable = 0;
 800683a:	61e5      	str	r5, [r4, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800683c:	60e3      	str	r3, [r4, #12]
  hpcd.Init.vbus_sensing_enable = 0;
 800683e:	62e5      	str	r5, [r4, #44]	; 0x2c
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 8006840:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
  pdev->pData = &hpcd;
 8006844:	f8c0 42c4 	str.w	r4, [r0, #708]	; 0x2c4
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 8006848:	4620      	mov	r0, r4
 800684a:	f000 fd40 	bl	80072ce <HAL_PCD_Init>
  
  HAL_PCD_SetRxFiFo(&hpcd, 0x80);
 800684e:	2180      	movs	r1, #128	; 0x80
 8006850:	4620      	mov	r0, r4
 8006852:	f001 f9fa 	bl	8007c4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x40);
 8006856:	4632      	mov	r2, r6
 8006858:	4629      	mov	r1, r5
 800685a:	4620      	mov	r0, r4
 800685c:	f001 f9cf 	bl	8007bfe <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0x80);
 8006860:	2280      	movs	r2, #128	; 0x80
 8006862:	2101      	movs	r1, #1
 8006864:	4620      	mov	r0, r4
 8006866:	f001 f9ca 	bl	8007bfe <HAL_PCDEx_SetTxFiFo>

  return USBD_OK;
}
 800686a:	4628      	mov	r0, r5
 800686c:	bd70      	pop	{r4, r5, r6, pc}
 800686e:	bf00      	nop
 8006870:	20002080 	.word	0x20002080

08006874 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006874:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 8006876:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800687a:	f000 fdc6 	bl	800740a <HAL_PCD_Start>
  return USBD_OK;
}
 800687e:	2000      	movs	r0, #0
 8006880:	bd08      	pop	{r3, pc}

08006882 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8006882:	b508      	push	{r3, lr}
 8006884:	4694      	mov	ip, r2
 8006886:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData,
 8006888:	4663      	mov	r3, ip
 800688a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800688e:	f001 f86b 	bl	8007968 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 8006892:	2000      	movs	r0, #0
 8006894:	bd08      	pop	{r3, pc}

08006896 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006896:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006898:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800689c:	f001 f8a9 	bl	80079f2 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 80068a0:	2000      	movs	r0, #0
 80068a2:	bd08      	pop	{r3, pc}

080068a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068a4:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80068a6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80068aa:	f001 f92a 	bl	8007b02 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 80068ae:	2000      	movs	r0, #0
 80068b0:	bd08      	pop	{r3, pc}

080068b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068b2:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80068b4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80068b8:	f001 f966 	bl	8007b88 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 80068bc:	2000      	movs	r0, #0
 80068be:	bd08      	pop	{r3, pc}

080068c0 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80068c0:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  
  if((ep_addr & 0x80) == 0x80)
 80068c4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80068c8:	d108      	bne.n	80068dc <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80068ca:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80068ce:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80068d2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80068d6:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
  }
}
 80068da:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80068dc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80068e0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80068e4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80068e8:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 80068ec:	4770      	bx	lr

080068ee <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80068ee:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80068f0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80068f4:	f001 f824 	bl	8007940 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 80068f8:	2000      	movs	r0, #0
 80068fa:	bd08      	pop	{r3, pc}

080068fc <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint32_t size)
{
 80068fc:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80068fe:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006902:	f001 f8db 	bl	8007abc <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8006906:	2000      	movs	r0, #0
 8006908:	bd08      	pop	{r3, pc}

0800690a <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint32_t size)
{
 800690a:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800690c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006910:	f001 f8a8 	bl	8007a64 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8006914:	2000      	movs	r0, #0
 8006916:	bd08      	pop	{r3, pc}

08006918 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006918:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800691a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800691e:	f001 f8c4 	bl	8007aaa <HAL_PCD_EP_GetRxCount>
}
 8006922:	bd08      	pop	{r3, pc}

08006924 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 8006924:	2312      	movs	r3, #18
 8006926:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc;
}
 8006928:	4800      	ldr	r0, [pc, #0]	; (800692c <USBD_VCP_DeviceDescriptor+0x8>)
 800692a:	4770      	bx	lr
 800692c:	2000002c 	.word	0x2000002c

08006930 <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 8006930:	2304      	movs	r3, #4
 8006932:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 8006934:	4800      	ldr	r0, [pc, #0]	; (8006938 <USBD_VCP_LangIDStrDescriptor+0x8>)
 8006936:	4770      	bx	lr
 8006938:	20000040 	.word	0x20000040

0800693c <IntToUnicode>:
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800693c:	2300      	movs	r3, #0
 800693e:	4293      	cmp	r3, r2
 8006940:	d21e      	bcs.n	8006980 <IntToUnicode+0x44>
{
 8006942:	b500      	push	{lr}
 8006944:	e010      	b.n	8006968 <IntToUnicode+0x2c>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8006946:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 800694a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }
    
    value = value << 4;
 800694e:	0100      	lsls	r0, r0, #4
    
    pbuf[ 2* idx + 1] = 0;
 8006950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006954:	f10c 0c01 	add.w	ip, ip, #1
 8006958:	f04f 0e00 	mov.w	lr, #0
 800695c:	f801 e00c 	strb.w	lr, [r1, ip]
  for( idx = 0 ; idx < len ; idx ++)
 8006960:	3301      	adds	r3, #1
 8006962:	b2db      	uxtb	r3, r3
 8006964:	4293      	cmp	r3, r2
 8006966:	d209      	bcs.n	800697c <IntToUnicode+0x40>
    if( ((value >> 28)) < 0xA )
 8006968:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 800696c:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 8006970:	d2e9      	bcs.n	8006946 <IntToUnicode+0xa>
      pbuf[ 2* idx] = (value >> 28) + '0';
 8006972:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8006976:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800697a:	e7e8      	b.n	800694e <IntToUnicode+0x12>
  }
}
 800697c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006980:	4770      	bx	lr
	...

08006984 <Get_SerialNum>:
{
 8006984:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8006986:	4b0b      	ldr	r3, [pc, #44]	; (80069b4 <Get_SerialNum+0x30>)
 8006988:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	; 0xa10
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800698c:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	; 0xa14
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 8006990:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
  if (deviceserial0 != 0)
 8006994:	18c0      	adds	r0, r0, r3
 8006996:	d100      	bne.n	800699a <Get_SerialNum+0x16>
}
 8006998:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800699a:	4d07      	ldr	r5, [pc, #28]	; (80069b8 <Get_SerialNum+0x34>)
 800699c:	2208      	movs	r2, #8
 800699e:	f105 011a 	add.w	r1, r5, #26
 80069a2:	f7ff ffcb 	bl	800693c <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 80069a6:	2204      	movs	r2, #4
 80069a8:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 80069ac:	4620      	mov	r0, r4
 80069ae:	f7ff ffc5 	bl	800693c <IntToUnicode>
}
 80069b2:	e7f1      	b.n	8006998 <Get_SerialNum+0x14>
 80069b4:	1fff7000 	.word	0x1fff7000
 80069b8:	2000002c 	.word	0x2000002c

080069bc <USBD_VCP_SerialStrDescriptor>:
{
 80069bc:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80069be:	231a      	movs	r3, #26
 80069c0:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 80069c2:	f7ff ffdf 	bl	8006984 <Get_SerialNum>
}
 80069c6:	4801      	ldr	r0, [pc, #4]	; (80069cc <USBD_VCP_SerialStrDescriptor+0x10>)
 80069c8:	bd08      	pop	{r3, pc}
 80069ca:	bf00      	nop
 80069cc:	20000044 	.word	0x20000044

080069d0 <USBD_VCP_ProductStrDescriptor>:
{  
 80069d0:	b510      	push	{r4, lr}
 80069d2:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 80069d4:	4c03      	ldr	r4, [pc, #12]	; (80069e4 <USBD_VCP_ProductStrDescriptor+0x14>)
 80069d6:	4621      	mov	r1, r4
 80069d8:	4803      	ldr	r0, [pc, #12]	; (80069e8 <USBD_VCP_ProductStrDescriptor+0x18>)
 80069da:	f005 fc2c 	bl	800c236 <USBD_GetString>
}
 80069de:	4620      	mov	r0, r4
 80069e0:	bd10      	pop	{r4, pc}
 80069e2:	bf00      	nop
 80069e4:	20002488 	.word	0x20002488
 80069e8:	0800e4f0 	.word	0x0800e4f0

080069ec <USBD_VCP_ManufacturerStrDescriptor>:
{
 80069ec:	b510      	push	{r4, lr}
 80069ee:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80069f0:	4c03      	ldr	r4, [pc, #12]	; (8006a00 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 80069f2:	4621      	mov	r1, r4
 80069f4:	4803      	ldr	r0, [pc, #12]	; (8006a04 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
 80069f6:	f005 fc1e 	bl	800c236 <USBD_GetString>
}
 80069fa:	4620      	mov	r0, r4
 80069fc:	bd10      	pop	{r4, pc}
 80069fe:	bf00      	nop
 8006a00:	20002488 	.word	0x20002488
 8006a04:	0800e514 	.word	0x0800e514

08006a08 <USBD_VCP_ConfigStrDescriptor>:
{ 
 8006a08:	b510      	push	{r4, lr}
 8006a0a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8006a0c:	4c03      	ldr	r4, [pc, #12]	; (8006a1c <USBD_VCP_ConfigStrDescriptor+0x14>)
 8006a0e:	4621      	mov	r1, r4
 8006a10:	4803      	ldr	r0, [pc, #12]	; (8006a20 <USBD_VCP_ConfigStrDescriptor+0x18>)
 8006a12:	f005 fc10 	bl	800c236 <USBD_GetString>
}
 8006a16:	4620      	mov	r0, r4
 8006a18:	bd10      	pop	{r4, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20002488 	.word	0x20002488
 8006a20:	0800e528 	.word	0x0800e528

08006a24 <USBD_VCP_InterfaceStrDescriptor>:
{
 8006a24:	b510      	push	{r4, lr}
 8006a26:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8006a28:	4c03      	ldr	r4, [pc, #12]	; (8006a38 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	4803      	ldr	r0, [pc, #12]	; (8006a3c <USBD_VCP_InterfaceStrDescriptor+0x18>)
 8006a2e:	f005 fc02 	bl	800c236 <USBD_GetString>
}
 8006a32:	4620      	mov	r0, r4
 8006a34:	bd10      	pop	{r4, pc}
 8006a36:	bf00      	nop
 8006a38:	20002488 	.word	0x20002488
 8006a3c:	0800e534 	.word	0x0800e534

08006a40 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
void BSP_LED_Init(Led_TypeDef Led)
{
 8006a40:	b510      	push	{r4, lr}
 8006a42:	b088      	sub	sp, #32
 8006a44:	4604      	mov	r4, r0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable VddIO2 for GPIOG  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a46:	4b1b      	ldr	r3, [pc, #108]	; (8006ab4 <BSP_LED_Init+0x74>)
 8006a48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006a4e:	659a      	str	r2, [r3, #88]	; 0x58
 8006a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	9b00      	ldr	r3, [sp, #0]
  HAL_PWREx_EnableVddIO2();
 8006a5a:	f001 f927 	bl	8007cac <HAL_PWREx_EnableVddIO2>

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8006a5e:	b94c      	cbnz	r4, 8006a74 <BSP_LED_Init+0x34>
 8006a60:	4b14      	ldr	r3, [pc, #80]	; (8006ab4 <BSP_LED_Init+0x74>)
 8006a62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a68:	64da      	str	r2, [r3, #76]	; 0x4c
 8006a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a70:	9301      	str	r3, [sp, #4]
 8006a72:	9b01      	ldr	r3, [sp, #4]
 8006a74:	2c01      	cmp	r4, #1
 8006a76:	d011      	beq.n	8006a9c <BSP_LED_Init+0x5c>
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8006a78:	4b0f      	ldr	r3, [pc, #60]	; (8006ab8 <BSP_LED_Init+0x78>)
 8006a7a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006a7e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a80:	2301      	movs	r3, #1
 8006a82:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a84:	2300      	movs	r3, #0
 8006a86:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8006a88:	2302      	movs	r3, #2
 8006a8a:	9306      	str	r3, [sp, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8006a8c:	a903      	add	r1, sp, #12
 8006a8e:	4b0b      	ldr	r3, [pc, #44]	; (8006abc <BSP_LED_Init+0x7c>)
 8006a90:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006a94:	f000 fa0e 	bl	8006eb4 <HAL_GPIO_Init>
}
 8006a98:	b008      	add	sp, #32
 8006a9a:	bd10      	pop	{r4, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8006a9c:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <BSP_LED_Init+0x74>)
 8006a9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006aa0:	f042 0201 	orr.w	r2, r2, #1
 8006aa4:	64da      	str	r2, [r3, #76]	; 0x4c
 8006aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	9302      	str	r3, [sp, #8]
 8006aae:	9b02      	ldr	r3, [sp, #8]
 8006ab0:	e7e2      	b.n	8006a78 <BSP_LED_Init+0x38>
 8006ab2:	bf00      	nop
 8006ab4:	40021000 	.word	0x40021000
 8006ab8:	0800e1c8 	.word	0x0800e1c8
 8006abc:	2000007c 	.word	0x2000007c

08006ac0 <BSP_LED_Toggle>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8006ac0:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8006ac2:	4b04      	ldr	r3, [pc, #16]	; (8006ad4 <BSP_LED_Toggle+0x14>)
 8006ac4:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
 8006ac8:	4b03      	ldr	r3, [pc, #12]	; (8006ad8 <BSP_LED_Toggle+0x18>)
 8006aca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006ace:	f000 fb81 	bl	80071d4 <HAL_GPIO_TogglePin>
}
 8006ad2:	bd08      	pop	{r3, pc}
 8006ad4:	0800e1c8 	.word	0x0800e1c8
 8006ad8:	2000007c 	.word	0x2000007c

08006adc <SPI2_MspInit>:
  return ret;
}


static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006adc:	b500      	push	{lr}
 8006ade:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006ae0:	4b11      	ldr	r3, [pc, #68]	; (8006b28 <SPI2_MspInit+0x4c>)
 8006ae2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006ae4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ae8:	659a      	str	r2, [r3, #88]	; 0x58
 8006aea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006aec:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006af0:	9201      	str	r2, [sp, #4]
 8006af2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006af4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006af6:	f042 0202 	orr.w	r2, r2, #2
 8006afa:	64da      	str	r2, [r3, #76]	; 0x4c
 8006afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	9302      	str	r3, [sp, #8]
 8006b04:	9b02      	ldr	r3, [sp, #8]

    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8006b06:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8006b0a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b10:	2201      	movs	r2, #1
 8006b12:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b14:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006b16:	2305      	movs	r3, #5
 8006b18:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b1a:	a903      	add	r1, sp, #12
 8006b1c:	4803      	ldr	r0, [pc, #12]	; (8006b2c <SPI2_MspInit+0x50>)
 8006b1e:	f000 f9c9 	bl	8006eb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 8006b22:	b009      	add	sp, #36	; 0x24
 8006b24:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b28:	40021000 	.word	0x40021000
 8006b2c:	48000400 	.word	0x48000400

08006b30 <SPI1_MspInit>:
{
 8006b30:	b500      	push	{lr}
 8006b32:	b089      	sub	sp, #36	; 0x24
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006b34:	4b12      	ldr	r3, [pc, #72]	; (8006b80 <SPI1_MspInit+0x50>)
 8006b36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006b38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b3c:	661a      	str	r2, [r3, #96]	; 0x60
 8006b3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006b40:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006b44:	9201      	str	r2, [sp, #4]
 8006b46:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b4a:	f042 0201 	orr.w	r2, r2, #1
 8006b4e:	64da      	str	r2, [r3, #76]	; 0x4c
 8006b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	9302      	str	r3, [sp, #8]
 8006b58:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8006b5a:	23e0      	movs	r3, #224	; 0xe0
 8006b5c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b5e:	2302      	movs	r3, #2
 8006b60:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b62:	2301      	movs	r3, #1
 8006b64:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b66:	2303      	movs	r3, #3
 8006b68:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006b6a:	2305      	movs	r3, #5
 8006b6c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b6e:	a903      	add	r1, sp, #12
 8006b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b74:	f000 f99e 	bl	8006eb4 <HAL_GPIO_Init>
}
 8006b78:	b009      	add	sp, #36	; 0x24
 8006b7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b7e:	bf00      	nop
 8006b80:	40021000 	.word	0x40021000

08006b84 <BSP_SPI2_Send>:
{
 8006b84:	b510      	push	{r4, lr}
 8006b86:	460c      	mov	r4, r1
  if(HAL_SPI_Transmit(&hbusspi2, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8006b88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b8c:	460a      	mov	r2, r1
 8006b8e:	4601      	mov	r1, r0
 8006b90:	4804      	ldr	r0, [pc, #16]	; (8006ba4 <BSP_SPI2_Send+0x20>)
 8006b92:	f002 fa37 	bl	8009004 <HAL_SPI_Transmit>
 8006b96:	b908      	cbnz	r0, 8006b9c <BSP_SPI2_Send+0x18>
      ret = len;
 8006b98:	4620      	mov	r0, r4
}
 8006b9a:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006b9c:	f06f 0005 	mvn.w	r0, #5
  return ret;
 8006ba0:	e7fb      	b.n	8006b9a <BSP_SPI2_Send+0x16>
 8006ba2:	bf00      	nop
 8006ba4:	20002588 	.word	0x20002588

08006ba8 <BSP_SPI1_SendRecv>:
{
 8006ba8:	b510      	push	{r4, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	4614      	mov	r4, r2
  if(HAL_SPI_TransmitReceive(&hbusspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8006bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	460a      	mov	r2, r1
 8006bb8:	4601      	mov	r1, r0
 8006bba:	4805      	ldr	r0, [pc, #20]	; (8006bd0 <BSP_SPI1_SendRecv+0x28>)
 8006bbc:	f002 fb3c 	bl	8009238 <HAL_SPI_TransmitReceive>
 8006bc0:	b910      	cbnz	r0, 8006bc8 <BSP_SPI1_SendRecv+0x20>
      ret = len;
 8006bc2:	4620      	mov	r0, r4
}
 8006bc4:	b002      	add	sp, #8
 8006bc6:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006bc8:	f06f 0005 	mvn.w	r0, #5
  return ret;
 8006bcc:	e7fa      	b.n	8006bc4 <BSP_SPI1_SendRecv+0x1c>
 8006bce:	bf00      	nop
 8006bd0:	200025ec 	.word	0x200025ec

08006bd4 <BSP_GetTick>:
int32_t BSP_GetTick(void) {
 8006bd4:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8006bd6:	f000 f8fb 	bl	8006dd0 <HAL_GetTick>
}
 8006bda:	bd08      	pop	{r3, pc}

08006bdc <MX_SPI1_Init>:
{
 8006bdc:	b508      	push	{r3, lr}
  hspi->Instance = SPI1;
 8006bde:	4a0f      	ldr	r2, [pc, #60]	; (8006c1c <MX_SPI1_Init+0x40>)
 8006be0:	6002      	str	r2, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8006be2:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006be6:	6042      	str	r2, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8006be8:	2200      	movs	r2, #0
 8006bea:	6082      	str	r2, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8006bec:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006bf0:	60c1      	str	r1, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bf2:	6102      	str	r2, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8006bf4:	6142      	str	r2, [r0, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8006bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006bfa:	6181      	str	r1, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006bfc:	2118      	movs	r1, #24
 8006bfe:	61c1      	str	r1, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006c00:	6202      	str	r2, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8006c02:	6242      	str	r2, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c04:	6282      	str	r2, [r0, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8006c06:	2107      	movs	r1, #7
 8006c08:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006c0a:	6302      	str	r2, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006c0c:	2208      	movs	r2, #8
 8006c0e:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8006c10:	f002 f96a 	bl	8008ee8 <HAL_SPI_Init>
 8006c14:	b100      	cbz	r0, 8006c18 <MX_SPI1_Init+0x3c>
    ret = HAL_ERROR;
 8006c16:	2001      	movs	r0, #1
}
 8006c18:	bd08      	pop	{r3, pc}
 8006c1a:	bf00      	nop
 8006c1c:	40013000 	.word	0x40013000

08006c20 <BSP_SPI1_Init>:
int32_t BSP_SPI1_Init(void) {
 8006c20:	b510      	push	{r4, lr}
  hbusspi1.Instance  = SPI1;
 8006c22:	480a      	ldr	r0, [pc, #40]	; (8006c4c <BSP_SPI1_Init+0x2c>)
 8006c24:	4b0a      	ldr	r3, [pc, #40]	; (8006c50 <BSP_SPI1_Init+0x30>)
 8006c26:	f840 3f64 	str.w	r3, [r0, #100]!
  if (HAL_SPI_GetState(&hbusspi1) == HAL_SPI_STATE_RESET) 
 8006c2a:	f002 fd0a 	bl	8009642 <HAL_SPI_GetState>
 8006c2e:	b108      	cbz	r0, 8006c34 <BSP_SPI1_Init+0x14>
  int32_t ret = BSP_ERROR_NONE;
 8006c30:	2000      	movs	r0, #0
}
 8006c32:	bd10      	pop	{r4, pc}
    SPI1_MspInit(&hbusspi1);
 8006c34:	4c07      	ldr	r4, [pc, #28]	; (8006c54 <BSP_SPI1_Init+0x34>)
 8006c36:	4620      	mov	r0, r4
 8006c38:	f7ff ff7a 	bl	8006b30 <SPI1_MspInit>
    if (MX_SPI1_Init(&hbusspi1) != HAL_OK)
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f7ff ffcd 	bl	8006bdc <MX_SPI1_Init>
 8006c42:	2800      	cmp	r0, #0
 8006c44:	d0f5      	beq.n	8006c32 <BSP_SPI1_Init+0x12>
      ret = BSP_ERROR_BUS_FAILURE;
 8006c46:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8006c4a:	e7f2      	b.n	8006c32 <BSP_SPI1_Init+0x12>
 8006c4c:	20002588 	.word	0x20002588
 8006c50:	40013000 	.word	0x40013000
 8006c54:	200025ec 	.word	0x200025ec

08006c58 <MX_SPI2_Init>:
{
 8006c58:	b538      	push	{r3, r4, r5, lr}
 8006c5a:	4604      	mov	r4, r0
  hspi->Instance = SPI2;
 8006c5c:	4b19      	ldr	r3, [pc, #100]	; (8006cc4 <MX_SPI2_Init+0x6c>)
 8006c5e:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8006c60:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006c64:	6043      	str	r3, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_1LINE;
 8006c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c6a:	6083      	str	r3, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8006c6c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8006c70:	60c3      	str	r3, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006c72:	2302      	movs	r3, #2
 8006c74:	6103      	str	r3, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8006c76:	2301      	movs	r3, #1
 8006c78:	6143      	str	r3, [r0, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8006c7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c7e:	6183      	str	r3, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8006c80:	2330      	movs	r3, #48	; 0x30
 8006c82:	61c3      	str	r3, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006c84:	2300      	movs	r3, #0
 8006c86:	6203      	str	r3, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8006c88:	6243      	str	r3, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c8a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8006c8c:	2207      	movs	r2, #7
 8006c8e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006c90:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006c92:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8006c94:	f002 f928 	bl	8008ee8 <HAL_SPI_Init>
 8006c98:	4605      	mov	r5, r0
 8006c9a:	b100      	cbz	r0, 8006c9e <MX_SPI2_Init+0x46>
    ret = HAL_ERROR;
 8006c9c:	2501      	movs	r5, #1
  HAL_Delay(5);
 8006c9e:	2005      	movs	r0, #5
 8006ca0:	f7ff f96c 	bl	8005f7c <HAL_Delay>
  SPI_1LINE_TX(hspi);
 8006ca4:	6822      	ldr	r2, [r4, #0]
 8006ca6:	6813      	ldr	r3, [r2, #0]
 8006ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cac:	6013      	str	r3, [r2, #0]
  HAL_Delay(5);
 8006cae:	2005      	movs	r0, #5
 8006cb0:	f7ff f964 	bl	8005f7c <HAL_Delay>
  __HAL_SPI_ENABLE(hspi);
 8006cb4:	6822      	ldr	r2, [r4, #0]
 8006cb6:	6813      	ldr	r3, [r2, #0]
 8006cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cbc:	6013      	str	r3, [r2, #0]
}
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	bd38      	pop	{r3, r4, r5, pc}
 8006cc2:	bf00      	nop
 8006cc4:	40003800 	.word	0x40003800

08006cc8 <BSP_SPI2_Init>:
int32_t BSP_SPI2_Init(void) {
 8006cc8:	b510      	push	{r4, lr}
  hbusspi2.Instance  = SPI2;
 8006cca:	480a      	ldr	r0, [pc, #40]	; (8006cf4 <BSP_SPI2_Init+0x2c>)
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	; (8006cf8 <BSP_SPI2_Init+0x30>)
 8006cce:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_GetState(&hbusspi2) == HAL_SPI_STATE_RESET)
 8006cd0:	f002 fcb7 	bl	8009642 <HAL_SPI_GetState>
 8006cd4:	b108      	cbz	r0, 8006cda <BSP_SPI2_Init+0x12>
  int32_t ret = BSP_ERROR_NONE;
 8006cd6:	2000      	movs	r0, #0
}
 8006cd8:	bd10      	pop	{r4, pc}
    SPI2_MspInit(&hbusspi2);
 8006cda:	4c06      	ldr	r4, [pc, #24]	; (8006cf4 <BSP_SPI2_Init+0x2c>)
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f7ff fefd 	bl	8006adc <SPI2_MspInit>
    if (MX_SPI2_Init(&hbusspi2) != HAL_OK)
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f7ff ffb8 	bl	8006c58 <MX_SPI2_Init>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d0f5      	beq.n	8006cd8 <BSP_SPI2_Init+0x10>
      ret = BSP_ERROR_BUS_FAILURE;
 8006cec:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8006cf0:	e7f2      	b.n	8006cd8 <BSP_SPI2_Init+0x10>
 8006cf2:	bf00      	nop
 8006cf4:	20002588 	.word	0x20002588
 8006cf8:	40003800 	.word	0x40003800

08006cfc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006cfc:	490f      	ldr	r1, [pc, #60]	; (8006d3c <SystemInit+0x40>)
 8006cfe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006d02:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006d0a:	4b0d      	ldr	r3, [pc, #52]	; (8006d40 <SystemInit+0x44>)
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	f042 0201 	orr.w	r2, r2, #1
 8006d12:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006d14:	2000      	movs	r0, #0
 8006d16:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8006d1e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8006d22:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8006d24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d28:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d30:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006d32:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006d34:	4b03      	ldr	r3, [pc, #12]	; (8006d44 <SystemInit+0x48>)
 8006d36:	608b      	str	r3, [r1, #8]
#endif
}
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	e000ed00 	.word	0xe000ed00
 8006d40:	40021000 	.word	0x40021000
 8006d44:	08004000 	.word	0x08004000

08006d48 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8006d48:	4770      	bx	lr
	...

08006d4c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006d4c:	4b10      	ldr	r3, [pc, #64]	; (8006d90 <HAL_InitTick+0x44>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	b90b      	cbnz	r3, 8006d56 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8006d52:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8006d54:	4770      	bx	lr
{
 8006d56:	b510      	push	{r4, lr}
 8006d58:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006d5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d62:	4a0c      	ldr	r2, [pc, #48]	; (8006d94 <HAL_InitTick+0x48>)
 8006d64:	6810      	ldr	r0, [r2, #0]
 8006d66:	fbb0 f0f3 	udiv	r0, r0, r3
 8006d6a:	f000 f88f 	bl	8006e8c <HAL_SYSTICK_Config>
 8006d6e:	b968      	cbnz	r0, 8006d8c <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d70:	2c0f      	cmp	r4, #15
 8006d72:	d901      	bls.n	8006d78 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8006d74:	2001      	movs	r0, #1
 8006d76:	e00a      	b.n	8006d8e <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d78:	2200      	movs	r2, #0
 8006d7a:	4621      	mov	r1, r4
 8006d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d80:	f000 f83e 	bl	8006e00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006d84:	4b02      	ldr	r3, [pc, #8]	; (8006d90 <HAL_InitTick+0x44>)
 8006d86:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006d88:	2000      	movs	r0, #0
 8006d8a:	e000      	b.n	8006d8e <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8006d8c:	2001      	movs	r0, #1
}
 8006d8e:	bd10      	pop	{r4, pc}
 8006d90:	20000088 	.word	0x20000088
 8006d94:	20000084 	.word	0x20000084

08006d98 <HAL_Init>:
{
 8006d98:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d9a:	2003      	movs	r0, #3
 8006d9c:	f000 f81e 	bl	8006ddc <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006da0:	200f      	movs	r0, #15
 8006da2:	f7ff ffd3 	bl	8006d4c <HAL_InitTick>
 8006da6:	b110      	cbz	r0, 8006dae <HAL_Init+0x16>
    status = HAL_ERROR;
 8006da8:	2401      	movs	r4, #1
}
 8006daa:	4620      	mov	r0, r4
 8006dac:	bd10      	pop	{r4, pc}
 8006dae:	4604      	mov	r4, r0
    HAL_MspInit();
 8006db0:	f7ff ffca 	bl	8006d48 <HAL_MspInit>
 8006db4:	e7f9      	b.n	8006daa <HAL_Init+0x12>
	...

08006db8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006db8:	4b03      	ldr	r3, [pc, #12]	; (8006dc8 <HAL_IncTick+0x10>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	4a03      	ldr	r2, [pc, #12]	; (8006dcc <HAL_IncTick+0x14>)
 8006dbe:	6811      	ldr	r1, [r2, #0]
 8006dc0:	440b      	add	r3, r1
 8006dc2:	6013      	str	r3, [r2, #0]
}
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	20000088 	.word	0x20000088
 8006dcc:	20002650 	.word	0x20002650

08006dd0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006dd0:	4b01      	ldr	r3, [pc, #4]	; (8006dd8 <HAL_GetTick+0x8>)
 8006dd2:	6818      	ldr	r0, [r3, #0]
}
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	20002650 	.word	0x20002650

08006ddc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ddc:	4a07      	ldr	r2, [pc, #28]	; (8006dfc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8006dde:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006de0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006de4:	041b      	lsls	r3, r3, #16
 8006de6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006de8:	0200      	lsls	r0, r0, #8
 8006dea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006dee:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8006df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006df8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006dfa:	4770      	bx	lr
 8006dfc:	e000ed00 	.word	0xe000ed00

08006e00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e00:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e02:	4b19      	ldr	r3, [pc, #100]	; (8006e68 <HAL_NVIC_SetPriority+0x68>)
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e0a:	f1c3 0c07 	rsb	ip, r3, #7
 8006e0e:	f1bc 0f04 	cmp.w	ip, #4
 8006e12:	bf28      	it	cs
 8006e14:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e18:	f103 0e04 	add.w	lr, r3, #4
 8006e1c:	f1be 0f06 	cmp.w	lr, #6
 8006e20:	d918      	bls.n	8006e54 <HAL_NVIC_SetPriority+0x54>
 8006e22:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e24:	f04f 3eff 	mov.w	lr, #4294967295
 8006e28:	fa0e fc0c 	lsl.w	ip, lr, ip
 8006e2c:	ea21 010c 	bic.w	r1, r1, ip
 8006e30:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e32:	fa0e fe03 	lsl.w	lr, lr, r3
 8006e36:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e3a:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	db0b      	blt.n	8006e58 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e40:	0112      	lsls	r2, r2, #4
 8006e42:	b2d2      	uxtb	r2, r2
 8006e44:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006e48:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006e4c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006e50:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e54:	2300      	movs	r3, #0
 8006e56:	e7e5      	b.n	8006e24 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e58:	f000 000f 	and.w	r0, r0, #15
 8006e5c:	0112      	lsls	r2, r2, #4
 8006e5e:	b2d2      	uxtb	r2, r2
 8006e60:	4b02      	ldr	r3, [pc, #8]	; (8006e6c <HAL_NVIC_SetPriority+0x6c>)
 8006e62:	541a      	strb	r2, [r3, r0]
 8006e64:	e7f4      	b.n	8006e50 <HAL_NVIC_SetPriority+0x50>
 8006e66:	bf00      	nop
 8006e68:	e000ed00 	.word	0xe000ed00
 8006e6c:	e000ed14 	.word	0xe000ed14

08006e70 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006e70:	2800      	cmp	r0, #0
 8006e72:	db07      	blt.n	8006e84 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e74:	f000 021f 	and.w	r2, r0, #31
 8006e78:	0940      	lsrs	r0, r0, #5
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	4093      	lsls	r3, r2
 8006e7e:	4a02      	ldr	r2, [pc, #8]	; (8006e88 <HAL_NVIC_EnableIRQ+0x18>)
 8006e80:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	e000e100 	.word	0xe000e100

08006e8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e8c:	3801      	subs	r0, #1
 8006e8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006e92:	d20b      	bcs.n	8006eac <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e94:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006e98:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e9a:	4a05      	ldr	r2, [pc, #20]	; (8006eb0 <HAL_SYSTICK_Config+0x24>)
 8006e9c:	21f0      	movs	r1, #240	; 0xf0
 8006e9e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ea6:	2207      	movs	r2, #7
 8006ea8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006eaa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006eac:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8006eae:	4770      	bx	lr
 8006eb0:	e000ed00 	.word	0xe000ed00

08006eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eb6:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8006eb8:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006eba:	e03f      	b.n	8006f3c <HAL_GPIO_Init+0x88>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006ebc:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006ebe:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8006ec2:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 8006ec6:	409c      	lsls	r4, r3
 8006ec8:	432c      	orrs	r4, r5
        GPIOx->ASCR = temp;
 8006eca:	62c4      	str	r4, [r0, #44]	; 0x2c
 8006ecc:	e062      	b.n	8006f94 <HAL_GPIO_Init+0xe0>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006ece:	2406      	movs	r4, #6
 8006ed0:	e000      	b.n	8006ed4 <HAL_GPIO_Init+0x20>
 8006ed2:	2400      	movs	r4, #0
 8006ed4:	40b4      	lsls	r4, r6
 8006ed6:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006ed8:	3502      	adds	r5, #2
 8006eda:	4e68      	ldr	r6, [pc, #416]	; (800707c <HAL_GPIO_Init+0x1c8>)
 8006edc:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006ee0:	4c67      	ldr	r4, [pc, #412]	; (8007080 <HAL_GPIO_Init+0x1cc>)
 8006ee2:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8006ee4:	43d4      	mvns	r4, r2
 8006ee6:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006eea:	684f      	ldr	r7, [r1, #4]
 8006eec:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8006ef0:	d001      	beq.n	8006ef6 <HAL_GPIO_Init+0x42>
        {
          temp |= iocurrent;
 8006ef2:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8006ef6:	4d62      	ldr	r5, [pc, #392]	; (8007080 <HAL_GPIO_Init+0x1cc>)
 8006ef8:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8006efa:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8006efc:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006f00:	684f      	ldr	r7, [r1, #4]
 8006f02:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8006f06:	d001      	beq.n	8006f0c <HAL_GPIO_Init+0x58>
        {
          temp |= iocurrent;
 8006f08:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8006f0c:	4d5c      	ldr	r5, [pc, #368]	; (8007080 <HAL_GPIO_Init+0x1cc>)
 8006f0e:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f10:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8006f12:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006f16:	684f      	ldr	r7, [r1, #4]
 8006f18:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8006f1c:	d001      	beq.n	8006f22 <HAL_GPIO_Init+0x6e>
        {
          temp |= iocurrent;
 8006f1e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8006f22:	4d57      	ldr	r5, [pc, #348]	; (8007080 <HAL_GPIO_Init+0x1cc>)
 8006f24:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8006f26:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8006f28:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006f2a:	684e      	ldr	r6, [r1, #4]
 8006f2c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8006f30:	d001      	beq.n	8006f36 <HAL_GPIO_Init+0x82>
        {
          temp |= iocurrent;
 8006f32:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8006f36:	4a52      	ldr	r2, [pc, #328]	; (8007080 <HAL_GPIO_Init+0x1cc>)
 8006f38:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8006f3a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f3c:	680a      	ldr	r2, [r1, #0]
 8006f3e:	fa32 f403 	lsrs.w	r4, r2, r3
 8006f42:	f000 8098 	beq.w	8007076 <HAL_GPIO_Init+0x1c2>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006f46:	f04f 0c01 	mov.w	ip, #1
 8006f4a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8006f4e:	ea1c 0202 	ands.w	r2, ip, r2
 8006f52:	d0f2      	beq.n	8006f3a <HAL_GPIO_Init+0x86>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006f54:	684c      	ldr	r4, [r1, #4]
 8006f56:	1e65      	subs	r5, r4, #1
 8006f58:	2d01      	cmp	r5, #1
 8006f5a:	d903      	bls.n	8006f64 <HAL_GPIO_Init+0xb0>
 8006f5c:	2c11      	cmp	r4, #17
 8006f5e:	d001      	beq.n	8006f64 <HAL_GPIO_Init+0xb0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f60:	2c12      	cmp	r4, #18
 8006f62:	d112      	bne.n	8006f8a <HAL_GPIO_Init+0xd6>
        temp = GPIOx->OSPEEDR;
 8006f64:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006f66:	005e      	lsls	r6, r3, #1
 8006f68:	2403      	movs	r4, #3
 8006f6a:	40b4      	lsls	r4, r6
 8006f6c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006f70:	68cc      	ldr	r4, [r1, #12]
 8006f72:	40b4      	lsls	r4, r6
 8006f74:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8006f76:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8006f78:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f7a:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006f7e:	684c      	ldr	r4, [r1, #4]
 8006f80:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8006f84:	409c      	lsls	r4, r3
 8006f86:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8006f88:	6044      	str	r4, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006f8a:	684c      	ldr	r4, [r1, #4]
 8006f8c:	f004 0503 	and.w	r5, r4, #3
 8006f90:	2d03      	cmp	r5, #3
 8006f92:	d093      	beq.n	8006ebc <HAL_GPIO_Init+0x8>
      temp = GPIOx->PUPDR;
 8006f94:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006f96:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8006f9a:	2403      	movs	r4, #3
 8006f9c:	fa04 f40e 	lsl.w	r4, r4, lr
 8006fa0:	ea6f 0c04 	mvn.w	ip, r4
 8006fa4:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006fa8:	688c      	ldr	r4, [r1, #8]
 8006faa:	fa04 f40e 	lsl.w	r4, r4, lr
 8006fae:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8006fb0:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006fb2:	684c      	ldr	r4, [r1, #4]
 8006fb4:	2c02      	cmp	r4, #2
 8006fb6:	d001      	beq.n	8006fbc <HAL_GPIO_Init+0x108>
 8006fb8:	2c12      	cmp	r4, #18
 8006fba:	d10f      	bne.n	8006fdc <HAL_GPIO_Init+0x128>
        temp = GPIOx->AFR[position >> 3u];
 8006fbc:	08dd      	lsrs	r5, r3, #3
 8006fbe:	3508      	adds	r5, #8
 8006fc0:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006fc4:	f003 0607 	and.w	r6, r3, #7
 8006fc8:	00b6      	lsls	r6, r6, #2
 8006fca:	240f      	movs	r4, #15
 8006fcc:	40b4      	lsls	r4, r6
 8006fce:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006fd2:	690c      	ldr	r4, [r1, #16]
 8006fd4:	40b4      	lsls	r4, r6
 8006fd6:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 8006fd8:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8006fdc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006fde:	ea0c 0c04 	and.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006fe2:	684c      	ldr	r4, [r1, #4]
 8006fe4:	f004 0403 	and.w	r4, r4, #3
 8006fe8:	fa04 f40e 	lsl.w	r4, r4, lr
 8006fec:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8006ff0:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006ff2:	684c      	ldr	r4, [r1, #4]
 8006ff4:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8006ff8:	d09f      	beq.n	8006f3a <HAL_GPIO_Init+0x86>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ffa:	4c22      	ldr	r4, [pc, #136]	; (8007084 <HAL_GPIO_Init+0x1d0>)
 8006ffc:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8006ffe:	f045 0501 	orr.w	r5, r5, #1
 8007002:	6625      	str	r5, [r4, #96]	; 0x60
 8007004:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8007006:	f004 0401 	and.w	r4, r4, #1
 800700a:	9401      	str	r4, [sp, #4]
 800700c:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800700e:	089d      	lsrs	r5, r3, #2
 8007010:	1cae      	adds	r6, r5, #2
 8007012:	4c1a      	ldr	r4, [pc, #104]	; (800707c <HAL_GPIO_Init+0x1c8>)
 8007014:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007018:	f003 0603 	and.w	r6, r3, #3
 800701c:	00b6      	lsls	r6, r6, #2
 800701e:	240f      	movs	r4, #15
 8007020:	40b4      	lsls	r4, r6
 8007022:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007026:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800702a:	f43f af52 	beq.w	8006ed2 <HAL_GPIO_Init+0x1e>
 800702e:	4c16      	ldr	r4, [pc, #88]	; (8007088 <HAL_GPIO_Init+0x1d4>)
 8007030:	42a0      	cmp	r0, r4
 8007032:	d016      	beq.n	8007062 <HAL_GPIO_Init+0x1ae>
 8007034:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007038:	42a0      	cmp	r0, r4
 800703a:	d014      	beq.n	8007066 <HAL_GPIO_Init+0x1b2>
 800703c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007040:	42a0      	cmp	r0, r4
 8007042:	d012      	beq.n	800706a <HAL_GPIO_Init+0x1b6>
 8007044:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007048:	42a0      	cmp	r0, r4
 800704a:	d010      	beq.n	800706e <HAL_GPIO_Init+0x1ba>
 800704c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007050:	42a0      	cmp	r0, r4
 8007052:	d00e      	beq.n	8007072 <HAL_GPIO_Init+0x1be>
 8007054:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007058:	42a0      	cmp	r0, r4
 800705a:	f43f af38 	beq.w	8006ece <HAL_GPIO_Init+0x1a>
 800705e:	2407      	movs	r4, #7
 8007060:	e738      	b.n	8006ed4 <HAL_GPIO_Init+0x20>
 8007062:	2401      	movs	r4, #1
 8007064:	e736      	b.n	8006ed4 <HAL_GPIO_Init+0x20>
 8007066:	2402      	movs	r4, #2
 8007068:	e734      	b.n	8006ed4 <HAL_GPIO_Init+0x20>
 800706a:	2403      	movs	r4, #3
 800706c:	e732      	b.n	8006ed4 <HAL_GPIO_Init+0x20>
 800706e:	2404      	movs	r4, #4
 8007070:	e730      	b.n	8006ed4 <HAL_GPIO_Init+0x20>
 8007072:	2405      	movs	r4, #5
 8007074:	e72e      	b.n	8006ed4 <HAL_GPIO_Init+0x20>
  }
}
 8007076:	b003      	add	sp, #12
 8007078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800707a:	bf00      	nop
 800707c:	40010000 	.word	0x40010000
 8007080:	40010400 	.word	0x40010400
 8007084:	40021000 	.word	0x40021000
 8007088:	48000400 	.word	0x48000400

0800708c <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 800708c:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800708e:	fa31 f203 	lsrs.w	r2, r1, r3
 8007092:	f000 808b 	beq.w	80071ac <HAL_GPIO_DeInit+0x120>
{
 8007096:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007098:	e032      	b.n	8007100 <HAL_GPIO_DeInit+0x74>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800709a:	2506      	movs	r5, #6
 800709c:	e000      	b.n	80070a0 <HAL_GPIO_DeInit+0x14>
 800709e:	2500      	movs	r5, #0
 80070a0:	fa05 f50c 	lsl.w	r5, r5, ip
 80070a4:	42a5      	cmp	r5, r4
 80070a6:	d065      	beq.n	8007174 <HAL_GPIO_DeInit+0xe8>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80070a8:	6804      	ldr	r4, [r0, #0]
 80070aa:	005d      	lsls	r5, r3, #1
 80070ac:	f04f 0c03 	mov.w	ip, #3
 80070b0:	fa0c fc05 	lsl.w	ip, ip, r5
 80070b4:	ea44 040c 	orr.w	r4, r4, ip
 80070b8:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80070ba:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80070be:	f10e 0e08 	add.w	lr, lr, #8
 80070c2:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80070c6:	f003 0607 	and.w	r6, r3, #7
 80070ca:	00b6      	lsls	r6, r6, #2
 80070cc:	250f      	movs	r5, #15
 80070ce:	40b5      	lsls	r5, r6
 80070d0:	ea24 0405 	bic.w	r4, r4, r5
 80070d4:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80070d8:	6884      	ldr	r4, [r0, #8]
 80070da:	ea24 040c 	bic.w	r4, r4, ip
 80070de:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80070e0:	6844      	ldr	r4, [r0, #4]
 80070e2:	ea24 0402 	bic.w	r4, r4, r2
 80070e6:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80070e8:	68c4      	ldr	r4, [r0, #12]
 80070ea:	ea24 040c 	bic.w	r4, r4, ip
 80070ee:	60c4      	str	r4, [r0, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80070f0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80070f2:	ea24 0202 	bic.w	r2, r4, r2
 80070f6:	62c2      	str	r2, [r0, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80070f8:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 80070fa:	fa31 f203 	lsrs.w	r2, r1, r3
 80070fe:	d054      	beq.n	80071aa <HAL_GPIO_DeInit+0x11e>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007100:	2201      	movs	r2, #1
 8007102:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8007104:	ea12 0701 	ands.w	r7, r2, r1
 8007108:	d0f6      	beq.n	80070f8 <HAL_GPIO_DeInit+0x6c>
      tmp = SYSCFG->EXTICR[position >> 2u];
 800710a:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 800710e:	f10e 0502 	add.w	r5, lr, #2
 8007112:	4c27      	ldr	r4, [pc, #156]	; (80071b0 <HAL_GPIO_DeInit+0x124>)
 8007114:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007118:	f003 0c03 	and.w	ip, r3, #3
 800711c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007120:	250f      	movs	r5, #15
 8007122:	fa05 f60c 	lsl.w	r6, r5, ip
 8007126:	4034      	ands	r4, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007128:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800712c:	d0b7      	beq.n	800709e <HAL_GPIO_DeInit+0x12>
 800712e:	4d21      	ldr	r5, [pc, #132]	; (80071b4 <HAL_GPIO_DeInit+0x128>)
 8007130:	42a8      	cmp	r0, r5
 8007132:	d015      	beq.n	8007160 <HAL_GPIO_DeInit+0xd4>
 8007134:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007138:	42a8      	cmp	r0, r5
 800713a:	d013      	beq.n	8007164 <HAL_GPIO_DeInit+0xd8>
 800713c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007140:	42a8      	cmp	r0, r5
 8007142:	d011      	beq.n	8007168 <HAL_GPIO_DeInit+0xdc>
 8007144:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007148:	42a8      	cmp	r0, r5
 800714a:	d00f      	beq.n	800716c <HAL_GPIO_DeInit+0xe0>
 800714c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007150:	42a8      	cmp	r0, r5
 8007152:	d00d      	beq.n	8007170 <HAL_GPIO_DeInit+0xe4>
 8007154:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007158:	42a8      	cmp	r0, r5
 800715a:	d09e      	beq.n	800709a <HAL_GPIO_DeInit+0xe>
 800715c:	2507      	movs	r5, #7
 800715e:	e79f      	b.n	80070a0 <HAL_GPIO_DeInit+0x14>
 8007160:	2501      	movs	r5, #1
 8007162:	e79d      	b.n	80070a0 <HAL_GPIO_DeInit+0x14>
 8007164:	2502      	movs	r5, #2
 8007166:	e79b      	b.n	80070a0 <HAL_GPIO_DeInit+0x14>
 8007168:	2503      	movs	r5, #3
 800716a:	e799      	b.n	80070a0 <HAL_GPIO_DeInit+0x14>
 800716c:	2504      	movs	r5, #4
 800716e:	e797      	b.n	80070a0 <HAL_GPIO_DeInit+0x14>
 8007170:	2505      	movs	r5, #5
 8007172:	e795      	b.n	80070a0 <HAL_GPIO_DeInit+0x14>
        EXTI->IMR1 &= ~(iocurrent);
 8007174:	4c10      	ldr	r4, [pc, #64]	; (80071b8 <HAL_GPIO_DeInit+0x12c>)
 8007176:	6825      	ldr	r5, [r4, #0]
 8007178:	ea25 0507 	bic.w	r5, r5, r7
 800717c:	6025      	str	r5, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800717e:	6865      	ldr	r5, [r4, #4]
 8007180:	ea25 0507 	bic.w	r5, r5, r7
 8007184:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007186:	68a5      	ldr	r5, [r4, #8]
 8007188:	ea25 0507 	bic.w	r5, r5, r7
 800718c:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800718e:	68e5      	ldr	r5, [r4, #12]
 8007190:	ea25 0507 	bic.w	r5, r5, r7
 8007194:	60e5      	str	r5, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007196:	4f06      	ldr	r7, [pc, #24]	; (80071b0 <HAL_GPIO_DeInit+0x124>)
 8007198:	f10e 0402 	add.w	r4, lr, #2
 800719c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80071a0:	ea25 0506 	bic.w	r5, r5, r6
 80071a4:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 80071a8:	e77e      	b.n	80070a8 <HAL_GPIO_DeInit+0x1c>
  }
}
 80071aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	40010000 	.word	0x40010000
 80071b4:	48000400 	.word	0x48000400
 80071b8:	40010400 	.word	0x40010400

080071bc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80071bc:	6903      	ldr	r3, [r0, #16]
 80071be:	4219      	tst	r1, r3
 80071c0:	d001      	beq.n	80071c6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80071c2:	2001      	movs	r0, #1
 80071c4:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80071c6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80071c8:	4770      	bx	lr

080071ca <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80071ca:	b10a      	cbz	r2, 80071d0 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80071cc:	6181      	str	r1, [r0, #24]
 80071ce:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80071d0:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80071d2:	4770      	bx	lr

080071d4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80071d4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80071d6:	ea01 0203 	and.w	r2, r1, r3
 80071da:	ea21 0103 	bic.w	r1, r1, r3
 80071de:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80071e2:	6181      	str	r1, [r0, #24]
}
 80071e4:	4770      	bx	lr
	...

080071e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80071e8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80071ea:	4b05      	ldr	r3, [pc, #20]	; (8007200 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	4203      	tst	r3, r0
 80071f0:	d100      	bne.n	80071f4 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80071f2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80071f4:	4b02      	ldr	r3, [pc, #8]	; (8007200 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80071f6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80071f8:	f7ff f900 	bl	80063fc <HAL_GPIO_EXTI_Callback>
}
 80071fc:	e7f9      	b.n	80071f2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80071fe:	bf00      	nop
 8007200:	40010400 	.word	0x40010400

08007204 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007208:	6807      	ldr	r7, [r0, #0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 800720a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800720e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007212:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007216:	429a      	cmp	r2, r3
 8007218:	d854      	bhi.n	80072c4 <PCD_WriteEmptyTxFifo+0xc0>
 800721a:	4680      	mov	r8, r0
 800721c:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 800721e:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8007220:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8007224:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007228:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800722a:	429a      	cmp	r2, r3
 800722c:	d300      	bcc.n	8007230 <PCD_WriteEmptyTxFifo+0x2c>
  len = ep->xfer_len - ep->xfer_count;
 800722e:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8007230:	f102 0903 	add.w	r9, r2, #3
 8007234:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007238:	e013      	b.n	8007262 <PCD_WriteEmptyTxFifo+0x5e>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 800723a:	f106 0903 	add.w	r9, r6, #3
 800723e:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8007242:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8007246:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800724a:	b2b3      	uxth	r3, r6
 800724c:	b2e2      	uxtb	r2, r4
 800724e:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8007250:	4638      	mov	r0, r7
 8007252:	f003 f9fc 	bl	800a64e <USB_WritePacket>

    ep->xfer_buff  += len;
 8007256:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007258:	4433      	add	r3, r6
 800725a:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 800725c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800725e:	4433      	add	r3, r6
 8007260:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007262:	eb07 1344 	add.w	r3, r7, r4, lsl #5
 8007266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800726e:	454b      	cmp	r3, r9
 8007270:	d312      	bcc.n	8007298 <PCD_WriteEmptyTxFifo+0x94>
 8007272:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8007276:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800727a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800727c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800727e:	429a      	cmp	r2, r3
 8007280:	d20a      	bcs.n	8007298 <PCD_WriteEmptyTxFifo+0x94>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007282:	b14b      	cbz	r3, 8007298 <PCD_WriteEmptyTxFifo+0x94>
    len = ep->xfer_len - ep->xfer_count;
 8007284:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 8007286:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800728a:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 800728e:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8007290:	429e      	cmp	r6, r3
 8007292:	d3d2      	bcc.n	800723a <PCD_WriteEmptyTxFifo+0x36>
    len = ep->xfer_len - ep->xfer_count;
 8007294:	461e      	mov	r6, r3
 8007296:	e7d0      	b.n	800723a <PCD_WriteEmptyTxFifo+0x36>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007298:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800729c:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 80072a0:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 80072a4:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d80e      	bhi.n	80072ca <PCD_WriteEmptyTxFifo+0xc6>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80072ac:	f004 040f 	and.w	r4, r4, #15
 80072b0:	2201      	movs	r2, #1
 80072b2:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80072b4:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 80072b8:	ea23 0302 	bic.w	r3, r3, r2
 80072bc:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
  }

  return HAL_OK;
 80072c0:	2000      	movs	r0, #0
 80072c2:	e000      	b.n	80072c6 <PCD_WriteEmptyTxFifo+0xc2>
    return HAL_ERROR;
 80072c4:	2001      	movs	r0, #1
}
 80072c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 80072ca:	2000      	movs	r0, #0
 80072cc:	e7fb      	b.n	80072c6 <PCD_WriteEmptyTxFifo+0xc2>

080072ce <HAL_PCD_Init>:
{
 80072ce:	b570      	push	{r4, r5, r6, lr}
 80072d0:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 80072d2:	2800      	cmp	r0, #0
 80072d4:	f000 8097 	beq.w	8007406 <HAL_PCD_Init+0x138>
 80072d8:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 80072da:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80072dc:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 80072e0:	b33b      	cbz	r3, 8007332 <HAL_PCD_Init+0x64>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80072e2:	2303      	movs	r3, #3
 80072e4:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80072e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80072ea:	f413 7f80 	tst.w	r3, #256	; 0x100
 80072ee:	d101      	bne.n	80072f4 <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	612b      	str	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 80072f4:	6828      	ldr	r0, [r5, #0]
 80072f6:	f002 ff69 	bl	800a1cc <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80072fa:	462c      	mov	r4, r5
 80072fc:	f854 6b10 	ldr.w	r6, [r4], #16
 8007300:	46ec      	mov	ip, sp
 8007302:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007304:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800730a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800730e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007312:	e88c 0003 	stmia.w	ip, {r0, r1}
 8007316:	1d2b      	adds	r3, r5, #4
 8007318:	cb0e      	ldmia	r3, {r1, r2, r3}
 800731a:	4630      	mov	r0, r6
 800731c:	f002 fec2 	bl	800a0a4 <USB_CoreInit>
 8007320:	4604      	mov	r4, r0
 8007322:	b158      	cbz	r0, 800733c <HAL_PCD_Init+0x6e>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007324:	2302      	movs	r3, #2
 8007326:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 800732a:	2401      	movs	r4, #1
}
 800732c:	4620      	mov	r0, r4
 800732e:	b00a      	add	sp, #40	; 0x28
 8007330:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8007332:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8007336:	f7ff f86f 	bl	8006418 <HAL_PCD_MspInit>
 800733a:	e7d2      	b.n	80072e2 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800733c:	2100      	movs	r1, #0
 800733e:	6828      	ldr	r0, [r5, #0]
 8007340:	f002 ff4a 	bl	800a1d8 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007344:	4623      	mov	r3, r4
 8007346:	e016      	b.n	8007376 <HAL_PCD_Init+0xa8>
    hpcd->IN_ep[i].is_in = 1U;
 8007348:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800734c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8007350:	2101      	movs	r1, #1
 8007352:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8007356:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800735a:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800735e:	2100      	movs	r1, #0
 8007360:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8007364:	6451      	str	r1, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007366:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8007368:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800736c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8007370:	6511      	str	r1, [r2, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007372:	3301      	adds	r3, #1
 8007374:	b2db      	uxtb	r3, r3
 8007376:	6869      	ldr	r1, [r5, #4]
 8007378:	428b      	cmp	r3, r1
 800737a:	d3e5      	bcc.n	8007348 <HAL_PCD_Init+0x7a>
 800737c:	e016      	b.n	80073ac <HAL_PCD_Init+0xde>
    hpcd->OUT_ep[i].is_in = 0U;
 800737e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8007382:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007386:	2200      	movs	r2, #0
 8007388:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 800738c:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007390:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007394:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007398:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 800739c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 80073a0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80073a4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073a8:	3401      	adds	r4, #1
 80073aa:	b2e4      	uxtb	r4, r4
 80073ac:	42a1      	cmp	r1, r4
 80073ae:	d8e6      	bhi.n	800737e <HAL_PCD_Init+0xb0>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80073b0:	462c      	mov	r4, r5
 80073b2:	f854 6b10 	ldr.w	r6, [r4], #16
 80073b6:	46ec      	mov	ip, sp
 80073b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80073be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80073c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80073c8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80073cc:	1d2b      	adds	r3, r5, #4
 80073ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80073d0:	4630      	mov	r0, r6
 80073d2:	f002 ff47 	bl	800a264 <USB_DevInit>
 80073d6:	4604      	mov	r4, r0
 80073d8:	b960      	cbnz	r0, 80073f4 <HAL_PCD_Init+0x126>
  hpcd->USB_Address = 0U;
 80073da:	2300      	movs	r3, #0
 80073dc:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80073e0:	2301      	movs	r3, #1
 80073e2:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 80073e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d008      	beq.n	80073fe <HAL_PCD_Init+0x130>
  (void)USB_DevDisconnect(hpcd->Instance);
 80073ec:	6828      	ldr	r0, [r5, #0]
 80073ee:	f003 faa1 	bl	800a934 <USB_DevDisconnect>
  return HAL_OK;
 80073f2:	e79b      	b.n	800732c <HAL_PCD_Init+0x5e>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80073f4:	2302      	movs	r3, #2
 80073f6:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 80073fa:	2401      	movs	r4, #1
 80073fc:	e796      	b.n	800732c <HAL_PCD_Init+0x5e>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80073fe:	4628      	mov	r0, r5
 8007400:	f000 fc27 	bl	8007c52 <HAL_PCDEx_ActivateLPM>
 8007404:	e7f2      	b.n	80073ec <HAL_PCD_Init+0x11e>
    return HAL_ERROR;
 8007406:	2401      	movs	r4, #1
 8007408:	e790      	b.n	800732c <HAL_PCD_Init+0x5e>

0800740a <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800740a:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 800740c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8007410:	2b01      	cmp	r3, #1
 8007412:	d016      	beq.n	8007442 <HAL_PCD_Start+0x38>
{
 8007414:	b510      	push	{r4, lr}
 8007416:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8007418:	2301      	movs	r3, #1
 800741a:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if (hpcd->Init.battery_charging_enable == 1U)
 800741e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007420:	2b01      	cmp	r3, #1
 8007422:	d009      	beq.n	8007438 <HAL_PCD_Start+0x2e>
  __HAL_PCD_ENABLE(hpcd);
 8007424:	6820      	ldr	r0, [r4, #0]
 8007426:	f002 fecb 	bl	800a1c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800742a:	6820      	ldr	r0, [r4, #0]
 800742c:	f003 fa74 	bl	800a918 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007430:	2000      	movs	r0, #0
 8007432:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007436:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007438:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800743a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800743e:	6393      	str	r3, [r2, #56]	; 0x38
 8007440:	e7f0      	b.n	8007424 <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8007442:	2002      	movs	r0, #2
}
 8007444:	4770      	bx	lr
	...

08007448 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007448:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800744a:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800744c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800744e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007456:	689d      	ldr	r5, [r3, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007458:	4a0b      	ldr	r2, [pc, #44]	; (8007488 <PCD_EP_OutXfrComplete_int+0x40>)
 800745a:	4294      	cmp	r4, r2
 800745c:	d10f      	bne.n	800747e <PCD_EP_OutXfrComplete_int+0x36>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800745e:	f415 4f00 	tst.w	r5, #32768	; 0x8000
 8007462:	d003      	beq.n	800746c <PCD_EP_OutXfrComplete_int+0x24>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007464:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007468:	609a      	str	r2, [r3, #8]
 800746a:	e00b      	b.n	8007484 <PCD_EP_OutXfrComplete_int+0x3c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800746c:	f015 0f20 	tst.w	r5, #32
 8007470:	d001      	beq.n	8007476 <PCD_EP_OutXfrComplete_int+0x2e>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007472:	2220      	movs	r2, #32
 8007474:	609a      	str	r2, [r3, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007476:	b2c9      	uxtb	r1, r1
 8007478:	f7ff f980 	bl	800677c <HAL_PCD_DataOutStageCallback>
 800747c:	e002      	b.n	8007484 <PCD_EP_OutXfrComplete_int+0x3c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800747e:	b2c9      	uxtb	r1, r1
 8007480:	f7ff f97c 	bl	800677c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
}
 8007484:	2000      	movs	r0, #0
 8007486:	bd38      	pop	{r3, r4, r5, pc}
 8007488:	4f54310a 	.word	0x4f54310a

0800748c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800748c:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800748e:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007490:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007492:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007496:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800749a:	4a07      	ldr	r2, [pc, #28]	; (80074b8 <PCD_EP_OutSetupPacket_int+0x2c>)
 800749c:	4294      	cmp	r4, r2
 800749e:	d907      	bls.n	80074b0 <PCD_EP_OutSetupPacket_int+0x24>
 80074a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a4:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80074a8:	d002      	beq.n	80074b0 <PCD_EP_OutSetupPacket_int+0x24>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80074aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80074ae:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80074b0:	f7ff f95c 	bl	800676c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
}
 80074b4:	2000      	movs	r0, #0
 80074b6:	bd10      	pop	{r4, pc}
 80074b8:	4f54300a 	.word	0x4f54300a

080074bc <HAL_PCD_IRQHandler>:
{
 80074bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c0:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074c2:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80074c4:	4628      	mov	r0, r5
 80074c6:	f003 fa72 	bl	800a9ae <USB_GetMode>
 80074ca:	b108      	cbz	r0, 80074d0 <HAL_PCD_IRQHandler+0x14>
}
 80074cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d0:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80074d2:	6820      	ldr	r0, [r4, #0]
 80074d4:	f003 fa3c 	bl	800a950 <USB_ReadInterrupts>
 80074d8:	2800      	cmp	r0, #0
 80074da:	d0f7      	beq.n	80074cc <HAL_PCD_IRQHandler+0x10>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80074dc:	6820      	ldr	r0, [r4, #0]
 80074de:	f003 fa37 	bl	800a950 <USB_ReadInterrupts>
 80074e2:	f010 0f02 	tst.w	r0, #2
 80074e6:	d004      	beq.n	80074f2 <HAL_PCD_IRQHandler+0x36>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80074e8:	6822      	ldr	r2, [r4, #0]
 80074ea:	6953      	ldr	r3, [r2, #20]
 80074ec:	f003 0302 	and.w	r3, r3, #2
 80074f0:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80074f2:	6820      	ldr	r0, [r4, #0]
 80074f4:	f003 fa2c 	bl	800a950 <USB_ReadInterrupts>
 80074f8:	f010 0f10 	tst.w	r0, #16
 80074fc:	d014      	beq.n	8007528 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80074fe:	6822      	ldr	r2, [r4, #0]
 8007500:	6993      	ldr	r3, [r2, #24]
 8007502:	f023 0310 	bic.w	r3, r3, #16
 8007506:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8007508:	6a2f      	ldr	r7, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800750a:	f007 080f 	and.w	r8, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800750e:	f3c7 4343 	ubfx	r3, r7, #17, #4
 8007512:	2b02      	cmp	r3, #2
 8007514:	f000 8085 	beq.w	8007622 <HAL_PCD_IRQHandler+0x166>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007518:	2b06      	cmp	r3, #6
 800751a:	f000 80a1 	beq.w	8007660 <HAL_PCD_IRQHandler+0x1a4>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800751e:	6822      	ldr	r2, [r4, #0]
 8007520:	6993      	ldr	r3, [r2, #24]
 8007522:	f043 0310 	orr.w	r3, r3, #16
 8007526:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007528:	6820      	ldr	r0, [r4, #0]
 800752a:	f003 fa11 	bl	800a950 <USB_ReadInterrupts>
 800752e:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 8007532:	f040 80a7 	bne.w	8007684 <HAL_PCD_IRQHandler+0x1c8>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007536:	6820      	ldr	r0, [r4, #0]
 8007538:	f003 fa0a 	bl	800a950 <USB_ReadInterrupts>
 800753c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8007540:	f040 80e9 	bne.w	8007716 <HAL_PCD_IRQHandler+0x25a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007544:	6820      	ldr	r0, [r4, #0]
 8007546:	f003 fa03 	bl	800a950 <USB_ReadInterrupts>
 800754a:	2800      	cmp	r0, #0
 800754c:	f2c0 8139 	blt.w	80077c2 <HAL_PCD_IRQHandler+0x306>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007550:	6820      	ldr	r0, [r4, #0]
 8007552:	f003 f9fd 	bl	800a950 <USB_ReadInterrupts>
 8007556:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800755a:	d00a      	beq.n	8007572 <HAL_PCD_IRQHandler+0xb6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800755c:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8007560:	f013 0f01 	tst.w	r3, #1
 8007564:	f040 8147 	bne.w	80077f6 <HAL_PCD_IRQHandler+0x33a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007568:	6822      	ldr	r2, [r4, #0]
 800756a:	6953      	ldr	r3, [r2, #20]
 800756c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007570:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007572:	6820      	ldr	r0, [r4, #0]
 8007574:	f003 f9ec 	bl	800a950 <USB_ReadInterrupts>
 8007578:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 800757c:	d015      	beq.n	80075aa <HAL_PCD_IRQHandler+0xee>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800757e:	6822      	ldr	r2, [r4, #0]
 8007580:	6953      	ldr	r3, [r2, #20]
 8007582:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007586:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8007588:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800758c:	2b00      	cmp	r3, #0
 800758e:	f040 8136 	bne.w	80077fe <HAL_PCD_IRQHandler+0x342>
        hpcd->LPM_State = LPM_L1;
 8007592:	2101      	movs	r1, #1
 8007594:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759c:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80075a0:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80075a4:	4620      	mov	r0, r4
 80075a6:	f000 fb67 	bl	8007c78 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80075aa:	6820      	ldr	r0, [r4, #0]
 80075ac:	f003 f9d0 	bl	800a950 <USB_ReadInterrupts>
 80075b0:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80075b4:	f040 8127 	bne.w	8007806 <HAL_PCD_IRQHandler+0x34a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80075b8:	6820      	ldr	r0, [r4, #0]
 80075ba:	f003 f9c9 	bl	800a950 <USB_ReadInterrupts>
 80075be:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80075c2:	f040 817b 	bne.w	80078bc <HAL_PCD_IRQHandler+0x400>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80075c6:	6820      	ldr	r0, [r4, #0]
 80075c8:	f003 f9c2 	bl	800a950 <USB_ReadInterrupts>
 80075cc:	f010 0f08 	tst.w	r0, #8
 80075d0:	f040 818c 	bne.w	80078ec <HAL_PCD_IRQHandler+0x430>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80075d4:	6820      	ldr	r0, [r4, #0]
 80075d6:	f003 f9bb 	bl	800a950 <USB_ReadInterrupts>
 80075da:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80075de:	f040 818e 	bne.w	80078fe <HAL_PCD_IRQHandler+0x442>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80075e2:	6820      	ldr	r0, [r4, #0]
 80075e4:	f003 f9b4 	bl	800a950 <USB_ReadInterrupts>
 80075e8:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 80075ec:	f040 8191 	bne.w	8007912 <HAL_PCD_IRQHandler+0x456>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80075f0:	6820      	ldr	r0, [r4, #0]
 80075f2:	f003 f9ad 	bl	800a950 <USB_ReadInterrupts>
 80075f6:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80075fa:	f040 8194 	bne.w	8007926 <HAL_PCD_IRQHandler+0x46a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80075fe:	6820      	ldr	r0, [r4, #0]
 8007600:	f003 f9a6 	bl	800a950 <USB_ReadInterrupts>
 8007604:	f010 0f04 	tst.w	r0, #4
 8007608:	f43f af60 	beq.w	80074cc <HAL_PCD_IRQHandler+0x10>
      temp = hpcd->Instance->GOTGINT;
 800760c:	6823      	ldr	r3, [r4, #0]
 800760e:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007610:	f015 0f04 	tst.w	r5, #4
 8007614:	f040 8190 	bne.w	8007938 <HAL_PCD_IRQHandler+0x47c>
      hpcd->Instance->GOTGINT |= temp;
 8007618:	6822      	ldr	r2, [r4, #0]
 800761a:	6853      	ldr	r3, [r2, #4]
 800761c:	432b      	orrs	r3, r5
 800761e:	6053      	str	r3, [r2, #4]
 8007620:	e754      	b.n	80074cc <HAL_PCD_IRQHandler+0x10>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007622:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007626:	421f      	tst	r7, r3
 8007628:	f43f af79 	beq.w	800751e <HAL_PCD_IRQHandler+0x62>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800762c:	ea4f 1b17 	mov.w	fp, r7, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007630:	ebc8 09c8 	rsb	r9, r8, r8, lsl #3
 8007634:	eb04 0989 	add.w	r9, r4, r9, lsl #2
 8007638:	f3c7 120a 	ubfx	r2, r7, #4, #11
 800763c:	f8d9 1208 	ldr.w	r1, [r9, #520]	; 0x208
 8007640:	4628      	mov	r0, r5
 8007642:	f003 f8ef 	bl	800a824 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007646:	f3cb 020a 	ubfx	r2, fp, #0, #11
 800764a:	f8d9 3208 	ldr.w	r3, [r9, #520]	; 0x208
 800764e:	4413      	add	r3, r2
 8007650:	f8c9 3208 	str.w	r3, [r9, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007654:	f8d9 3214 	ldr.w	r3, [r9, #532]	; 0x214
 8007658:	4413      	add	r3, r2
 800765a:	f8c9 3214 	str.w	r3, [r9, #532]	; 0x214
 800765e:	e75e      	b.n	800751e <HAL_PCD_IRQHandler+0x62>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007660:	2208      	movs	r2, #8
 8007662:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8007666:	4628      	mov	r0, r5
 8007668:	f003 f8dc 	bl	800a824 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800766c:	f3c7 170a 	ubfx	r7, r7, #4, #11
 8007670:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
 8007674:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007678:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 800767c:	443b      	add	r3, r7
 800767e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8007682:	e74c      	b.n	800751e <HAL_PCD_IRQHandler+0x62>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007684:	6820      	ldr	r0, [r4, #0]
 8007686:	f003 f967 	bl	800a958 <USB_ReadDevAllOutEpInterrupt>
 800768a:	4607      	mov	r7, r0
      epnum = 0U;
 800768c:	46b0      	mov	r8, r6
      while (ep_intr != 0U)
 800768e:	e016      	b.n	80076be <HAL_PCD_IRQHandler+0x202>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007690:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8007694:	2201      	movs	r2, #1
 8007696:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800769a:	4641      	mov	r1, r8
 800769c:	4620      	mov	r0, r4
 800769e:	f7ff fed3 	bl	8007448 <PCD_EP_OutXfrComplete_int>
 80076a2:	e01b      	b.n	80076dc <HAL_PCD_IRQHandler+0x220>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80076a4:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 80076a8:	2208      	movs	r2, #8
 80076aa:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80076ae:	4641      	mov	r1, r8
 80076b0:	4620      	mov	r0, r4
 80076b2:	f7ff feeb 	bl	800748c <PCD_EP_OutSetupPacket_int>
 80076b6:	e014      	b.n	80076e2 <HAL_PCD_IRQHandler+0x226>
        epnum++;
 80076b8:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 80076bc:	087f      	lsrs	r7, r7, #1
      while (ep_intr != 0U)
 80076be:	2f00      	cmp	r7, #0
 80076c0:	f43f af39 	beq.w	8007536 <HAL_PCD_IRQHandler+0x7a>
        if ((ep_intr & 0x1U) != 0U)
 80076c4:	f017 0f01 	tst.w	r7, #1
 80076c8:	d0f6      	beq.n	80076b8 <HAL_PCD_IRQHandler+0x1fc>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80076ca:	fa5f f188 	uxtb.w	r1, r8
 80076ce:	6820      	ldr	r0, [r4, #0]
 80076d0:	f003 f952 	bl	800a978 <USB_ReadDevOutEPInterrupt>
 80076d4:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80076d6:	f010 0f01 	tst.w	r0, #1
 80076da:	d1d9      	bne.n	8007690 <HAL_PCD_IRQHandler+0x1d4>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80076dc:	f019 0f08 	tst.w	r9, #8
 80076e0:	d1e0      	bne.n	80076a4 <HAL_PCD_IRQHandler+0x1e8>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80076e2:	f019 0f10 	tst.w	r9, #16
 80076e6:	d004      	beq.n	80076f2 <HAL_PCD_IRQHandler+0x236>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80076e8:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 80076ec:	2210      	movs	r2, #16
 80076ee:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80076f2:	f019 0f20 	tst.w	r9, #32
 80076f6:	d004      	beq.n	8007702 <HAL_PCD_IRQHandler+0x246>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80076f8:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 80076fc:	2220      	movs	r2, #32
 80076fe:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007702:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8007706:	d0d7      	beq.n	80076b8 <HAL_PCD_IRQHandler+0x1fc>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007708:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 800770c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007710:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8007714:	e7d0      	b.n	80076b8 <HAL_PCD_IRQHandler+0x1fc>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007716:	6820      	ldr	r0, [r4, #0]
 8007718:	f003 f926 	bl	800a968 <USB_ReadDevAllInEpInterrupt>
 800771c:	4607      	mov	r7, r0
      epnum = 0U;
 800771e:	46b0      	mov	r8, r6
      while (ep_intr != 0U)
 8007720:	e019      	b.n	8007756 <HAL_PCD_IRQHandler+0x29a>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007722:	f008 020f 	and.w	r2, r8, #15
 8007726:	2101      	movs	r1, #1
 8007728:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800772c:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
 8007730:	ea23 0302 	bic.w	r3, r3, r2
 8007734:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007738:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 800773c:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007740:	4651      	mov	r1, sl
 8007742:	4620      	mov	r0, r4
 8007744:	f7ff f826 	bl	8006794 <HAL_PCD_DataInStageCallback>
 8007748:	e015      	b.n	8007776 <HAL_PCD_IRQHandler+0x2ba>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800774a:	f019 0f80 	tst.w	r9, #128	; 0x80
 800774e:	d133      	bne.n	80077b8 <HAL_PCD_IRQHandler+0x2fc>
        epnum++;
 8007750:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 8007754:	087f      	lsrs	r7, r7, #1
      while (ep_intr != 0U)
 8007756:	2f00      	cmp	r7, #0
 8007758:	f43f aef4 	beq.w	8007544 <HAL_PCD_IRQHandler+0x88>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800775c:	f017 0f01 	tst.w	r7, #1
 8007760:	d0f6      	beq.n	8007750 <HAL_PCD_IRQHandler+0x294>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007762:	fa5f fa88 	uxtb.w	sl, r8
 8007766:	4651      	mov	r1, sl
 8007768:	6820      	ldr	r0, [r4, #0]
 800776a:	f003 f90e 	bl	800a98a <USB_ReadDevInEPInterrupt>
 800776e:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007770:	f010 0f01 	tst.w	r0, #1
 8007774:	d1d5      	bne.n	8007722 <HAL_PCD_IRQHandler+0x266>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007776:	f019 0f08 	tst.w	r9, #8
 800777a:	d004      	beq.n	8007786 <HAL_PCD_IRQHandler+0x2ca>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800777c:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8007780:	2208      	movs	r2, #8
 8007782:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007786:	f019 0f10 	tst.w	r9, #16
 800778a:	d004      	beq.n	8007796 <HAL_PCD_IRQHandler+0x2da>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800778c:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8007790:	2210      	movs	r2, #16
 8007792:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007796:	f019 0f40 	tst.w	r9, #64	; 0x40
 800779a:	d004      	beq.n	80077a6 <HAL_PCD_IRQHandler+0x2ea>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800779c:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 80077a0:	2240      	movs	r2, #64	; 0x40
 80077a2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80077a6:	f019 0f02 	tst.w	r9, #2
 80077aa:	d0ce      	beq.n	800774a <HAL_PCD_IRQHandler+0x28e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80077ac:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 80077b0:	2202      	movs	r2, #2
 80077b2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 80077b6:	e7c8      	b.n	800774a <HAL_PCD_IRQHandler+0x28e>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80077b8:	4641      	mov	r1, r8
 80077ba:	4620      	mov	r0, r4
 80077bc:	f7ff fd22 	bl	8007204 <PCD_WriteEmptyTxFifo>
 80077c0:	e7c6      	b.n	8007750 <HAL_PCD_IRQHandler+0x294>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80077c2:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 80077c6:	f023 0301 	bic.w	r3, r3, #1
 80077ca:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 80077ce:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d008      	beq.n	80077e8 <HAL_PCD_IRQHandler+0x32c>
        HAL_PCD_ResumeCallback(hpcd);
 80077d6:	4620      	mov	r0, r4
 80077d8:	f7fe ffff 	bl	80067da <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80077dc:	6822      	ldr	r2, [r4, #0]
 80077de:	6953      	ldr	r3, [r2, #20]
 80077e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077e4:	6153      	str	r3, [r2, #20]
 80077e6:	e6b3      	b.n	8007550 <HAL_PCD_IRQHandler+0x94>
        hpcd->LPM_State = LPM_L0;
 80077e8:	2100      	movs	r1, #0
 80077ea:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80077ee:	4620      	mov	r0, r4
 80077f0:	f000 fa42 	bl	8007c78 <HAL_PCDEx_LPM_Callback>
 80077f4:	e7f2      	b.n	80077dc <HAL_PCD_IRQHandler+0x320>
        HAL_PCD_SuspendCallback(hpcd);
 80077f6:	4620      	mov	r0, r4
 80077f8:	f7fe ffe9 	bl	80067ce <HAL_PCD_SuspendCallback>
 80077fc:	e6b4      	b.n	8007568 <HAL_PCD_IRQHandler+0xac>
        HAL_PCD_SuspendCallback(hpcd);
 80077fe:	4620      	mov	r0, r4
 8007800:	f7fe ffe5 	bl	80067ce <HAL_PCD_SuspendCallback>
 8007804:	e6d1      	b.n	80075aa <HAL_PCD_IRQHandler+0xee>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007806:	f505 6700 	add.w	r7, r5, #2048	; 0x800
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f023 0301 	bic.w	r3, r3, #1
 8007810:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007812:	2110      	movs	r1, #16
 8007814:	6820      	ldr	r0, [r4, #0]
 8007816:	f002 fcf7 	bl	800a208 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800781a:	e020      	b.n	800785e <HAL_PCD_IRQHandler+0x3a2>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800781c:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8007820:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8007824:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007828:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800782c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007830:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007834:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8007838:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800783c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007840:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007844:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8007848:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800784c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007850:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8007854:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8007858:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800785c:	3601      	adds	r6, #1
 800785e:	6863      	ldr	r3, [r4, #4]
 8007860:	42b3      	cmp	r3, r6
 8007862:	d8db      	bhi.n	800781c <HAL_PCD_IRQHandler+0x360>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800786a:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800786c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800786e:	b1d3      	cbz	r3, 80078a6 <HAL_PCD_IRQHandler+0x3ea>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007870:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007874:	f043 030b 	orr.w	r3, r3, #11
 8007878:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800787c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800787e:	f043 030b 	orr.w	r3, r3, #11
 8007882:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007884:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8007888:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800788c:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007890:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8007894:	6820      	ldr	r0, [r4, #0]
 8007896:	f003 f89f 	bl	800a9d8 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800789a:	6822      	ldr	r2, [r4, #0]
 800789c:	6953      	ldr	r3, [r2, #20]
 800789e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078a2:	6153      	str	r3, [r2, #20]
 80078a4:	e688      	b.n	80075b8 <HAL_PCD_IRQHandler+0xfc>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80078ac:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80078b0:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	f043 030b 	orr.w	r3, r3, #11
 80078b8:	613b      	str	r3, [r7, #16]
 80078ba:	e7e3      	b.n	8007884 <HAL_PCD_IRQHandler+0x3c8>
      (void)USB_ActivateSetup(hpcd->Instance);
 80078bc:	6820      	ldr	r0, [r4, #0]
 80078be:	f003 f87a 	bl	800a9b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80078c2:	6820      	ldr	r0, [r4, #0]
 80078c4:	f002 fd80 	bl	800a3c8 <USB_GetDevSpeed>
 80078c8:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80078ca:	6825      	ldr	r5, [r4, #0]
 80078cc:	f000 fe5c 	bl	8008588 <HAL_RCC_GetHCLKFreq>
 80078d0:	4601      	mov	r1, r0
 80078d2:	7b22      	ldrb	r2, [r4, #12]
 80078d4:	4628      	mov	r0, r5
 80078d6:	f002 fc01 	bl	800a0dc <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80078da:	4620      	mov	r0, r4
 80078dc:	f7fe ff6b 	bl	80067b6 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80078e0:	6822      	ldr	r2, [r4, #0]
 80078e2:	6953      	ldr	r3, [r2, #20]
 80078e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078e8:	6153      	str	r3, [r2, #20]
 80078ea:	e66c      	b.n	80075c6 <HAL_PCD_IRQHandler+0x10a>
      HAL_PCD_SOFCallback(hpcd);
 80078ec:	4620      	mov	r0, r4
 80078ee:	f7fe ff5c 	bl	80067aa <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80078f2:	6822      	ldr	r2, [r4, #0]
 80078f4:	6953      	ldr	r3, [r2, #20]
 80078f6:	f003 0308 	and.w	r3, r3, #8
 80078fa:	6153      	str	r3, [r2, #20]
 80078fc:	e66a      	b.n	80075d4 <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80078fe:	2100      	movs	r1, #0
 8007900:	4620      	mov	r0, r4
 8007902:	f7fe ff76 	bl	80067f2 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007906:	6822      	ldr	r2, [r4, #0]
 8007908:	6953      	ldr	r3, [r2, #20]
 800790a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800790e:	6153      	str	r3, [r2, #20]
 8007910:	e667      	b.n	80075e2 <HAL_PCD_IRQHandler+0x126>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007912:	2100      	movs	r1, #0
 8007914:	4620      	mov	r0, r4
 8007916:	f7fe ff66 	bl	80067e6 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800791a:	6822      	ldr	r2, [r4, #0]
 800791c:	6953      	ldr	r3, [r2, #20]
 800791e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007922:	6153      	str	r3, [r2, #20]
 8007924:	e664      	b.n	80075f0 <HAL_PCD_IRQHandler+0x134>
      HAL_PCD_ConnectCallback(hpcd);
 8007926:	4620      	mov	r0, r4
 8007928:	f7fe ff69 	bl	80067fe <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800792c:	6822      	ldr	r2, [r4, #0]
 800792e:	6953      	ldr	r3, [r2, #20]
 8007930:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007934:	6153      	str	r3, [r2, #20]
 8007936:	e662      	b.n	80075fe <HAL_PCD_IRQHandler+0x142>
        HAL_PCD_DisconnectCallback(hpcd);
 8007938:	4620      	mov	r0, r4
 800793a:	f7fe ff66 	bl	800680a <HAL_PCD_DisconnectCallback>
 800793e:	e66b      	b.n	8007618 <HAL_PCD_IRQHandler+0x15c>

08007940 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8007940:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8007944:	2b01      	cmp	r3, #1
 8007946:	d00d      	beq.n	8007964 <HAL_PCD_SetAddress+0x24>
{
 8007948:	b510      	push	{r4, lr}
 800794a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800794c:	2301      	movs	r3, #1
 800794e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007952:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007956:	6800      	ldr	r0, [r0, #0]
 8007958:	f002 ffce 	bl	800a8f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800795c:	2000      	movs	r0, #0
 800795e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007962:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007964:	2002      	movs	r0, #2
}
 8007966:	4770      	bx	lr

08007968 <HAL_PCD_EP_Open>:
{
 8007968:	b538      	push	{r3, r4, r5, lr}
 800796a:	4605      	mov	r5, r0
 800796c:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800796e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007972:	d129      	bne.n	80079c8 <HAL_PCD_EP_Open+0x60>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007974:	f001 0e0f 	and.w	lr, r1, #15
 8007978:	ebce 04ce 	rsb	r4, lr, lr, lsl #3
 800797c:	00a4      	lsls	r4, r4, #2
 800797e:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8007982:	4404      	add	r4, r0
 8007984:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 8007986:	ebce 0ece 	rsb	lr, lr, lr, lsl #3
 800798a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800798e:	2000      	movs	r0, #0
 8007990:	f88e 01fd 	strb.w	r0, [lr, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8007994:	f00c 0c0f 	and.w	ip, ip, #15
 8007998:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 800799c:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 800799e:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80079a0:	784a      	ldrb	r2, [r1, #1]
 80079a2:	b10a      	cbz	r2, 80079a8 <HAL_PCD_EP_Open+0x40>
    ep->tx_fifo_num = ep->num;
 80079a4:	f8a1 c006 	strh.w	ip, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d01d      	beq.n	80079e8 <HAL_PCD_EP_Open+0x80>
  __HAL_LOCK(hpcd);
 80079ac:	f895 33bc 	ldrb.w	r3, [r5, #956]	; 0x3bc
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d01c      	beq.n	80079ee <HAL_PCD_EP_Open+0x86>
 80079b4:	2301      	movs	r3, #1
 80079b6:	f885 33bc 	strb.w	r3, [r5, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80079ba:	6828      	ldr	r0, [r5, #0]
 80079bc:	f002 fd12 	bl	800a3e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80079c0:	2000      	movs	r0, #0
 80079c2:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
}
 80079c6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079c8:	f001 000f 	and.w	r0, r1, #15
 80079cc:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 80079d0:	0089      	lsls	r1, r1, #2
 80079d2:	3138      	adds	r1, #56	; 0x38
 80079d4:	4429      	add	r1, r5
 80079d6:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80079d8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80079dc:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80079e0:	2401      	movs	r4, #1
 80079e2:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 80079e6:	e7d5      	b.n	8007994 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	710b      	strb	r3, [r1, #4]
 80079ec:	e7de      	b.n	80079ac <HAL_PCD_EP_Open+0x44>
  __HAL_LOCK(hpcd);
 80079ee:	2002      	movs	r0, #2
 80079f0:	e7e9      	b.n	80079c6 <HAL_PCD_EP_Open+0x5e>

080079f2 <HAL_PCD_EP_Close>:
{
 80079f2:	b510      	push	{r4, lr}
 80079f4:	4604      	mov	r4, r0
 80079f6:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80079f8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80079fc:	d120      	bne.n	8007a40 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80079fe:	f001 000f 	and.w	r0, r1, #15
 8007a02:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007a0c:	4423      	add	r3, r4
 8007a0e:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8007a10:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8007a14:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007a1e:	f002 020f 	and.w	r2, r2, #15
 8007a22:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8007a24:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d019      	beq.n	8007a60 <HAL_PCD_EP_Close+0x6e>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007a32:	6820      	ldr	r0, [r4, #0]
 8007a34:	f002 fd24 	bl	800a480 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007a38:	2000      	movs	r0, #0
 8007a3a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007a3e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a40:	f001 000f 	and.w	r0, r1, #15
 8007a44:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	3338      	adds	r3, #56	; 0x38
 8007a4c:	4423      	add	r3, r4
 8007a4e:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8007a50:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8007a54:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007a58:	2301      	movs	r3, #1
 8007a5a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8007a5e:	e7de      	b.n	8007a1e <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8007a60:	2002      	movs	r0, #2
 8007a62:	e7ec      	b.n	8007a3e <HAL_PCD_EP_Close+0x4c>

08007a64 <HAL_PCD_EP_Receive>:
{
 8007a64:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a66:	f001 040f 	and.w	r4, r1, #15
 8007a6a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8007a6e:	0089      	lsls	r1, r1, #2
 8007a70:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8007a74:	4401      	add	r1, r0
 8007a76:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8007a78:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 8007a7c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8007a80:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->xfer_len = len;
 8007a84:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 8007a8e:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a92:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007a96:	b924      	cbnz	r4, 8007aa2 <HAL_PCD_EP_Receive+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007a98:	6800      	ldr	r0, [r0, #0]
 8007a9a:	f002 fd61 	bl	800a560 <USB_EP0StartXfer>
}
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007aa2:	6800      	ldr	r0, [r0, #0]
 8007aa4:	f002 fde8 	bl	800a678 <USB_EPStartXfer>
 8007aa8:	e7f9      	b.n	8007a9e <HAL_PCD_EP_Receive+0x3a>

08007aaa <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007aaa:	f001 010f 	and.w	r1, r1, #15
 8007aae:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007ab2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8007ab6:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8007aba:	4770      	bx	lr

08007abc <HAL_PCD_EP_Transmit>:
{
 8007abc:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007abe:	f001 040f 	and.w	r4, r1, #15
 8007ac2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8007ac6:	0089      	lsls	r1, r1, #2
 8007ac8:	3138      	adds	r1, #56	; 0x38
 8007aca:	4401      	add	r1, r0
 8007acc:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8007ace:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 8007ad2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8007ad6:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_len = len;
 8007ada:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8007aea:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007aee:	b924      	cbnz	r4, 8007afa <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007af0:	6800      	ldr	r0, [r0, #0]
 8007af2:	f002 fd35 	bl	800a560 <USB_EP0StartXfer>
}
 8007af6:	2000      	movs	r0, #0
 8007af8:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007afa:	6800      	ldr	r0, [r0, #0]
 8007afc:	f002 fdbc 	bl	800a678 <USB_EPStartXfer>
 8007b00:	e7f9      	b.n	8007af6 <HAL_PCD_EP_Transmit+0x3a>

08007b02 <HAL_PCD_EP_SetStall>:
{
 8007b02:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007b04:	f001 050f 	and.w	r5, r1, #15
 8007b08:	6842      	ldr	r2, [r0, #4]
 8007b0a:	4295      	cmp	r5, r2
 8007b0c:	d838      	bhi.n	8007b80 <HAL_PCD_EP_SetStall+0x7e>
 8007b0e:	4604      	mov	r4, r0
 8007b10:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8007b12:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007b16:	d11f      	bne.n	8007b58 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8007b18:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007b1c:	0089      	lsls	r1, r1, #2
 8007b1e:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8007b22:	4401      	add	r1, r0
 8007b24:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8007b26:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007b2a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8007b34:	2301      	movs	r3, #1
 8007b36:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b38:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8007b3a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d020      	beq.n	8007b84 <HAL_PCD_EP_SetStall+0x82>
 8007b42:	2301      	movs	r3, #1
 8007b44:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007b48:	6820      	ldr	r0, [r4, #0]
 8007b4a:	f002 fe7a 	bl	800a842 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007b4e:	b18d      	cbz	r5, 8007b74 <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 8007b50:	2000      	movs	r0, #0
 8007b52:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007b56:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b58:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 8007b5c:	0089      	lsls	r1, r1, #2
 8007b5e:	3138      	adds	r1, #56	; 0x38
 8007b60:	4401      	add	r1, r0
 8007b62:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8007b64:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8007b68:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007b72:	e7df      	b.n	8007b34 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007b74:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8007b78:	6820      	ldr	r0, [r4, #0]
 8007b7a:	f002 ff2d 	bl	800a9d8 <USB_EP0_OutStart>
 8007b7e:	e7e7      	b.n	8007b50 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8007b80:	2001      	movs	r0, #1
 8007b82:	e7e8      	b.n	8007b56 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8007b84:	2002      	movs	r0, #2
 8007b86:	e7e6      	b.n	8007b56 <HAL_PCD_EP_SetStall+0x54>

08007b88 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007b88:	f001 030f 	and.w	r3, r1, #15
 8007b8c:	6842      	ldr	r2, [r0, #4]
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d831      	bhi.n	8007bf6 <HAL_PCD_EP_ClrStall+0x6e>
{
 8007b92:	b510      	push	{r4, lr}
 8007b94:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8007b96:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007b9a:	d11e      	bne.n	8007bda <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b9c:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8007ba0:	0089      	lsls	r1, r1, #2
 8007ba2:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8007ba6:	4401      	add	r1, r0
 8007ba8:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8007baa:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8007bae:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 8007bb8:	2200      	movs	r2, #0
 8007bba:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007bbc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8007bbe:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d019      	beq.n	8007bfa <HAL_PCD_EP_ClrStall+0x72>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007bcc:	6820      	ldr	r0, [r4, #0]
 8007bce:	f002 fe65 	bl	800a89c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007bd2:	2000      	movs	r0, #0
 8007bd4:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007bd8:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007bda:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8007bde:	0089      	lsls	r1, r1, #2
 8007be0:	3138      	adds	r1, #56	; 0x38
 8007be2:	4401      	add	r1, r0
 8007be4:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8007be6:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8007bea:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007bee:	2001      	movs	r0, #1
 8007bf0:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 8007bf4:	e7e0      	b.n	8007bb8 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8007bf6:	2001      	movs	r0, #1
}
 8007bf8:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8007bfa:	2002      	movs	r0, #2
 8007bfc:	e7ec      	b.n	8007bd8 <HAL_PCD_EP_ClrStall+0x50>

08007bfe <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007bfe:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007c00:	6804      	ldr	r4, [r0, #0]
 8007c02:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 8007c04:	b931      	cbnz	r1, 8007c14 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007c06:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8007c0a:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007c16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007c18:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	e008      	b.n	8007c32 <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007c20:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8007c24:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007c28:	6849      	ldr	r1, [r1, #4]
 8007c2a:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8007c2e:	3301      	adds	r3, #1
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	f10c 31ff 	add.w	r1, ip, #4294967295
 8007c36:	428b      	cmp	r3, r1
 8007c38:	d3f2      	bcc.n	8007c20 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007c3a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8007c3e:	f10c 013f 	add.w	r1, ip, #63	; 0x3f
 8007c42:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8007c46:	6060      	str	r0, [r4, #4]
 8007c48:	e7e0      	b.n	8007c0c <HAL_PCDEx_SetTxFiFo+0xe>

08007c4a <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8007c4a:	6803      	ldr	r3, [r0, #0]
 8007c4c:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 8007c4e:	2000      	movs	r0, #0
 8007c50:	4770      	bx	lr

08007c52 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007c52:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c54:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
 8007c56:	2101      	movs	r1, #1
 8007c58:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007c62:	6993      	ldr	r3, [r2, #24]
 8007c64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c68:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007c6a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c70:	f043 0303 	orr.w	r3, r3, #3
 8007c74:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8007c76:	4770      	bx	lr

08007c78 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007c78:	4770      	bx	lr
	...

08007c7c <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c7c:	4a02      	ldr	r2, [pc, #8]	; (8007c88 <HAL_PWR_EnableBkUpAccess+0xc>)
 8007c7e:	6813      	ldr	r3, [r2, #0]
 8007c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c84:	6013      	str	r3, [r2, #0]
}
 8007c86:	4770      	bx	lr
 8007c88:	40007000 	.word	0x40007000

08007c8c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007c8c:	4b02      	ldr	r3, [pc, #8]	; (8007c98 <HAL_PWREx_GetVoltageRange+0xc>)
 8007c8e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8007c90:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	40007000 	.word	0x40007000

08007c9c <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007c9c:	4a02      	ldr	r2, [pc, #8]	; (8007ca8 <HAL_PWREx_EnableVddUSB+0xc>)
 8007c9e:	6853      	ldr	r3, [r2, #4]
 8007ca0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ca4:	6053      	str	r3, [r2, #4]
}
 8007ca6:	4770      	bx	lr
 8007ca8:	40007000 	.word	0x40007000

08007cac <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8007cac:	4a02      	ldr	r2, [pc, #8]	; (8007cb8 <HAL_PWREx_EnableVddIO2+0xc>)
 8007cae:	6853      	ldr	r3, [r2, #4]
 8007cb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007cb4:	6053      	str	r3, [r2, #4]
}
 8007cb6:	4770      	bx	lr
 8007cb8:	40007000 	.word	0x40007000

08007cbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007cbc:	b530      	push	{r4, r5, lr}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007cc2:	4b20      	ldr	r3, [pc, #128]	; (8007d44 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8007cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007cca:	d00b      	beq.n	8007ce4 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007ccc:	f7ff ffde 	bl	8007c8c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007cd0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007cd4:	d017      	beq.n	8007d06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007cd6:	2c80      	cmp	r4, #128	; 0x80
 8007cd8:	d81f      	bhi.n	8007d1a <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007cda:	d02d      	beq.n	8007d38 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007cdc:	2c70      	cmp	r4, #112	; 0x70
 8007cde:	d02d      	beq.n	8007d3c <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	e01b      	b.n	8007d1c <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ce4:	4d17      	ldr	r5, [pc, #92]	; (8007d44 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8007ce6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cec:	65ab      	str	r3, [r5, #88]	; 0x58
 8007cee:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cf4:	9301      	str	r3, [sp, #4]
 8007cf6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8007cf8:	f7ff ffc8 	bl	8007c8c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8007cfc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d02:	65ab      	str	r3, [r5, #88]	; 0x58
 8007d04:	e7e4      	b.n	8007cd0 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8007d06:	2c80      	cmp	r4, #128	; 0x80
 8007d08:	d903      	bls.n	8007d12 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8007d0a:	2ca0      	cmp	r4, #160	; 0xa0
 8007d0c:	d903      	bls.n	8007d16 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8007d0e:	2102      	movs	r1, #2
 8007d10:	e004      	b.n	8007d1c <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007d12:	2100      	movs	r1, #0
 8007d14:	e002      	b.n	8007d1c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8007d16:	2101      	movs	r1, #1
 8007d18:	e000      	b.n	8007d1c <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8007d1a:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007d1c:	4a0a      	ldr	r2, [pc, #40]	; (8007d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8007d1e:	6813      	ldr	r3, [r2, #0]
 8007d20:	f023 0307 	bic.w	r3, r3, #7
 8007d24:	430b      	orrs	r3, r1
 8007d26:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007d28:	6813      	ldr	r3, [r2, #0]
 8007d2a:	f003 0307 	and.w	r3, r3, #7
 8007d2e:	428b      	cmp	r3, r1
 8007d30:	d106      	bne.n	8007d40 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007d32:	2000      	movs	r0, #0
}
 8007d34:	b003      	add	sp, #12
 8007d36:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8007d38:	2102      	movs	r1, #2
 8007d3a:	e7ef      	b.n	8007d1c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8007d3c:	2101      	movs	r1, #1
 8007d3e:	e7ed      	b.n	8007d1c <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 8007d40:	2001      	movs	r0, #1
 8007d42:	e7f7      	b.n	8007d34 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8007d44:	40021000 	.word	0x40021000
 8007d48:	40022000 	.word	0x40022000

08007d4c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d4c:	4a28      	ldr	r2, [pc, #160]	; (8007df0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007d4e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d50:	68d2      	ldr	r2, [r2, #12]
 8007d52:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007d56:	f013 030c 	ands.w	r3, r3, #12
 8007d5a:	d00a      	beq.n	8007d72 <HAL_RCC_GetSysClockFreq+0x26>
 8007d5c:	2b0c      	cmp	r3, #12
 8007d5e:	d006      	beq.n	8007d6e <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007d60:	2b04      	cmp	r3, #4
 8007d62:	d01f      	beq.n	8007da4 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007d64:	2b08      	cmp	r3, #8
 8007d66:	d020      	beq.n	8007daa <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007d68:	2000      	movs	r0, #0
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	e010      	b.n	8007d90 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007d6e:	2a01      	cmp	r2, #1
 8007d70:	d1f6      	bne.n	8007d60 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007d72:	4a1f      	ldr	r2, [pc, #124]	; (8007df0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007d74:	6812      	ldr	r2, [r2, #0]
 8007d76:	f012 0f08 	tst.w	r2, #8
 8007d7a:	d10c      	bne.n	8007d96 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007d7c:	4a1c      	ldr	r2, [pc, #112]	; (8007df0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007d7e:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8007d82:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8007d86:	491b      	ldr	r1, [pc, #108]	; (8007df4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8007d88:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007d8c:	b143      	cbz	r3, 8007da0 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007d8e:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007d90:	2b0c      	cmp	r3, #12
 8007d92:	d00d      	beq.n	8007db0 <HAL_RCC_GetSysClockFreq+0x64>
}
 8007d94:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007d96:	4a16      	ldr	r2, [pc, #88]	; (8007df0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007d98:	6812      	ldr	r2, [r2, #0]
 8007d9a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007d9e:	e7f2      	b.n	8007d86 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8007da0:	4610      	mov	r0, r2
 8007da2:	e7f5      	b.n	8007d90 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8007da4:	4814      	ldr	r0, [pc, #80]	; (8007df8 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007da6:	2200      	movs	r2, #0
 8007da8:	e7f2      	b.n	8007d90 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8007daa:	4814      	ldr	r0, [pc, #80]	; (8007dfc <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007dac:	2200      	movs	r2, #0
 8007dae:	e7ef      	b.n	8007d90 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007db0:	4b0f      	ldr	r3, [pc, #60]	; (8007df0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d016      	beq.n	8007dea <HAL_RCC_GetSysClockFreq+0x9e>
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d100      	bne.n	8007dc2 <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8007dc0:	4a0e      	ldr	r2, [pc, #56]	; (8007dfc <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007dc2:	490b      	ldr	r1, [pc, #44]	; (8007df0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007dc4:	68cb      	ldr	r3, [r1, #12]
 8007dc6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007dca:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007dcc:	68c8      	ldr	r0, [r1, #12]
 8007dce:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8007dd2:	fb02 f000 	mul.w	r0, r2, r0
 8007dd6:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007dda:	68cb      	ldr	r3, [r1, #12]
 8007ddc:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8007de0:	3301      	adds	r3, #1
 8007de2:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8007de4:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8007de8:	e7d4      	b.n	8007d94 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8007dea:	4a03      	ldr	r2, [pc, #12]	; (8007df8 <HAL_RCC_GetSysClockFreq+0xac>)
 8007dec:	e7e9      	b.n	8007dc2 <HAL_RCC_GetSysClockFreq+0x76>
 8007dee:	bf00      	nop
 8007df0:	40021000 	.word	0x40021000
 8007df4:	0800e1d0 	.word	0x0800e1d0
 8007df8:	00f42400 	.word	0x00f42400
 8007dfc:	007a1200 	.word	0x007a1200

08007e00 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8007e00:	2800      	cmp	r0, #0
 8007e02:	f000 82fc 	beq.w	80083fe <HAL_RCC_OscConfig+0x5fe>
{
 8007e06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e0c:	4b96      	ldr	r3, [pc, #600]	; (8008068 <HAL_RCC_OscConfig+0x268>)
 8007e0e:	689d      	ldr	r5, [r3, #8]
 8007e10:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e14:	68de      	ldr	r6, [r3, #12]
 8007e16:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007e1a:	6803      	ldr	r3, [r0, #0]
 8007e1c:	f013 0f10 	tst.w	r3, #16
 8007e20:	d05a      	beq.n	8007ed8 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007e22:	b1e5      	cbz	r5, 8007e5e <HAL_RCC_OscConfig+0x5e>
 8007e24:	2d0c      	cmp	r5, #12
 8007e26:	d018      	beq.n	8007e5a <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007e28:	69a3      	ldr	r3, [r4, #24]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 80bb 	beq.w	8007fa6 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8007e30:	4a8d      	ldr	r2, [pc, #564]	; (8008068 <HAL_RCC_OscConfig+0x268>)
 8007e32:	6813      	ldr	r3, [r2, #0]
 8007e34:	f043 0301 	orr.w	r3, r3, #1
 8007e38:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007e3a:	f7fe ffc9 	bl	8006dd0 <HAL_GetTick>
 8007e3e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007e40:	4b89      	ldr	r3, [pc, #548]	; (8008068 <HAL_RCC_OscConfig+0x268>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f013 0f02 	tst.w	r3, #2
 8007e48:	f040 809a 	bne.w	8007f80 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007e4c:	f7fe ffc0 	bl	8006dd0 <HAL_GetTick>
 8007e50:	1bc0      	subs	r0, r0, r7
 8007e52:	2802      	cmp	r0, #2
 8007e54:	d9f4      	bls.n	8007e40 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8007e56:	2003      	movs	r0, #3
 8007e58:	e2dc      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007e5a:	2e01      	cmp	r6, #1
 8007e5c:	d1e4      	bne.n	8007e28 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007e5e:	4b82      	ldr	r3, [pc, #520]	; (8008068 <HAL_RCC_OscConfig+0x268>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f013 0f02 	tst.w	r3, #2
 8007e66:	d003      	beq.n	8007e70 <HAL_RCC_OscConfig+0x70>
 8007e68:	69a3      	ldr	r3, [r4, #24]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f000 82c9 	beq.w	8008402 <HAL_RCC_OscConfig+0x602>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007e70:	6a20      	ldr	r0, [r4, #32]
 8007e72:	4b7d      	ldr	r3, [pc, #500]	; (8008068 <HAL_RCC_OscConfig+0x268>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f013 0f08 	tst.w	r3, #8
 8007e7a:	d05b      	beq.n	8007f34 <HAL_RCC_OscConfig+0x134>
 8007e7c:	4b7a      	ldr	r3, [pc, #488]	; (8008068 <HAL_RCC_OscConfig+0x268>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e84:	4298      	cmp	r0, r3
 8007e86:	d85c      	bhi.n	8007f42 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007e88:	4b77      	ldr	r3, [pc, #476]	; (8008068 <HAL_RCC_OscConfig+0x268>)
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	f042 0208 	orr.w	r2, r2, #8
 8007e90:	601a      	str	r2, [r3, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007e98:	6a21      	ldr	r1, [r4, #32]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007ea4:	69e1      	ldr	r1, [r4, #28]
 8007ea6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007eaa:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007eac:	2d00      	cmp	r5, #0
 8007eae:	d060      	beq.n	8007f72 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007eb0:	f7ff ff4c 	bl	8007d4c <HAL_RCC_GetSysClockFreq>
 8007eb4:	4b6c      	ldr	r3, [pc, #432]	; (8008068 <HAL_RCC_OscConfig+0x268>)
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007ebc:	4a6b      	ldr	r2, [pc, #428]	; (800806c <HAL_RCC_OscConfig+0x26c>)
 8007ebe:	5cd3      	ldrb	r3, [r2, r3]
 8007ec0:	f003 031f 	and.w	r3, r3, #31
 8007ec4:	40d8      	lsrs	r0, r3
 8007ec6:	4b6a      	ldr	r3, [pc, #424]	; (8008070 <HAL_RCC_OscConfig+0x270>)
 8007ec8:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8007eca:	4b6a      	ldr	r3, [pc, #424]	; (8008074 <HAL_RCC_OscConfig+0x274>)
 8007ecc:	6818      	ldr	r0, [r3, #0]
 8007ece:	f7fe ff3d 	bl	8006d4c <HAL_InitTick>
        if(status != HAL_OK)
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	f040 829e 	bne.w	8008414 <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ed8:	6823      	ldr	r3, [r4, #0]
 8007eda:	f013 0f01 	tst.w	r3, #1
 8007ede:	f000 8081 	beq.w	8007fe4 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007ee2:	2d08      	cmp	r5, #8
 8007ee4:	d075      	beq.n	8007fd2 <HAL_RCC_OscConfig+0x1d2>
 8007ee6:	2d0c      	cmp	r5, #12
 8007ee8:	d071      	beq.n	8007fce <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007eea:	6863      	ldr	r3, [r4, #4]
 8007eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef0:	f000 8097 	beq.w	8008022 <HAL_RCC_OscConfig+0x222>
 8007ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ef8:	f000 8099 	beq.w	800802e <HAL_RCC_OscConfig+0x22e>
 8007efc:	4b5a      	ldr	r3, [pc, #360]	; (8008068 <HAL_RCC_OscConfig+0x268>)
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007f0c:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f0e:	6863      	ldr	r3, [r4, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 8099 	beq.w	8008048 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8007f16:	f7fe ff5b 	bl	8006dd0 <HAL_GetTick>
 8007f1a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f1c:	4b52      	ldr	r3, [pc, #328]	; (8008068 <HAL_RCC_OscConfig+0x268>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007f24:	d15e      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f26:	f7fe ff53 	bl	8006dd0 <HAL_GetTick>
 8007f2a:	1bc0      	subs	r0, r0, r7
 8007f2c:	2864      	cmp	r0, #100	; 0x64
 8007f2e:	d9f5      	bls.n	8007f1c <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8007f30:	2003      	movs	r0, #3
 8007f32:	e26f      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007f34:	4b4c      	ldr	r3, [pc, #304]	; (8008068 <HAL_RCC_OscConfig+0x268>)
 8007f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f3a:	091b      	lsrs	r3, r3, #4
 8007f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f40:	e7a0      	b.n	8007e84 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007f42:	f7ff febb 	bl	8007cbc <RCC_SetFlashLatencyFromMSIRange>
 8007f46:	2800      	cmp	r0, #0
 8007f48:	f040 825d 	bne.w	8008406 <HAL_RCC_OscConfig+0x606>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f4c:	4b46      	ldr	r3, [pc, #280]	; (8008068 <HAL_RCC_OscConfig+0x268>)
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	f042 0208 	orr.w	r2, r2, #8
 8007f54:	601a      	str	r2, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007f5c:	6a21      	ldr	r1, [r4, #32]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007f62:	685a      	ldr	r2, [r3, #4]
 8007f64:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007f68:	69e1      	ldr	r1, [r4, #28]
 8007f6a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007f6e:	605a      	str	r2, [r3, #4]
 8007f70:	e79e      	b.n	8007eb0 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007f72:	6a20      	ldr	r0, [r4, #32]
 8007f74:	f7ff fea2 	bl	8007cbc <RCC_SetFlashLatencyFromMSIRange>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	d099      	beq.n	8007eb0 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8007f7c:	2001      	movs	r0, #1
 8007f7e:	e249      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f80:	4b39      	ldr	r3, [pc, #228]	; (8008068 <HAL_RCC_OscConfig+0x268>)
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	f042 0208 	orr.w	r2, r2, #8
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007f90:	6a21      	ldr	r1, [r4, #32]
 8007f92:	430a      	orrs	r2, r1
 8007f94:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007f9c:	69e1      	ldr	r1, [r4, #28]
 8007f9e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007fa2:	605a      	str	r2, [r3, #4]
 8007fa4:	e798      	b.n	8007ed8 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 8007fa6:	4a30      	ldr	r2, [pc, #192]	; (8008068 <HAL_RCC_OscConfig+0x268>)
 8007fa8:	6813      	ldr	r3, [r2, #0]
 8007faa:	f023 0301 	bic.w	r3, r3, #1
 8007fae:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007fb0:	f7fe ff0e 	bl	8006dd0 <HAL_GetTick>
 8007fb4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007fb6:	4b2c      	ldr	r3, [pc, #176]	; (8008068 <HAL_RCC_OscConfig+0x268>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f013 0f02 	tst.w	r3, #2
 8007fbe:	d08b      	beq.n	8007ed8 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007fc0:	f7fe ff06 	bl	8006dd0 <HAL_GetTick>
 8007fc4:	1bc0      	subs	r0, r0, r7
 8007fc6:	2802      	cmp	r0, #2
 8007fc8:	d9f5      	bls.n	8007fb6 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8007fca:	2003      	movs	r0, #3
 8007fcc:	e222      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007fce:	2e03      	cmp	r6, #3
 8007fd0:	d18b      	bne.n	8007eea <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fd2:	4b25      	ldr	r3, [pc, #148]	; (8008068 <HAL_RCC_OscConfig+0x268>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007fda:	d003      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x1e4>
 8007fdc:	6863      	ldr	r3, [r4, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f000 8213 	beq.w	800840a <HAL_RCC_OscConfig+0x60a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fe4:	6823      	ldr	r3, [r4, #0]
 8007fe6:	f013 0f02 	tst.w	r3, #2
 8007fea:	d058      	beq.n	800809e <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007fec:	2d04      	cmp	r5, #4
 8007fee:	d045      	beq.n	800807c <HAL_RCC_OscConfig+0x27c>
 8007ff0:	2d0c      	cmp	r5, #12
 8007ff2:	d041      	beq.n	8008078 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007ff4:	68e3      	ldr	r3, [r4, #12]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d077      	beq.n	80080ea <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 8007ffa:	4a1b      	ldr	r2, [pc, #108]	; (8008068 <HAL_RCC_OscConfig+0x268>)
 8007ffc:	6813      	ldr	r3, [r2, #0]
 8007ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008002:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008004:	f7fe fee4 	bl	8006dd0 <HAL_GetTick>
 8008008:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800800a:	4b17      	ldr	r3, [pc, #92]	; (8008068 <HAL_RCC_OscConfig+0x268>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008012:	d161      	bne.n	80080d8 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008014:	f7fe fedc 	bl	8006dd0 <HAL_GetTick>
 8008018:	1b80      	subs	r0, r0, r6
 800801a:	2802      	cmp	r0, #2
 800801c:	d9f5      	bls.n	800800a <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 800801e:	2003      	movs	r0, #3
 8008020:	e1f8      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008022:	4a11      	ldr	r2, [pc, #68]	; (8008068 <HAL_RCC_OscConfig+0x268>)
 8008024:	6813      	ldr	r3, [r2, #0]
 8008026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800802a:	6013      	str	r3, [r2, #0]
 800802c:	e76f      	b.n	8007f0e <HAL_RCC_OscConfig+0x10e>
 800802e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008032:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	e762      	b.n	8007f0e <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8008048:	f7fe fec2 	bl	8006dd0 <HAL_GetTick>
 800804c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800804e:	4b06      	ldr	r3, [pc, #24]	; (8008068 <HAL_RCC_OscConfig+0x268>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008056:	d0c5      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008058:	f7fe feba 	bl	8006dd0 <HAL_GetTick>
 800805c:	1bc0      	subs	r0, r0, r7
 800805e:	2864      	cmp	r0, #100	; 0x64
 8008060:	d9f5      	bls.n	800804e <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 8008062:	2003      	movs	r0, #3
 8008064:	e1d6      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
 8008066:	bf00      	nop
 8008068:	40021000 	.word	0x40021000
 800806c:	0800e200 	.word	0x0800e200
 8008070:	20000084 	.word	0x20000084
 8008074:	2000008c 	.word	0x2000008c
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008078:	2e02      	cmp	r6, #2
 800807a:	d1bb      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800807c:	4b95      	ldr	r3, [pc, #596]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008084:	d003      	beq.n	800808e <HAL_RCC_OscConfig+0x28e>
 8008086:	68e3      	ldr	r3, [r4, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 81c0 	beq.w	800840e <HAL_RCC_OscConfig+0x60e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800808e:	4a91      	ldr	r2, [pc, #580]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 8008090:	6853      	ldr	r3, [r2, #4]
 8008092:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8008096:	6921      	ldr	r1, [r4, #16]
 8008098:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800809c:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	f013 0f08 	tst.w	r3, #8
 80080a4:	d04c      	beq.n	8008140 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80080a6:	6963      	ldr	r3, [r4, #20]
 80080a8:	b39b      	cbz	r3, 8008112 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 80080aa:	4a8a      	ldr	r2, [pc, #552]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 80080ac:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80080b0:	f043 0301 	orr.w	r3, r3, #1
 80080b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80080b8:	f7fe fe8a 	bl	8006dd0 <HAL_GetTick>
 80080bc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080be:	4b85      	ldr	r3, [pc, #532]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 80080c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080c4:	f013 0f02 	tst.w	r3, #2
 80080c8:	d13a      	bne.n	8008140 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080ca:	f7fe fe81 	bl	8006dd0 <HAL_GetTick>
 80080ce:	1b80      	subs	r0, r0, r6
 80080d0:	2802      	cmp	r0, #2
 80080d2:	d9f4      	bls.n	80080be <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 80080d4:	2003      	movs	r0, #3
 80080d6:	e19d      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080d8:	4a7e      	ldr	r2, [pc, #504]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 80080da:	6853      	ldr	r3, [r2, #4]
 80080dc:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80080e0:	6921      	ldr	r1, [r4, #16]
 80080e2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80080e6:	6053      	str	r3, [r2, #4]
 80080e8:	e7d9      	b.n	800809e <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 80080ea:	4a7a      	ldr	r2, [pc, #488]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 80080ec:	6813      	ldr	r3, [r2, #0]
 80080ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080f2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80080f4:	f7fe fe6c 	bl	8006dd0 <HAL_GetTick>
 80080f8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80080fa:	4b76      	ldr	r3, [pc, #472]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008102:	d0cc      	beq.n	800809e <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008104:	f7fe fe64 	bl	8006dd0 <HAL_GetTick>
 8008108:	1b80      	subs	r0, r0, r6
 800810a:	2802      	cmp	r0, #2
 800810c:	d9f5      	bls.n	80080fa <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 800810e:	2003      	movs	r0, #3
 8008110:	e180      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_LSI_DISABLE();
 8008112:	4a70      	ldr	r2, [pc, #448]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 8008114:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8008118:	f023 0301 	bic.w	r3, r3, #1
 800811c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8008120:	f7fe fe56 	bl	8006dd0 <HAL_GetTick>
 8008124:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008126:	4b6b      	ldr	r3, [pc, #428]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 8008128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800812c:	f013 0f02 	tst.w	r3, #2
 8008130:	d006      	beq.n	8008140 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008132:	f7fe fe4d 	bl	8006dd0 <HAL_GetTick>
 8008136:	1b80      	subs	r0, r0, r6
 8008138:	2802      	cmp	r0, #2
 800813a:	d9f4      	bls.n	8008126 <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 800813c:	2003      	movs	r0, #3
 800813e:	e169      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	f013 0f04 	tst.w	r3, #4
 8008146:	d07a      	beq.n	800823e <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008148:	4b62      	ldr	r3, [pc, #392]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 800814a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800814c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008150:	d136      	bne.n	80081c0 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008152:	4b60      	ldr	r3, [pc, #384]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 8008154:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008156:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800815a:	659a      	str	r2, [r3, #88]	; 0x58
 800815c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800815e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008162:	9301      	str	r3, [sp, #4]
 8008164:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008166:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008168:	4b5b      	ldr	r3, [pc, #364]	; (80082d8 <HAL_RCC_OscConfig+0x4d8>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008170:	d028      	beq.n	80081c4 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008172:	68a3      	ldr	r3, [r4, #8]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d039      	beq.n	80081ec <HAL_RCC_OscConfig+0x3ec>
 8008178:	2b05      	cmp	r3, #5
 800817a:	d03f      	beq.n	80081fc <HAL_RCC_OscConfig+0x3fc>
 800817c:	4b55      	ldr	r3, [pc, #340]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 800817e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008182:	f022 0201 	bic.w	r2, r2, #1
 8008186:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800818a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800818e:	f022 0204 	bic.w	r2, r2, #4
 8008192:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008196:	68a3      	ldr	r3, [r4, #8]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d03d      	beq.n	8008218 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 800819c:	f7fe fe18 	bl	8006dd0 <HAL_GetTick>
 80081a0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081a2:	4b4c      	ldr	r3, [pc, #304]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 80081a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081a8:	f013 0f02 	tst.w	r3, #2
 80081ac:	d146      	bne.n	800823c <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081ae:	f7fe fe0f 	bl	8006dd0 <HAL_GetTick>
 80081b2:	1bc0      	subs	r0, r0, r7
 80081b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80081b8:	4298      	cmp	r0, r3
 80081ba:	d9f2      	bls.n	80081a2 <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 80081bc:	2003      	movs	r0, #3
 80081be:	e129      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
    FlagStatus       pwrclkchanged = RESET;
 80081c0:	2600      	movs	r6, #0
 80081c2:	e7d1      	b.n	8008168 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081c4:	4a44      	ldr	r2, [pc, #272]	; (80082d8 <HAL_RCC_OscConfig+0x4d8>)
 80081c6:	6813      	ldr	r3, [r2, #0]
 80081c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081cc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80081ce:	f7fe fdff 	bl	8006dd0 <HAL_GetTick>
 80081d2:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081d4:	4b40      	ldr	r3, [pc, #256]	; (80082d8 <HAL_RCC_OscConfig+0x4d8>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80081dc:	d1c9      	bne.n	8008172 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081de:	f7fe fdf7 	bl	8006dd0 <HAL_GetTick>
 80081e2:	1bc0      	subs	r0, r0, r7
 80081e4:	2802      	cmp	r0, #2
 80081e6:	d9f5      	bls.n	80081d4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 80081e8:	2003      	movs	r0, #3
 80081ea:	e113      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081ec:	4a39      	ldr	r2, [pc, #228]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 80081ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80081f2:	f043 0301 	orr.w	r3, r3, #1
 80081f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80081fa:	e7cc      	b.n	8008196 <HAL_RCC_OscConfig+0x396>
 80081fc:	4b35      	ldr	r3, [pc, #212]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 80081fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008202:	f042 0204 	orr.w	r2, r2, #4
 8008206:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800820a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800820e:	f042 0201 	orr.w	r2, r2, #1
 8008212:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8008216:	e7be      	b.n	8008196 <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8008218:	f7fe fdda 	bl	8006dd0 <HAL_GetTick>
 800821c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800821e:	4b2d      	ldr	r3, [pc, #180]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 8008220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008224:	f013 0f02 	tst.w	r3, #2
 8008228:	d008      	beq.n	800823c <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800822a:	f7fe fdd1 	bl	8006dd0 <HAL_GetTick>
 800822e:	1bc0      	subs	r0, r0, r7
 8008230:	f241 3388 	movw	r3, #5000	; 0x1388
 8008234:	4298      	cmp	r0, r3
 8008236:	d9f2      	bls.n	800821e <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8008238:	2003      	movs	r0, #3
 800823a:	e0eb      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
    if(pwrclkchanged == SET)
 800823c:	bb6e      	cbnz	r6, 800829a <HAL_RCC_OscConfig+0x49a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800823e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 80e6 	beq.w	8008412 <HAL_RCC_OscConfig+0x612>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008246:	2b02      	cmp	r3, #2
 8008248:	d02d      	beq.n	80082a6 <HAL_RCC_OscConfig+0x4a6>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800824a:	2d0c      	cmp	r5, #12
 800824c:	f000 80e8 	beq.w	8008420 <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_PLL_DISABLE();
 8008250:	4b20      	ldr	r3, [pc, #128]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008258:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 8008260:	d104      	bne.n	800826c <HAL_RCC_OscConfig+0x46c>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008262:	4a1c      	ldr	r2, [pc, #112]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 8008264:	68d3      	ldr	r3, [r2, #12]
 8008266:	f023 0303 	bic.w	r3, r3, #3
 800826a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800826c:	4a19      	ldr	r2, [pc, #100]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 800826e:	68d3      	ldr	r3, [r2, #12]
 8008270:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008278:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800827a:	f7fe fda9 	bl	8006dd0 <HAL_GetTick>
 800827e:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008280:	4b14      	ldr	r3, [pc, #80]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008288:	f000 80b7 	beq.w	80083fa <HAL_RCC_OscConfig+0x5fa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800828c:	f7fe fda0 	bl	8006dd0 <HAL_GetTick>
 8008290:	1b00      	subs	r0, r0, r4
 8008292:	2802      	cmp	r0, #2
 8008294:	d9f4      	bls.n	8008280 <HAL_RCC_OscConfig+0x480>
            return HAL_TIMEOUT;
 8008296:	2003      	movs	r0, #3
 8008298:	e0bc      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_PWR_CLK_DISABLE();
 800829a:	4a0e      	ldr	r2, [pc, #56]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 800829c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800829e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082a2:	6593      	str	r3, [r2, #88]	; 0x58
 80082a4:	e7cb      	b.n	800823e <HAL_RCC_OscConfig+0x43e>
      pll_config = RCC->PLLCFGR;
 80082a6:	4b0b      	ldr	r3, [pc, #44]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 80082a8:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80082aa:	f003 0103 	and.w	r1, r3, #3
 80082ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80082b0:	4291      	cmp	r1, r2
 80082b2:	d013      	beq.n	80082dc <HAL_RCC_OscConfig+0x4dc>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80082b4:	2d0c      	cmp	r5, #12
 80082b6:	f000 80af 	beq.w	8008418 <HAL_RCC_OscConfig+0x618>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80082ba:	4b06      	ldr	r3, [pc, #24]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80082c2:	f040 80ab 	bne.w	800841c <HAL_RCC_OscConfig+0x61c>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80082c6:	4b03      	ldr	r3, [pc, #12]	; (80082d4 <HAL_RCC_OscConfig+0x4d4>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80082ce:	d031      	beq.n	8008334 <HAL_RCC_OscConfig+0x534>
            return HAL_ERROR;
 80082d0:	2001      	movs	r0, #1
 80082d2:	e09f      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
 80082d4:	40021000 	.word	0x40021000
 80082d8:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80082dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80082e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80082e2:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80082e4:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80082e8:	d1e4      	bne.n	80082b4 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80082ea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80082ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80082f0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80082f4:	d1de      	bne.n	80082b4 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80082f6:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80082fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80082fc:	3a07      	subs	r2, #7
 80082fe:	bf18      	it	ne
 8008300:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008302:	4291      	cmp	r1, r2
 8008304:	d1d6      	bne.n	80082b4 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008306:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800830a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800830c:	0852      	lsrs	r2, r2, #1
 800830e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008310:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8008314:	d1ce      	bne.n	80082b4 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008316:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800831a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800831c:	0852      	lsrs	r2, r2, #1
 800831e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008320:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8008324:	d1c6      	bne.n	80082b4 <HAL_RCC_OscConfig+0x4b4>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008326:	4b3f      	ldr	r3, [pc, #252]	; (8008424 <HAL_RCC_OscConfig+0x624>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800832e:	d04a      	beq.n	80083c6 <HAL_RCC_OscConfig+0x5c6>
  return HAL_OK;
 8008330:	2000      	movs	r0, #0
 8008332:	e06f      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_DISABLE();
 8008334:	4a3b      	ldr	r2, [pc, #236]	; (8008424 <HAL_RCC_OscConfig+0x624>)
 8008336:	6813      	ldr	r3, [r2, #0]
 8008338:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800833c:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 800833e:	f7fe fd47 	bl	8006dd0 <HAL_GetTick>
 8008342:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008344:	4b37      	ldr	r3, [pc, #220]	; (8008424 <HAL_RCC_OscConfig+0x624>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800834c:	d006      	beq.n	800835c <HAL_RCC_OscConfig+0x55c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800834e:	f7fe fd3f 	bl	8006dd0 <HAL_GetTick>
 8008352:	1b40      	subs	r0, r0, r5
 8008354:	2802      	cmp	r0, #2
 8008356:	d9f5      	bls.n	8008344 <HAL_RCC_OscConfig+0x544>
                return HAL_TIMEOUT;
 8008358:	2003      	movs	r0, #3
 800835a:	e05b      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800835c:	4a31      	ldr	r2, [pc, #196]	; (8008424 <HAL_RCC_OscConfig+0x624>)
 800835e:	68d3      	ldr	r3, [r2, #12]
 8008360:	4931      	ldr	r1, [pc, #196]	; (8008428 <HAL_RCC_OscConfig+0x628>)
 8008362:	4019      	ands	r1, r3
 8008364:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008366:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008368:	3801      	subs	r0, #1
 800836a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800836e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008370:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008374:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008376:	0840      	lsrs	r0, r0, #1
 8008378:	3801      	subs	r0, #1
 800837a:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 800837e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008380:	0840      	lsrs	r0, r0, #1
 8008382:	3801      	subs	r0, #1
 8008384:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8008388:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800838a:	0900      	lsrs	r0, r0, #4
 800838c:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 8008390:	4319      	orrs	r1, r3
 8008392:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8008394:	6813      	ldr	r3, [r2, #0]
 8008396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800839a:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800839c:	68d3      	ldr	r3, [r2, #12]
 800839e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083a2:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 80083a4:	f7fe fd14 	bl	8006dd0 <HAL_GetTick>
 80083a8:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083aa:	4b1e      	ldr	r3, [pc, #120]	; (8008424 <HAL_RCC_OscConfig+0x624>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80083b2:	d106      	bne.n	80083c2 <HAL_RCC_OscConfig+0x5c2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083b4:	f7fe fd0c 	bl	8006dd0 <HAL_GetTick>
 80083b8:	1b00      	subs	r0, r0, r4
 80083ba:	2802      	cmp	r0, #2
 80083bc:	d9f5      	bls.n	80083aa <HAL_RCC_OscConfig+0x5aa>
                return HAL_TIMEOUT;
 80083be:	2003      	movs	r0, #3
 80083c0:	e028      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 80083c2:	2000      	movs	r0, #0
 80083c4:	e026      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
          __HAL_RCC_PLL_ENABLE();
 80083c6:	4b17      	ldr	r3, [pc, #92]	; (8008424 <HAL_RCC_OscConfig+0x624>)
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80083ce:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80083d0:	68da      	ldr	r2, [r3, #12]
 80083d2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80083d6:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 80083d8:	f7fe fcfa 	bl	8006dd0 <HAL_GetTick>
 80083dc:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083de:	4b11      	ldr	r3, [pc, #68]	; (8008424 <HAL_RCC_OscConfig+0x624>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80083e6:	d106      	bne.n	80083f6 <HAL_RCC_OscConfig+0x5f6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083e8:	f7fe fcf2 	bl	8006dd0 <HAL_GetTick>
 80083ec:	1b03      	subs	r3, r0, r4
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d9f5      	bls.n	80083de <HAL_RCC_OscConfig+0x5de>
              return HAL_TIMEOUT;
 80083f2:	2003      	movs	r0, #3
 80083f4:	e00e      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 80083f6:	2000      	movs	r0, #0
 80083f8:	e00c      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
 80083fa:	2000      	movs	r0, #0
 80083fc:	e00a      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
    return HAL_ERROR;
 80083fe:	2001      	movs	r0, #1
}
 8008400:	4770      	bx	lr
        return HAL_ERROR;
 8008402:	2001      	movs	r0, #1
 8008404:	e006      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 8008406:	2001      	movs	r0, #1
 8008408:	e004      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 800840a:	2001      	movs	r0, #1
 800840c:	e002      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 800840e:	2001      	movs	r0, #1
 8008410:	e000      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8008412:	2000      	movs	r0, #0
}
 8008414:	b003      	add	sp, #12
 8008416:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8008418:	2001      	movs	r0, #1
 800841a:	e7fb      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 800841c:	2001      	movs	r0, #1
 800841e:	e7f9      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8008420:	2001      	movs	r0, #1
 8008422:	e7f7      	b.n	8008414 <HAL_RCC_OscConfig+0x614>
 8008424:	40021000 	.word	0x40021000
 8008428:	f99d808c 	.word	0xf99d808c

0800842c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800842c:	2800      	cmp	r0, #0
 800842e:	f000 8098 	beq.w	8008562 <HAL_RCC_ClockConfig+0x136>
{
 8008432:	b570      	push	{r4, r5, r6, lr}
 8008434:	460c      	mov	r4, r1
 8008436:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008438:	4b4e      	ldr	r3, [pc, #312]	; (8008574 <HAL_RCC_ClockConfig+0x148>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 0307 	and.w	r3, r3, #7
 8008440:	428b      	cmp	r3, r1
 8008442:	d20b      	bcs.n	800845c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008444:	4a4b      	ldr	r2, [pc, #300]	; (8008574 <HAL_RCC_ClockConfig+0x148>)
 8008446:	6813      	ldr	r3, [r2, #0]
 8008448:	f023 0307 	bic.w	r3, r3, #7
 800844c:	430b      	orrs	r3, r1
 800844e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008450:	6813      	ldr	r3, [r2, #0]
 8008452:	f003 0307 	and.w	r3, r3, #7
 8008456:	428b      	cmp	r3, r1
 8008458:	f040 8085 	bne.w	8008566 <HAL_RCC_ClockConfig+0x13a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	f013 0f01 	tst.w	r3, #1
 8008462:	d039      	beq.n	80084d8 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008464:	686b      	ldr	r3, [r5, #4]
 8008466:	2b03      	cmp	r3, #3
 8008468:	d009      	beq.n	800847e <HAL_RCC_ClockConfig+0x52>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800846a:	2b02      	cmp	r3, #2
 800846c:	d026      	beq.n	80084bc <HAL_RCC_ClockConfig+0x90>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800846e:	bb63      	cbnz	r3, 80084ca <HAL_RCC_ClockConfig+0x9e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008470:	4a41      	ldr	r2, [pc, #260]	; (8008578 <HAL_RCC_ClockConfig+0x14c>)
 8008472:	6812      	ldr	r2, [r2, #0]
 8008474:	f012 0f02 	tst.w	r2, #2
 8008478:	d106      	bne.n	8008488 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 800847a:	2001      	movs	r0, #1
 800847c:	e070      	b.n	8008560 <HAL_RCC_ClockConfig+0x134>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800847e:	4a3e      	ldr	r2, [pc, #248]	; (8008578 <HAL_RCC_ClockConfig+0x14c>)
 8008480:	6812      	ldr	r2, [r2, #0]
 8008482:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8008486:	d070      	beq.n	800856a <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008488:	493b      	ldr	r1, [pc, #236]	; (8008578 <HAL_RCC_ClockConfig+0x14c>)
 800848a:	688a      	ldr	r2, [r1, #8]
 800848c:	f022 0203 	bic.w	r2, r2, #3
 8008490:	4313      	orrs	r3, r2
 8008492:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8008494:	f7fe fc9c 	bl	8006dd0 <HAL_GetTick>
 8008498:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800849a:	4b37      	ldr	r3, [pc, #220]	; (8008578 <HAL_RCC_ClockConfig+0x14c>)
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f003 030c 	and.w	r3, r3, #12
 80084a2:	686a      	ldr	r2, [r5, #4]
 80084a4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80084a8:	d016      	beq.n	80084d8 <HAL_RCC_ClockConfig+0xac>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084aa:	f7fe fc91 	bl	8006dd0 <HAL_GetTick>
 80084ae:	1b80      	subs	r0, r0, r6
 80084b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80084b4:	4298      	cmp	r0, r3
 80084b6:	d9f0      	bls.n	800849a <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 80084b8:	2003      	movs	r0, #3
 80084ba:	e051      	b.n	8008560 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80084bc:	4a2e      	ldr	r2, [pc, #184]	; (8008578 <HAL_RCC_ClockConfig+0x14c>)
 80084be:	6812      	ldr	r2, [r2, #0]
 80084c0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80084c4:	d1e0      	bne.n	8008488 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 80084c6:	2001      	movs	r0, #1
 80084c8:	e04a      	b.n	8008560 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084ca:	4a2b      	ldr	r2, [pc, #172]	; (8008578 <HAL_RCC_ClockConfig+0x14c>)
 80084cc:	6812      	ldr	r2, [r2, #0]
 80084ce:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80084d2:	d1d9      	bne.n	8008488 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 80084d4:	2001      	movs	r0, #1
 80084d6:	e043      	b.n	8008560 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084d8:	682b      	ldr	r3, [r5, #0]
 80084da:	f013 0f02 	tst.w	r3, #2
 80084de:	d006      	beq.n	80084ee <HAL_RCC_ClockConfig+0xc2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084e0:	4a25      	ldr	r2, [pc, #148]	; (8008578 <HAL_RCC_ClockConfig+0x14c>)
 80084e2:	6893      	ldr	r3, [r2, #8]
 80084e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084e8:	68a9      	ldr	r1, [r5, #8]
 80084ea:	430b      	orrs	r3, r1
 80084ec:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80084ee:	4b21      	ldr	r3, [pc, #132]	; (8008574 <HAL_RCC_ClockConfig+0x148>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0307 	and.w	r3, r3, #7
 80084f6:	42a3      	cmp	r3, r4
 80084f8:	d90a      	bls.n	8008510 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084fa:	4a1e      	ldr	r2, [pc, #120]	; (8008574 <HAL_RCC_ClockConfig+0x148>)
 80084fc:	6813      	ldr	r3, [r2, #0]
 80084fe:	f023 0307 	bic.w	r3, r3, #7
 8008502:	4323      	orrs	r3, r4
 8008504:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008506:	6813      	ldr	r3, [r2, #0]
 8008508:	f003 0307 	and.w	r3, r3, #7
 800850c:	42a3      	cmp	r3, r4
 800850e:	d12e      	bne.n	800856e <HAL_RCC_ClockConfig+0x142>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008510:	682b      	ldr	r3, [r5, #0]
 8008512:	f013 0f04 	tst.w	r3, #4
 8008516:	d006      	beq.n	8008526 <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008518:	4a17      	ldr	r2, [pc, #92]	; (8008578 <HAL_RCC_ClockConfig+0x14c>)
 800851a:	6893      	ldr	r3, [r2, #8]
 800851c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008520:	68e9      	ldr	r1, [r5, #12]
 8008522:	430b      	orrs	r3, r1
 8008524:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008526:	682b      	ldr	r3, [r5, #0]
 8008528:	f013 0f08 	tst.w	r3, #8
 800852c:	d007      	beq.n	800853e <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800852e:	4a12      	ldr	r2, [pc, #72]	; (8008578 <HAL_RCC_ClockConfig+0x14c>)
 8008530:	6893      	ldr	r3, [r2, #8]
 8008532:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8008536:	6929      	ldr	r1, [r5, #16]
 8008538:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800853c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800853e:	f7ff fc05 	bl	8007d4c <HAL_RCC_GetSysClockFreq>
 8008542:	4b0d      	ldr	r3, [pc, #52]	; (8008578 <HAL_RCC_ClockConfig+0x14c>)
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800854a:	4a0c      	ldr	r2, [pc, #48]	; (800857c <HAL_RCC_ClockConfig+0x150>)
 800854c:	5cd3      	ldrb	r3, [r2, r3]
 800854e:	f003 031f 	and.w	r3, r3, #31
 8008552:	40d8      	lsrs	r0, r3
 8008554:	4b0a      	ldr	r3, [pc, #40]	; (8008580 <HAL_RCC_ClockConfig+0x154>)
 8008556:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8008558:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <HAL_RCC_ClockConfig+0x158>)
 800855a:	6818      	ldr	r0, [r3, #0]
 800855c:	f7fe fbf6 	bl	8006d4c <HAL_InitTick>
}
 8008560:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8008562:	2001      	movs	r0, #1
}
 8008564:	4770      	bx	lr
      return HAL_ERROR;
 8008566:	2001      	movs	r0, #1
 8008568:	e7fa      	b.n	8008560 <HAL_RCC_ClockConfig+0x134>
        return HAL_ERROR;
 800856a:	2001      	movs	r0, #1
 800856c:	e7f8      	b.n	8008560 <HAL_RCC_ClockConfig+0x134>
      return HAL_ERROR;
 800856e:	2001      	movs	r0, #1
 8008570:	e7f6      	b.n	8008560 <HAL_RCC_ClockConfig+0x134>
 8008572:	bf00      	nop
 8008574:	40022000 	.word	0x40022000
 8008578:	40021000 	.word	0x40021000
 800857c:	0800e200 	.word	0x0800e200
 8008580:	20000084 	.word	0x20000084
 8008584:	2000008c 	.word	0x2000008c

08008588 <HAL_RCC_GetHCLKFreq>:
}
 8008588:	4b01      	ldr	r3, [pc, #4]	; (8008590 <HAL_RCC_GetHCLKFreq+0x8>)
 800858a:	6818      	ldr	r0, [r3, #0]
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	20000084 	.word	0x20000084

08008594 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008596:	4604      	mov	r4, r0
 8008598:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800859a:	4b59      	ldr	r3, [pc, #356]	; (8008700 <RCCEx_PLLSAI1_Config+0x16c>)
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	f013 0f03 	tst.w	r3, #3
 80085a2:	d018      	beq.n	80085d6 <RCCEx_PLLSAI1_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80085a4:	4b56      	ldr	r3, [pc, #344]	; (8008700 <RCCEx_PLLSAI1_Config+0x16c>)
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	f003 0303 	and.w	r3, r3, #3
 80085ac:	6802      	ldr	r2, [r0, #0]
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d002      	beq.n	80085b8 <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80085b2:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 80085b4:	4628      	mov	r0, r5
 80085b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80085b8:	2a00      	cmp	r2, #0
 80085ba:	f000 809e 	beq.w	80086fa <RCCEx_PLLSAI1_Config+0x166>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80085be:	4b50      	ldr	r3, [pc, #320]	; (8008700 <RCCEx_PLLSAI1_Config+0x16c>)
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80085c6:	3301      	adds	r3, #1
 80085c8:	6842      	ldr	r2, [r0, #4]
       ||
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d001      	beq.n	80085d2 <RCCEx_PLLSAI1_Config+0x3e>
      status = HAL_ERROR;
 80085ce:	2501      	movs	r5, #1
 80085d0:	e7f0      	b.n	80085b4 <RCCEx_PLLSAI1_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 80085d2:	2500      	movs	r5, #0
 80085d4:	e009      	b.n	80085ea <RCCEx_PLLSAI1_Config+0x56>
    switch(PllSai1->PLLSAI1Source)
 80085d6:	6803      	ldr	r3, [r0, #0]
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d057      	beq.n	800868c <RCCEx_PLLSAI1_Config+0xf8>
 80085dc:	2b03      	cmp	r3, #3
 80085de:	d05c      	beq.n	800869a <RCCEx_PLLSAI1_Config+0x106>
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d042      	beq.n	800866a <RCCEx_PLLSAI1_Config+0xd6>
 80085e4:	2501      	movs	r5, #1
  if(status == HAL_OK)
 80085e6:	2d00      	cmp	r5, #0
 80085e8:	d1e4      	bne.n	80085b4 <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 80085ea:	4a45      	ldr	r2, [pc, #276]	; (8008700 <RCCEx_PLLSAI1_Config+0x16c>)
 80085ec:	6813      	ldr	r3, [r2, #0]
 80085ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80085f2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80085f4:	f7fe fbec 	bl	8006dd0 <HAL_GetTick>
 80085f8:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80085fa:	4b41      	ldr	r3, [pc, #260]	; (8008700 <RCCEx_PLLSAI1_Config+0x16c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8008602:	d005      	beq.n	8008610 <RCCEx_PLLSAI1_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008604:	f7fe fbe4 	bl	8006dd0 <HAL_GetTick>
 8008608:	1b83      	subs	r3, r0, r6
 800860a:	2b02      	cmp	r3, #2
 800860c:	d9f5      	bls.n	80085fa <RCCEx_PLLSAI1_Config+0x66>
        status = HAL_TIMEOUT;
 800860e:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8008610:	2d00      	cmp	r5, #0
 8008612:	d1cf      	bne.n	80085b4 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8008614:	2f00      	cmp	r7, #0
 8008616:	d14e      	bne.n	80086b6 <RCCEx_PLLSAI1_Config+0x122>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008618:	4939      	ldr	r1, [pc, #228]	; (8008700 <RCCEx_PLLSAI1_Config+0x16c>)
 800861a:	690b      	ldr	r3, [r1, #16]
 800861c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008624:	68a0      	ldr	r0, [r4, #8]
 8008626:	68e2      	ldr	r2, [r4, #12]
 8008628:	0912      	lsrs	r2, r2, #4
 800862a:	0452      	lsls	r2, r2, #17
 800862c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8008630:	4313      	orrs	r3, r2
 8008632:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8008634:	4a32      	ldr	r2, [pc, #200]	; (8008700 <RCCEx_PLLSAI1_Config+0x16c>)
 8008636:	6813      	ldr	r3, [r2, #0]
 8008638:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800863c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800863e:	f7fe fbc7 	bl	8006dd0 <HAL_GetTick>
 8008642:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008644:	4b2e      	ldr	r3, [pc, #184]	; (8008700 <RCCEx_PLLSAI1_Config+0x16c>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800864c:	d105      	bne.n	800865a <RCCEx_PLLSAI1_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800864e:	f7fe fbbf 	bl	8006dd0 <HAL_GetTick>
 8008652:	1b83      	subs	r3, r0, r6
 8008654:	2b02      	cmp	r3, #2
 8008656:	d9f5      	bls.n	8008644 <RCCEx_PLLSAI1_Config+0xb0>
          status = HAL_TIMEOUT;
 8008658:	2503      	movs	r5, #3
      if(status == HAL_OK)
 800865a:	2d00      	cmp	r5, #0
 800865c:	d1aa      	bne.n	80085b4 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800865e:	4a28      	ldr	r2, [pc, #160]	; (8008700 <RCCEx_PLLSAI1_Config+0x16c>)
 8008660:	6913      	ldr	r3, [r2, #16]
 8008662:	69a1      	ldr	r1, [r4, #24]
 8008664:	430b      	orrs	r3, r1
 8008666:	6113      	str	r3, [r2, #16]
 8008668:	e7a4      	b.n	80085b4 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800866a:	4a25      	ldr	r2, [pc, #148]	; (8008700 <RCCEx_PLLSAI1_Config+0x16c>)
 800866c:	6812      	ldr	r2, [r2, #0]
 800866e:	f012 0f02 	tst.w	r2, #2
 8008672:	d01e      	beq.n	80086b2 <RCCEx_PLLSAI1_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008674:	4822      	ldr	r0, [pc, #136]	; (8008700 <RCCEx_PLLSAI1_Config+0x16c>)
 8008676:	68c2      	ldr	r2, [r0, #12]
 8008678:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800867c:	6861      	ldr	r1, [r4, #4]
 800867e:	3901      	subs	r1, #1
 8008680:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8008684:	4313      	orrs	r3, r2
 8008686:	60c3      	str	r3, [r0, #12]
 8008688:	2500      	movs	r5, #0
 800868a:	e7ac      	b.n	80085e6 <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800868c:	4a1c      	ldr	r2, [pc, #112]	; (8008700 <RCCEx_PLLSAI1_Config+0x16c>)
 800868e:	6812      	ldr	r2, [r2, #0]
 8008690:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8008694:	d1ee      	bne.n	8008674 <RCCEx_PLLSAI1_Config+0xe0>
        status = HAL_ERROR;
 8008696:	2501      	movs	r5, #1
 8008698:	e7a5      	b.n	80085e6 <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800869a:	4a19      	ldr	r2, [pc, #100]	; (8008700 <RCCEx_PLLSAI1_Config+0x16c>)
 800869c:	6812      	ldr	r2, [r2, #0]
 800869e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80086a2:	d1e7      	bne.n	8008674 <RCCEx_PLLSAI1_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80086a4:	4a16      	ldr	r2, [pc, #88]	; (8008700 <RCCEx_PLLSAI1_Config+0x16c>)
 80086a6:	6812      	ldr	r2, [r2, #0]
 80086a8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80086ac:	d1e2      	bne.n	8008674 <RCCEx_PLLSAI1_Config+0xe0>
          status = HAL_ERROR;
 80086ae:	2501      	movs	r5, #1
 80086b0:	e799      	b.n	80085e6 <RCCEx_PLLSAI1_Config+0x52>
        status = HAL_ERROR;
 80086b2:	2501      	movs	r5, #1
 80086b4:	e797      	b.n	80085e6 <RCCEx_PLLSAI1_Config+0x52>
      else if(Divider == DIVIDER_Q_UPDATE)
 80086b6:	2f01      	cmp	r7, #1
 80086b8:	d00f      	beq.n	80086da <RCCEx_PLLSAI1_Config+0x146>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80086ba:	4811      	ldr	r0, [pc, #68]	; (8008700 <RCCEx_PLLSAI1_Config+0x16c>)
 80086bc:	6902      	ldr	r2, [r0, #16]
 80086be:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80086c2:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80086c6:	68a1      	ldr	r1, [r4, #8]
 80086c8:	6963      	ldr	r3, [r4, #20]
 80086ca:	085b      	lsrs	r3, r3, #1
 80086cc:	3b01      	subs	r3, #1
 80086ce:	065b      	lsls	r3, r3, #25
 80086d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80086d4:	431a      	orrs	r2, r3
 80086d6:	6102      	str	r2, [r0, #16]
 80086d8:	e7ac      	b.n	8008634 <RCCEx_PLLSAI1_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80086da:	4809      	ldr	r0, [pc, #36]	; (8008700 <RCCEx_PLLSAI1_Config+0x16c>)
 80086dc:	6902      	ldr	r2, [r0, #16]
 80086de:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80086e2:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80086e6:	68a1      	ldr	r1, [r4, #8]
 80086e8:	6923      	ldr	r3, [r4, #16]
 80086ea:	085b      	lsrs	r3, r3, #1
 80086ec:	3b01      	subs	r3, #1
 80086ee:	055b      	lsls	r3, r3, #21
 80086f0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80086f4:	431a      	orrs	r2, r3
 80086f6:	6102      	str	r2, [r0, #16]
 80086f8:	e79c      	b.n	8008634 <RCCEx_PLLSAI1_Config+0xa0>
      status = HAL_ERROR;
 80086fa:	2501      	movs	r5, #1
 80086fc:	e75a      	b.n	80085b4 <RCCEx_PLLSAI1_Config+0x20>
 80086fe:	bf00      	nop
 8008700:	40021000 	.word	0x40021000

08008704 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008706:	4604      	mov	r4, r0
 8008708:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800870a:	4b50      	ldr	r3, [pc, #320]	; (800884c <RCCEx_PLLSAI2_Config+0x148>)
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	f013 0f03 	tst.w	r3, #3
 8008712:	d018      	beq.n	8008746 <RCCEx_PLLSAI2_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008714:	4b4d      	ldr	r3, [pc, #308]	; (800884c <RCCEx_PLLSAI2_Config+0x148>)
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	f003 0303 	and.w	r3, r3, #3
 800871c:	6802      	ldr	r2, [r0, #0]
 800871e:	4293      	cmp	r3, r2
 8008720:	d002      	beq.n	8008728 <RCCEx_PLLSAI2_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8008722:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8008724:	4628      	mov	r0, r5
 8008726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8008728:	2a00      	cmp	r2, #0
 800872a:	f000 808c 	beq.w	8008846 <RCCEx_PLLSAI2_Config+0x142>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800872e:	4b47      	ldr	r3, [pc, #284]	; (800884c <RCCEx_PLLSAI2_Config+0x148>)
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008736:	3301      	adds	r3, #1
 8008738:	6842      	ldr	r2, [r0, #4]
       ||
 800873a:	4293      	cmp	r3, r2
 800873c:	d001      	beq.n	8008742 <RCCEx_PLLSAI2_Config+0x3e>
      status = HAL_ERROR;
 800873e:	2501      	movs	r5, #1
 8008740:	e7f0      	b.n	8008724 <RCCEx_PLLSAI2_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 8008742:	2500      	movs	r5, #0
 8008744:	e009      	b.n	800875a <RCCEx_PLLSAI2_Config+0x56>
    switch(PllSai2->PLLSAI2Source)
 8008746:	6803      	ldr	r3, [r0, #0]
 8008748:	2b02      	cmp	r3, #2
 800874a:	d057      	beq.n	80087fc <RCCEx_PLLSAI2_Config+0xf8>
 800874c:	2b03      	cmp	r3, #3
 800874e:	d05c      	beq.n	800880a <RCCEx_PLLSAI2_Config+0x106>
 8008750:	2b01      	cmp	r3, #1
 8008752:	d042      	beq.n	80087da <RCCEx_PLLSAI2_Config+0xd6>
 8008754:	2501      	movs	r5, #1
  if(status == HAL_OK)
 8008756:	2d00      	cmp	r5, #0
 8008758:	d1e4      	bne.n	8008724 <RCCEx_PLLSAI2_Config+0x20>
    __HAL_RCC_PLLSAI2_DISABLE();
 800875a:	4a3c      	ldr	r2, [pc, #240]	; (800884c <RCCEx_PLLSAI2_Config+0x148>)
 800875c:	6813      	ldr	r3, [r2, #0]
 800875e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008762:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008764:	f7fe fb34 	bl	8006dd0 <HAL_GetTick>
 8008768:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800876a:	4b38      	ldr	r3, [pc, #224]	; (800884c <RCCEx_PLLSAI2_Config+0x148>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8008772:	d005      	beq.n	8008780 <RCCEx_PLLSAI2_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008774:	f7fe fb2c 	bl	8006dd0 <HAL_GetTick>
 8008778:	1b83      	subs	r3, r0, r6
 800877a:	2b02      	cmp	r3, #2
 800877c:	d9f5      	bls.n	800876a <RCCEx_PLLSAI2_Config+0x66>
        status = HAL_TIMEOUT;
 800877e:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8008780:	2d00      	cmp	r5, #0
 8008782:	d1cf      	bne.n	8008724 <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8008784:	2f00      	cmp	r7, #0
 8008786:	d14e      	bne.n	8008826 <RCCEx_PLLSAI2_Config+0x122>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008788:	4930      	ldr	r1, [pc, #192]	; (800884c <RCCEx_PLLSAI2_Config+0x148>)
 800878a:	694b      	ldr	r3, [r1, #20]
 800878c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008794:	68a0      	ldr	r0, [r4, #8]
 8008796:	68e2      	ldr	r2, [r4, #12]
 8008798:	0912      	lsrs	r2, r2, #4
 800879a:	0452      	lsls	r2, r2, #17
 800879c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80087a0:	4313      	orrs	r3, r2
 80087a2:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80087a4:	4a29      	ldr	r2, [pc, #164]	; (800884c <RCCEx_PLLSAI2_Config+0x148>)
 80087a6:	6813      	ldr	r3, [r2, #0]
 80087a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087ac:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80087ae:	f7fe fb0f 	bl	8006dd0 <HAL_GetTick>
 80087b2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80087b4:	4b25      	ldr	r3, [pc, #148]	; (800884c <RCCEx_PLLSAI2_Config+0x148>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80087bc:	d105      	bne.n	80087ca <RCCEx_PLLSAI2_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80087be:	f7fe fb07 	bl	8006dd0 <HAL_GetTick>
 80087c2:	1b83      	subs	r3, r0, r6
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d9f5      	bls.n	80087b4 <RCCEx_PLLSAI2_Config+0xb0>
          status = HAL_TIMEOUT;
 80087c8:	2503      	movs	r5, #3
      if(status == HAL_OK)
 80087ca:	2d00      	cmp	r5, #0
 80087cc:	d1aa      	bne.n	8008724 <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80087ce:	4a1f      	ldr	r2, [pc, #124]	; (800884c <RCCEx_PLLSAI2_Config+0x148>)
 80087d0:	6953      	ldr	r3, [r2, #20]
 80087d2:	6961      	ldr	r1, [r4, #20]
 80087d4:	430b      	orrs	r3, r1
 80087d6:	6153      	str	r3, [r2, #20]
 80087d8:	e7a4      	b.n	8008724 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80087da:	4a1c      	ldr	r2, [pc, #112]	; (800884c <RCCEx_PLLSAI2_Config+0x148>)
 80087dc:	6812      	ldr	r2, [r2, #0]
 80087de:	f012 0f02 	tst.w	r2, #2
 80087e2:	d01e      	beq.n	8008822 <RCCEx_PLLSAI2_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80087e4:	4819      	ldr	r0, [pc, #100]	; (800884c <RCCEx_PLLSAI2_Config+0x148>)
 80087e6:	68c2      	ldr	r2, [r0, #12]
 80087e8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80087ec:	6861      	ldr	r1, [r4, #4]
 80087ee:	3901      	subs	r1, #1
 80087f0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80087f4:	4313      	orrs	r3, r2
 80087f6:	60c3      	str	r3, [r0, #12]
 80087f8:	2500      	movs	r5, #0
 80087fa:	e7ac      	b.n	8008756 <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80087fc:	4a13      	ldr	r2, [pc, #76]	; (800884c <RCCEx_PLLSAI2_Config+0x148>)
 80087fe:	6812      	ldr	r2, [r2, #0]
 8008800:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8008804:	d1ee      	bne.n	80087e4 <RCCEx_PLLSAI2_Config+0xe0>
        status = HAL_ERROR;
 8008806:	2501      	movs	r5, #1
 8008808:	e7a5      	b.n	8008756 <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800880a:	4a10      	ldr	r2, [pc, #64]	; (800884c <RCCEx_PLLSAI2_Config+0x148>)
 800880c:	6812      	ldr	r2, [r2, #0]
 800880e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8008812:	d1e7      	bne.n	80087e4 <RCCEx_PLLSAI2_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008814:	4a0d      	ldr	r2, [pc, #52]	; (800884c <RCCEx_PLLSAI2_Config+0x148>)
 8008816:	6812      	ldr	r2, [r2, #0]
 8008818:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800881c:	d1e2      	bne.n	80087e4 <RCCEx_PLLSAI2_Config+0xe0>
          status = HAL_ERROR;
 800881e:	2501      	movs	r5, #1
 8008820:	e799      	b.n	8008756 <RCCEx_PLLSAI2_Config+0x52>
        status = HAL_ERROR;
 8008822:	2501      	movs	r5, #1
 8008824:	e797      	b.n	8008756 <RCCEx_PLLSAI2_Config+0x52>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008826:	4809      	ldr	r0, [pc, #36]	; (800884c <RCCEx_PLLSAI2_Config+0x148>)
 8008828:	6942      	ldr	r2, [r0, #20]
 800882a:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800882e:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8008832:	68a1      	ldr	r1, [r4, #8]
 8008834:	6923      	ldr	r3, [r4, #16]
 8008836:	085b      	lsrs	r3, r3, #1
 8008838:	3b01      	subs	r3, #1
 800883a:	065b      	lsls	r3, r3, #25
 800883c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008840:	431a      	orrs	r2, r3
 8008842:	6142      	str	r2, [r0, #20]
 8008844:	e7ae      	b.n	80087a4 <RCCEx_PLLSAI2_Config+0xa0>
      status = HAL_ERROR;
 8008846:	2501      	movs	r5, #1
 8008848:	e76c      	b.n	8008724 <RCCEx_PLLSAI2_Config+0x20>
 800884a:	bf00      	nop
 800884c:	40021000 	.word	0x40021000

08008850 <HAL_RCCEx_PeriphCLKConfig>:
{
 8008850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008854:	b082      	sub	sp, #8
 8008856:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008858:	6803      	ldr	r3, [r0, #0]
 800885a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800885e:	d033      	beq.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008860:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008862:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008866:	d01f      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8008868:	d80c      	bhi.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800886a:	b323      	cbz	r3, 80088b6 <HAL_RCCEx_PeriphCLKConfig+0x66>
 800886c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008870:	d105      	bne.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008872:	2100      	movs	r1, #0
 8008874:	3020      	adds	r0, #32
 8008876:	f7ff ff45 	bl	8008704 <RCCEx_PLLSAI2_Config>
 800887a:	4606      	mov	r6, r0
      break;
 800887c:	e020      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 800887e:	2701      	movs	r7, #1
 8008880:	463e      	mov	r6, r7
 8008882:	e023      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008884:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008888:	d10b      	bne.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800888a:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800888c:	4a60      	ldr	r2, [pc, #384]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800888e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008892:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008896:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008898:	430b      	orrs	r3, r1
 800889a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800889e:	2700      	movs	r7, #0
 80088a0:	e014      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80088a2:	2701      	movs	r7, #1
 80088a4:	463e      	mov	r6, r7
 80088a6:	e011      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80088a8:	4a59      	ldr	r2, [pc, #356]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80088aa:	68d3      	ldr	r3, [r2, #12]
 80088ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088b0:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80088b2:	2600      	movs	r6, #0
 80088b4:	e7ea      	b.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80088b6:	2100      	movs	r1, #0
 80088b8:	3004      	adds	r0, #4
 80088ba:	f7ff fe6b 	bl	8008594 <RCCEx_PLLSAI1_Config>
 80088be:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80088c0:	2e00      	cmp	r6, #0
 80088c2:	d0e3      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80088c4:	4637      	mov	r7, r6
 80088c6:	e001      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80088c8:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80088ca:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80088cc:	6823      	ldr	r3, [r4, #0]
 80088ce:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80088d2:	d030      	beq.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 80088d4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80088d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088da:	d01f      	beq.n	800891c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80088dc:	d80d      	bhi.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0xaa>
 80088de:	b31b      	cbz	r3, 8008928 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80088e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088e4:	d106      	bne.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80088e6:	2100      	movs	r1, #0
 80088e8:	f104 0020 	add.w	r0, r4, #32
 80088ec:	f7ff ff0a 	bl	8008704 <RCCEx_PLLSAI2_Config>
 80088f0:	4606      	mov	r6, r0
      break;
 80088f2:	e005      	b.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch(PeriphClkInit->Sai2ClockSelection)
 80088f4:	2701      	movs	r7, #1
 80088f6:	463e      	mov	r6, r7
 80088f8:	e01d      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 80088fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80088fe:	d10a      	bne.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if(ret == HAL_OK)
 8008900:	b9c6      	cbnz	r6, 8008934 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008902:	4a43      	ldr	r2, [pc, #268]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008904:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008908:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800890c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800890e:	430b      	orrs	r3, r1
 8008910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8008914:	e00f      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8008916:	2701      	movs	r7, #1
 8008918:	463e      	mov	r6, r7
 800891a:	e00c      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800891c:	4a3c      	ldr	r2, [pc, #240]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800891e:	68d3      	ldr	r3, [r2, #12]
 8008920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008924:	60d3      	str	r3, [r2, #12]
      break;
 8008926:	e7eb      	b.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008928:	2100      	movs	r1, #0
 800892a:	1d20      	adds	r0, r4, #4
 800892c:	f7ff fe32 	bl	8008594 <RCCEx_PLLSAI1_Config>
 8008930:	4606      	mov	r6, r0
      break;
 8008932:	e7e5      	b.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8008934:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008936:	6823      	ldr	r3, [r4, #0]
 8008938:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800893c:	d071      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800893e:	4b34      	ldr	r3, [pc, #208]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008942:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008946:	d14e      	bne.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008948:	4b31      	ldr	r3, [pc, #196]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800894a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800894c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008950:	659a      	str	r2, [r3, #88]	; 0x58
 8008952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008958:	9301      	str	r3, [sp, #4]
 800895a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800895c:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008960:	4a2c      	ldr	r2, [pc, #176]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008962:	6813      	ldr	r3, [r2, #0]
 8008964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008968:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800896a:	f7fe fa31 	bl	8006dd0 <HAL_GetTick>
 800896e:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008970:	4b28      	ldr	r3, [pc, #160]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008978:	d105      	bne.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x136>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800897a:	f7fe fa29 	bl	8006dd0 <HAL_GetTick>
 800897e:	1b40      	subs	r0, r0, r5
 8008980:	2802      	cmp	r0, #2
 8008982:	d9f5      	bls.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x120>
        ret = HAL_TIMEOUT;
 8008984:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 8008986:	2e00      	cmp	r6, #0
 8008988:	d146      	bne.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800898a:	4b21      	ldr	r3, [pc, #132]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800898c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008990:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8008994:	d016      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8008996:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800899a:	429a      	cmp	r2, r3
 800899c:	d012      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800899e:	4a1c      	ldr	r2, [pc, #112]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80089a0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80089a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80089a8:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80089ac:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80089b0:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089b4:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80089b8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80089bc:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80089c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80089c4:	f013 0f01 	tst.w	r3, #1
 80089c8:	d110      	bne.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(ret == HAL_OK)
 80089ca:	2e00      	cmp	r6, #0
 80089cc:	f040 8127 	bne.w	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089d0:	4a0f      	ldr	r2, [pc, #60]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80089d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80089d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089da:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80089de:	430b      	orrs	r3, r1
 80089e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80089e4:	e019      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    FlagStatus       pwrclkchanged = RESET;
 80089e6:	f04f 0800 	mov.w	r8, #0
 80089ea:	e7b9      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x110>
        tickstart = HAL_GetTick();
 80089ec:	f7fe f9f0 	bl	8006dd0 <HAL_GetTick>
 80089f0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089f2:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80089f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089f8:	f013 0f02 	tst.w	r3, #2
 80089fc:	d1e5      	bne.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089fe:	f7fe f9e7 	bl	8006dd0 <HAL_GetTick>
 8008a02:	1b40      	subs	r0, r0, r5
 8008a04:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a08:	4298      	cmp	r0, r3
 8008a0a:	d9f2      	bls.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
            ret = HAL_TIMEOUT;
 8008a0c:	2603      	movs	r6, #3
 8008a0e:	e7dc      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008a10:	40021000 	.word	0x40021000
 8008a14:	40007000 	.word	0x40007000
      status = ret;
 8008a18:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 8008a1a:	f1b8 0f00 	cmp.w	r8, #0
 8008a1e:	f040 8100 	bne.w	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	f013 0f01 	tst.w	r3, #1
 8008a28:	d008      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a2a:	4a9d      	ldr	r2, [pc, #628]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008a2c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008a30:	f023 0303 	bic.w	r3, r3, #3
 8008a34:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008a36:	430b      	orrs	r3, r1
 8008a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008a3c:	6823      	ldr	r3, [r4, #0]
 8008a3e:	f013 0f02 	tst.w	r3, #2
 8008a42:	d008      	beq.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008a44:	4a96      	ldr	r2, [pc, #600]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008a46:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008a4a:	f023 030c 	bic.w	r3, r3, #12
 8008a4e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008a50:	430b      	orrs	r3, r1
 8008a52:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	f013 0f04 	tst.w	r3, #4
 8008a5c:	d008      	beq.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008a5e:	4a90      	ldr	r2, [pc, #576]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008a60:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008a64:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008a68:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008a6a:	430b      	orrs	r3, r1
 8008a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	f013 0f08 	tst.w	r3, #8
 8008a76:	d008      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008a78:	4a89      	ldr	r2, [pc, #548]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008a7a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008a7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a82:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008a84:	430b      	orrs	r3, r1
 8008a86:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	f013 0f10 	tst.w	r3, #16
 8008a90:	d008      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008a92:	4a83      	ldr	r2, [pc, #524]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008a94:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008a9e:	430b      	orrs	r3, r1
 8008aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008aa4:	6823      	ldr	r3, [r4, #0]
 8008aa6:	f013 0f20 	tst.w	r3, #32
 8008aaa:	d008      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x26e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008aac:	4a7c      	ldr	r2, [pc, #496]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008aae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008ab2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008ab6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008ab8:	430b      	orrs	r3, r1
 8008aba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008ac4:	d008      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ac6:	4a76      	ldr	r2, [pc, #472]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008ac8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008acc:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8008ad0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008ad2:	430b      	orrs	r3, r1
 8008ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008ade:	d008      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008ae0:	4a6f      	ldr	r2, [pc, #444]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008ae2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008ae6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008aea:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8008aec:	430b      	orrs	r3, r1
 8008aee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008af2:	6823      	ldr	r3, [r4, #0]
 8008af4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008af8:	d008      	beq.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008afa:	4a69      	ldr	r2, [pc, #420]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008afc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008b00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008b04:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008b06:	430b      	orrs	r3, r1
 8008b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008b0c:	6823      	ldr	r3, [r4, #0]
 8008b0e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008b12:	d008      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008b14:	4a62      	ldr	r2, [pc, #392]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008b16:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008b1a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008b1e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008b20:	430b      	orrs	r3, r1
 8008b22:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008b2c:	d008      	beq.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008b2e:	4a5c      	ldr	r2, [pc, #368]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008b30:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008b34:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008b38:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008b3a:	430b      	orrs	r3, r1
 8008b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008b46:	d00f      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b48:	4a55      	ldr	r2, [pc, #340]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008b4a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008b4e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8008b52:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8008b54:	430b      	orrs	r3, r1
 8008b56:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008b5a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008b5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b60:	d065      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008b62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b66:	d067      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8008b6e:	d00f      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x340>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008b70:	4a4b      	ldr	r2, [pc, #300]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008b72:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008b76:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8008b7a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8008b7c:	430b      	orrs	r3, r1
 8008b7e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008b82:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008b84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b88:	d05e      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008b8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b8e:	d060      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x402>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008b90:	6823      	ldr	r3, [r4, #0]
 8008b92:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8008b96:	d00f      	beq.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b98:	4a41      	ldr	r2, [pc, #260]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008b9a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008b9e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8008ba2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8008ba4:	430b      	orrs	r3, r1
 8008ba6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008baa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008bac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bb0:	d057      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x412>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008bb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bb6:	d059      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008bb8:	6823      	ldr	r3, [r4, #0]
 8008bba:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008bbe:	d00f      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008bc0:	4a37      	ldr	r2, [pc, #220]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008bc2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008bc6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8008bca:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8008bcc:	430b      	orrs	r3, r1
 8008bce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008bd2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008bd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bd8:	d050      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x42c>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008bda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bde:	d055      	beq.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x43c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008be0:	6823      	ldr	r3, [r4, #0]
 8008be2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8008be6:	d008      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008be8:	4a2d      	ldr	r2, [pc, #180]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008bea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008bee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008bf2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8008bf4:	430b      	orrs	r3, r1
 8008bf6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008c00:	d009      	beq.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008c02:	4a27      	ldr	r2, [pc, #156]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c04:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008c08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c0c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8008c10:	430b      	orrs	r3, r1
 8008c12:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8008c16:	4638      	mov	r0, r7
 8008c18:	b002      	add	sp, #8
 8008c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8008c1e:	4637      	mov	r7, r6
 8008c20:	e6fb      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c22:	4a1f      	ldr	r2, [pc, #124]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c24:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c2a:	6593      	str	r3, [r2, #88]	; 0x58
 8008c2c:	e6f9      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c2e:	68d3      	ldr	r3, [r2, #12]
 8008c30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c34:	60d3      	str	r3, [r2, #12]
 8008c36:	e797      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x318>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008c38:	2101      	movs	r1, #1
 8008c3a:	1d20      	adds	r0, r4, #4
 8008c3c:	f7ff fcaa 	bl	8008594 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d091      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x318>
          status = ret;
 8008c44:	4607      	mov	r7, r0
 8008c46:	e78f      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c48:	68d3      	ldr	r3, [r2, #12]
 8008c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c4e:	60d3      	str	r3, [r2, #12]
 8008c50:	e79e      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x340>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008c52:	2101      	movs	r1, #1
 8008c54:	1d20      	adds	r0, r4, #4
 8008c56:	f7ff fc9d 	bl	8008594 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	d098      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x340>
        status = ret;
 8008c5e:	4607      	mov	r7, r0
 8008c60:	e796      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x340>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c62:	68d3      	ldr	r3, [r2, #12]
 8008c64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c68:	60d3      	str	r3, [r2, #12]
 8008c6a:	e7a5      	b.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008c6c:	2101      	movs	r1, #1
 8008c6e:	1d20      	adds	r0, r4, #4
 8008c70:	f7ff fc90 	bl	8008594 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8008c74:	2800      	cmp	r0, #0
 8008c76:	d09f      	beq.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        status = ret;
 8008c78:	4607      	mov	r7, r0
 8008c7a:	e79d      	b.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008c7c:	2102      	movs	r1, #2
 8008c7e:	1d20      	adds	r0, r4, #4
 8008c80:	f7ff fc88 	bl	8008594 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d0ab      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 8008c88:	4607      	mov	r7, r0
 8008c8a:	e7a9      	b.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008c8c:	2102      	movs	r1, #2
 8008c8e:	f104 0020 	add.w	r0, r4, #32
 8008c92:	f7ff fd37 	bl	8008704 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d0a2      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 8008c9a:	4607      	mov	r7, r0
 8008c9c:	e7a0      	b.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8008c9e:	bf00      	nop
 8008ca0:	40021000 	.word	0x40021000

08008ca4 <HAL_RCCEx_DisableLSECSS>:
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8008ca4:	4b05      	ldr	r3, [pc, #20]	; (8008cbc <HAL_RCCEx_DisableLSECSS+0x18>)
 8008ca6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008caa:	f022 0220 	bic.w	r2, r2, #32
 8008cae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 8008cb2:	699a      	ldr	r2, [r3, #24]
 8008cb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008cb8:	619a      	str	r2, [r3, #24]
}
 8008cba:	4770      	bx	lr
 8008cbc:	40021000 	.word	0x40021000

08008cc0 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008cc0:	4a02      	ldr	r2, [pc, #8]	; (8008ccc <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8008cc2:	6813      	ldr	r3, [r2, #0]
 8008cc4:	f043 0304 	orr.w	r3, r3, #4
 8008cc8:	6013      	str	r3, [r2, #0]
}
 8008cca:	4770      	bx	lr
 8008ccc:	40021000 	.word	0x40021000

08008cd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd4:	b082      	sub	sp, #8
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	4688      	mov	r8, r1
 8008cda:	4617      	mov	r7, r2
 8008cdc:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008cde:	f7fe f877 	bl	8006dd0 <HAL_GetTick>
 8008ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ce4:	1a1b      	subs	r3, r3, r0
 8008ce6:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8008cea:	f7fe f871 	bl	8006dd0 <HAL_GetTick>
 8008cee:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008cf0:	4b2a      	ldr	r3, [pc, #168]	; (8008d9c <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8008cf8:	fb09 f303 	mul.w	r3, r9, r3
 8008cfc:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008cfe:	682b      	ldr	r3, [r5, #0]
 8008d00:	689c      	ldr	r4, [r3, #8]
 8008d02:	ea38 0404 	bics.w	r4, r8, r4
 8008d06:	bf0c      	ite	eq
 8008d08:	2301      	moveq	r3, #1
 8008d0a:	2300      	movne	r3, #0
 8008d0c:	42bb      	cmp	r3, r7
 8008d0e:	d040      	beq.n	8008d92 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008d10:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008d14:	d0f3      	beq.n	8008cfe <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008d16:	f7fe f85b 	bl	8006dd0 <HAL_GetTick>
 8008d1a:	eba0 000a 	sub.w	r0, r0, sl
 8008d1e:	4548      	cmp	r0, r9
 8008d20:	d20a      	bcs.n	8008d38 <SPI_WaitFlagStateUntilTimeout+0x68>
 8008d22:	f1b9 0f00 	cmp.w	r9, #0
 8008d26:	d007      	beq.n	8008d38 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008d28:	9a01      	ldr	r2, [sp, #4]
 8008d2a:	b102      	cbz	r2, 8008d2e <SPI_WaitFlagStateUntilTimeout+0x5e>
 8008d2c:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8008d2e:	9b01      	ldr	r3, [sp, #4]
 8008d30:	3b01      	subs	r3, #1
 8008d32:	9301      	str	r3, [sp, #4]
 8008d34:	4691      	mov	r9, r2
 8008d36:	e7e2      	b.n	8008cfe <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d38:	682a      	ldr	r2, [r5, #0]
 8008d3a:	6853      	ldr	r3, [r2, #4]
 8008d3c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8008d40:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d42:	686b      	ldr	r3, [r5, #4]
 8008d44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d48:	d00b      	beq.n	8008d62 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d4a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d50:	d014      	beq.n	8008d7c <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 8008d52:	2301      	movs	r3, #1
 8008d54:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8008d58:	2300      	movs	r3, #0
 8008d5a:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8008d5e:	2003      	movs	r0, #3
 8008d60:	e018      	b.n	8008d94 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d62:	68ab      	ldr	r3, [r5, #8]
 8008d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d68:	d002      	beq.n	8008d70 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d6e:	d1ec      	bne.n	8008d4a <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8008d70:	682a      	ldr	r2, [r5, #0]
 8008d72:	6813      	ldr	r3, [r2, #0]
 8008d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d78:	6013      	str	r3, [r2, #0]
 8008d7a:	e7e6      	b.n	8008d4a <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8008d7c:	682a      	ldr	r2, [r5, #0]
 8008d7e:	6813      	ldr	r3, [r2, #0]
 8008d80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d84:	6013      	str	r3, [r2, #0]
 8008d86:	682a      	ldr	r2, [r5, #0]
 8008d88:	6813      	ldr	r3, [r2, #0]
 8008d8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008d8e:	6013      	str	r3, [r2, #0]
 8008d90:	e7df      	b.n	8008d52 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8008d92:	2000      	movs	r0, #0
}
 8008d94:	b002      	add	sp, #8
 8008d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d9a:	bf00      	nop
 8008d9c:	20000084 	.word	0x20000084

08008da0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da4:	b082      	sub	sp, #8
 8008da6:	4607      	mov	r7, r0
 8008da8:	460d      	mov	r5, r1
 8008daa:	4616      	mov	r6, r2
 8008dac:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008dae:	f7fe f80f 	bl	8006dd0 <HAL_GetTick>
 8008db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008db4:	1a1b      	subs	r3, r3, r0
 8008db6:	eb03 0908 	add.w	r9, r3, r8
  tmp_tickstart = HAL_GetTick();
 8008dba:	f7fe f809 	bl	8006dd0 <HAL_GetTick>
 8008dbe:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008dc0:	4b2f      	ldr	r3, [pc, #188]	; (8008e80 <SPI_WaitFifoStateUntilTimeout+0xe0>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008dc8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008dcc:	0d1b      	lsrs	r3, r3, #20
 8008dce:	fb09 f303 	mul.w	r3, r9, r3
 8008dd2:	9300      	str	r3, [sp, #0]

  while ((hspi->Instance->SR & Fifo) != State)
 8008dd4:	e002      	b.n	8008ddc <SPI_WaitFifoStateUntilTimeout+0x3c>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }

    if (Timeout != HAL_MAX_DELAY)
 8008dd6:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008dda:	d10f      	bne.n	8008dfc <SPI_WaitFifoStateUntilTimeout+0x5c>
  while ((hspi->Instance->SR & Fifo) != State)
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	689c      	ldr	r4, [r3, #8]
 8008de0:	ea04 0c05 	and.w	ip, r4, r5
 8008de4:	45b4      	cmp	ip, r6
 8008de6:	d047      	beq.n	8008e78 <SPI_WaitFifoStateUntilTimeout+0xd8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008de8:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8008dec:	d1f3      	bne.n	8008dd6 <SPI_WaitFifoStateUntilTimeout+0x36>
 8008dee:	2e00      	cmp	r6, #0
 8008df0:	d1f1      	bne.n	8008dd6 <SPI_WaitFifoStateUntilTimeout+0x36>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008df2:	7b1b      	ldrb	r3, [r3, #12]
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	9301      	str	r3, [sp, #4]
      UNUSED(tmpreg);
 8008df8:	9b01      	ldr	r3, [sp, #4]
 8008dfa:	e7ec      	b.n	8008dd6 <SPI_WaitFifoStateUntilTimeout+0x36>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008dfc:	f7fd ffe8 	bl	8006dd0 <HAL_GetTick>
 8008e00:	eba0 000a 	sub.w	r0, r0, sl
 8008e04:	4548      	cmp	r0, r9
 8008e06:	d20a      	bcs.n	8008e1e <SPI_WaitFifoStateUntilTimeout+0x7e>
 8008e08:	f1b9 0f00 	cmp.w	r9, #0
 8008e0c:	d007      	beq.n	8008e1e <SPI_WaitFifoStateUntilTimeout+0x7e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008e0e:	9a00      	ldr	r2, [sp, #0]
 8008e10:	b102      	cbz	r2, 8008e14 <SPI_WaitFifoStateUntilTimeout+0x74>
 8008e12:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }      
      count--;
 8008e14:	9b00      	ldr	r3, [sp, #0]
 8008e16:	3b01      	subs	r3, #1
 8008e18:	9300      	str	r3, [sp, #0]
 8008e1a:	4691      	mov	r9, r2
 8008e1c:	e7de      	b.n	8008ddc <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	6853      	ldr	r3, [r2, #4]
 8008e22:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8008e26:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e2e:	d00b      	beq.n	8008e48 <SPI_WaitFifoStateUntilTimeout+0xa8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e36:	d014      	beq.n	8008e62 <SPI_WaitFifoStateUntilTimeout+0xc2>
        hspi->State = HAL_SPI_STATE_READY;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8008e3e:	2300      	movs	r3, #0
 8008e40:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        return HAL_TIMEOUT;
 8008e44:	2003      	movs	r0, #3
 8008e46:	e018      	b.n	8008e7a <SPI_WaitFifoStateUntilTimeout+0xda>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e4e:	d002      	beq.n	8008e56 <SPI_WaitFifoStateUntilTimeout+0xb6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e54:	d1ec      	bne.n	8008e30 <SPI_WaitFifoStateUntilTimeout+0x90>
          __HAL_SPI_DISABLE(hspi);
 8008e56:	683a      	ldr	r2, [r7, #0]
 8008e58:	6813      	ldr	r3, [r2, #0]
 8008e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e5e:	6013      	str	r3, [r2, #0]
 8008e60:	e7e6      	b.n	8008e30 <SPI_WaitFifoStateUntilTimeout+0x90>
          SPI_RESET_CRC(hspi);
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	6813      	ldr	r3, [r2, #0]
 8008e66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e6a:	6013      	str	r3, [r2, #0]
 8008e6c:	683a      	ldr	r2, [r7, #0]
 8008e6e:	6813      	ldr	r3, [r2, #0]
 8008e70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008e74:	6013      	str	r3, [r2, #0]
 8008e76:	e7df      	b.n	8008e38 <SPI_WaitFifoStateUntilTimeout+0x98>
    }
  }

  return HAL_OK;
 8008e78:	2000      	movs	r0, #0
}
 8008e7a:	b002      	add	sp, #8
 8008e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e80:	20000084 	.word	0x20000084

08008e84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008e84:	b570      	push	{r4, r5, r6, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	4604      	mov	r4, r0
 8008e8a:	460d      	mov	r5, r1
 8008e8c:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008e8e:	9200      	str	r2, [sp, #0]
 8008e90:	460b      	mov	r3, r1
 8008e92:	2200      	movs	r2, #0
 8008e94:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008e98:	f7ff ff82 	bl	8008da0 <SPI_WaitFifoStateUntilTimeout>
 8008e9c:	b9b0      	cbnz	r0, 8008ecc <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008e9e:	9600      	str	r6, [sp, #0]
 8008ea0:	462b      	mov	r3, r5
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	2180      	movs	r1, #128	; 0x80
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f7ff ff12 	bl	8008cd0 <SPI_WaitFlagStateUntilTimeout>
 8008eac:	b9a8      	cbnz	r0, 8008eda <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008eae:	9600      	str	r6, [sp, #0]
 8008eb0:	462b      	mov	r3, r5
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f7ff ff71 	bl	8008da0 <SPI_WaitFifoStateUntilTimeout>
 8008ebe:	b150      	cbz	r0, 8008ed6 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ec0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008ec2:	f043 0320 	orr.w	r3, r3, #32
 8008ec6:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008ec8:	2003      	movs	r0, #3
 8008eca:	e004      	b.n	8008ed6 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ecc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008ece:	f043 0320 	orr.w	r3, r3, #32
 8008ed2:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008ed4:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8008ed6:	b002      	add	sp, #8
 8008ed8:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008eda:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008edc:	f043 0320 	orr.w	r3, r3, #32
 8008ee0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008ee2:	2003      	movs	r0, #3
 8008ee4:	e7f7      	b.n	8008ed6 <SPI_EndRxTxTransaction+0x52>

08008ee6 <HAL_SPI_MspInit>:
}
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_SPI_Init>:
  if (hspi == NULL)
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	f000 8089 	beq.w	8009000 <HAL_SPI_Init+0x118>
{
 8008eee:	b510      	push	{r4, lr}
 8008ef0:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ef2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008ef4:	b933      	cbnz	r3, 8008f04 <HAL_SPI_Init+0x1c>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ef6:	6843      	ldr	r3, [r0, #4]
 8008ef8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008efc:	d005      	beq.n	8008f0a <HAL_SPI_Init+0x22>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008efe:	2300      	movs	r3, #0
 8008f00:	61c3      	str	r3, [r0, #28]
 8008f02:	e002      	b.n	8008f0a <HAL_SPI_Init+0x22>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f04:	2300      	movs	r3, #0
 8008f06:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f08:	6143      	str	r3, [r0, #20]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f0a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d055      	beq.n	8008fbe <HAL_SPI_Init+0xd6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8008f12:	2302      	movs	r3, #2
 8008f14:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8008f18:	6822      	ldr	r2, [r4, #0]
 8008f1a:	6813      	ldr	r3, [r2, #0]
 8008f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f20:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f22:	68e3      	ldr	r3, [r4, #12]
 8008f24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f28:	d94f      	bls.n	8008fca <HAL_SPI_Init+0xe2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008f2a:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008f2c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008f30:	d004      	beq.n	8008f3c <HAL_SPI_Init+0x54>
 8008f32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f36:	d001      	beq.n	8008f3c <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f3c:	6863      	ldr	r3, [r4, #4]
 8008f3e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8008f42:	68a1      	ldr	r1, [r4, #8]
 8008f44:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8008f48:	430b      	orrs	r3, r1
 8008f4a:	6921      	ldr	r1, [r4, #16]
 8008f4c:	f001 0102 	and.w	r1, r1, #2
 8008f50:	430b      	orrs	r3, r1
 8008f52:	6961      	ldr	r1, [r4, #20]
 8008f54:	f001 0101 	and.w	r1, r1, #1
 8008f58:	430b      	orrs	r3, r1
 8008f5a:	69a1      	ldr	r1, [r4, #24]
 8008f5c:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8008f60:	430b      	orrs	r3, r1
 8008f62:	69e1      	ldr	r1, [r4, #28]
 8008f64:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8008f68:	430b      	orrs	r3, r1
 8008f6a:	6a21      	ldr	r1, [r4, #32]
 8008f6c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8008f70:	430b      	orrs	r3, r1
 8008f72:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008f74:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8008f78:	6820      	ldr	r0, [r4, #0]
 8008f7a:	430b      	orrs	r3, r1
 8008f7c:	6003      	str	r3, [r0, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f84:	d024      	beq.n	8008fd0 <HAL_SPI_Init+0xe8>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008f86:	8b63      	ldrh	r3, [r4, #26]
 8008f88:	f003 0304 	and.w	r3, r3, #4
 8008f8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008f8e:	f001 0110 	and.w	r1, r1, #16
 8008f92:	430b      	orrs	r3, r1
 8008f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f96:	f001 0108 	and.w	r1, r1, #8
 8008f9a:	430b      	orrs	r3, r1
 8008f9c:	68e1      	ldr	r1, [r4, #12]
 8008f9e:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8008fa2:	430b      	orrs	r3, r1
 8008fa4:	6821      	ldr	r1, [r4, #0]
 8008fa6:	431a      	orrs	r2, r3
 8008fa8:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008faa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fb0:	d022      	beq.n	8008ff8 <HAL_SPI_Init+0x110>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8008fbc:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8008fbe:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f7ff ff8f 	bl	8008ee6 <HAL_SPI_MspInit>
 8008fc8:	e7a3      	b.n	8008f12 <HAL_SPI_Init+0x2a>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008fca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008fce:	e7ad      	b.n	8008f2c <HAL_SPI_Init+0x44>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008fd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008fd2:	b92b      	cbnz	r3, 8008fe0 <HAL_SPI_Init+0xf8>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008fd4:	68e3      	ldr	r3, [r4, #12]
 8008fd6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008fda:	d90a      	bls.n	8008ff2 <HAL_SPI_Init+0x10a>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008fdc:	2302      	movs	r3, #2
 8008fde:	6323      	str	r3, [r4, #48]	; 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8008fe0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d1cf      	bne.n	8008f86 <HAL_SPI_Init+0x9e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8008fe6:	6821      	ldr	r1, [r4, #0]
 8008fe8:	680b      	ldr	r3, [r1, #0]
 8008fea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008fee:	600b      	str	r3, [r1, #0]
 8008ff0:	e7c9      	b.n	8008f86 <HAL_SPI_Init+0x9e>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	6323      	str	r3, [r4, #48]	; 0x30
 8008ff6:	e7f3      	b.n	8008fe0 <HAL_SPI_Init+0xf8>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8008ffc:	611a      	str	r2, [r3, #16]
 8008ffe:	e7d8      	b.n	8008fb2 <HAL_SPI_Init+0xca>
    return HAL_ERROR;
 8009000:	2001      	movs	r0, #1
}
 8009002:	4770      	bx	lr

08009004 <HAL_SPI_Transmit>:
{
 8009004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009008:	b083      	sub	sp, #12
 800900a:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800900c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8009010:	2b01      	cmp	r3, #1
 8009012:	f000 810f 	beq.w	8009234 <HAL_SPI_Transmit+0x230>
 8009016:	4604      	mov	r4, r0
 8009018:	4688      	mov	r8, r1
 800901a:	4691      	mov	r9, r2
 800901c:	2301      	movs	r3, #1
 800901e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8009022:	f7fd fed5 	bl	8006dd0 <HAL_GetTick>
 8009026:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8009028:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 800902c:	b2f6      	uxtb	r6, r6
 800902e:	2e01      	cmp	r6, #1
 8009030:	f040 80ed 	bne.w	800920e <HAL_SPI_Transmit+0x20a>
  if ((pData == NULL) || (Size == 0U))
 8009034:	f1b8 0f00 	cmp.w	r8, #0
 8009038:	f000 80ea 	beq.w	8009210 <HAL_SPI_Transmit+0x20c>
 800903c:	f1b9 0f00 	cmp.w	r9, #0
 8009040:	f000 80e6 	beq.w	8009210 <HAL_SPI_Transmit+0x20c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009044:	2303      	movs	r3, #3
 8009046:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800904a:	2300      	movs	r3, #0
 800904c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800904e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009052:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009056:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800905a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800905c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009060:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009064:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009066:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009068:	68a3      	ldr	r3, [r4, #8]
 800906a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800906e:	d022      	beq.n	80090b6 <HAL_SPI_Transmit+0xb2>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009070:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009076:	d029      	beq.n	80090cc <HAL_SPI_Transmit+0xc8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009078:	6823      	ldr	r3, [r4, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009080:	d103      	bne.n	800908a <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009088:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800908a:	68e3      	ldr	r3, [r4, #12]
 800908c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009090:	d94d      	bls.n	800912e <HAL_SPI_Transmit+0x12a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009092:	6863      	ldr	r3, [r4, #4]
 8009094:	b113      	cbz	r3, 800909c <HAL_SPI_Transmit+0x98>
 8009096:	f1b9 0f01 	cmp.w	r9, #1
 800909a:	d12e      	bne.n	80090fa <HAL_SPI_Transmit+0xf6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800909c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	8812      	ldrh	r2, [r2, #0]
 80090a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80090a6:	3302      	adds	r3, #2
 80090a8:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80090aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	3b01      	subs	r3, #1
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80090b4:	e021      	b.n	80090fa <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_DISABLE(hspi);
 80090b6:	6822      	ldr	r2, [r4, #0]
 80090b8:	6813      	ldr	r3, [r2, #0]
 80090ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090be:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80090c0:	6822      	ldr	r2, [r4, #0]
 80090c2:	6813      	ldr	r3, [r2, #0]
 80090c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80090c8:	6013      	str	r3, [r2, #0]
 80090ca:	e7d1      	b.n	8009070 <HAL_SPI_Transmit+0x6c>
    SPI_RESET_CRC(hspi);
 80090cc:	6822      	ldr	r2, [r4, #0]
 80090ce:	6813      	ldr	r3, [r2, #0]
 80090d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090d4:	6013      	str	r3, [r2, #0]
 80090d6:	6822      	ldr	r2, [r4, #0]
 80090d8:	6813      	ldr	r3, [r2, #0]
 80090da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80090de:	6013      	str	r3, [r2, #0]
 80090e0:	e7ca      	b.n	8009078 <HAL_SPI_Transmit+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090e2:	f7fd fe75 	bl	8006dd0 <HAL_GetTick>
 80090e6:	1bc0      	subs	r0, r0, r7
 80090e8:	42a8      	cmp	r0, r5
 80090ea:	d303      	bcc.n	80090f4 <HAL_SPI_Transmit+0xf0>
 80090ec:	f1b5 3fff 	cmp.w	r5, #4294967295
 80090f0:	f040 8098 	bne.w	8009224 <HAL_SPI_Transmit+0x220>
 80090f4:	2d00      	cmp	r5, #0
 80090f6:	f000 8097 	beq.w	8009228 <HAL_SPI_Transmit+0x224>
    while (hspi->TxXferCount > 0U)
 80090fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d066      	beq.n	80091d0 <HAL_SPI_Transmit+0x1cc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009102:	6823      	ldr	r3, [r4, #0]
 8009104:	689a      	ldr	r2, [r3, #8]
 8009106:	f012 0f02 	tst.w	r2, #2
 800910a:	d0ea      	beq.n	80090e2 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800910c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800910e:	8812      	ldrh	r2, [r2, #0]
 8009110:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009112:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009114:	3302      	adds	r3, #2
 8009116:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009118:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 800911c:	fa1f fc8c 	uxth.w	ip, ip
 8009120:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009124:	fa1f fc8c 	uxth.w	ip, ip
 8009128:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 800912c:	e7e5      	b.n	80090fa <HAL_SPI_Transmit+0xf6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800912e:	6863      	ldr	r3, [r4, #4]
 8009130:	b113      	cbz	r3, 8009138 <HAL_SPI_Transmit+0x134>
 8009132:	f1b9 0f01 	cmp.w	r9, #1
 8009136:	d133      	bne.n	80091a0 <HAL_SPI_Transmit+0x19c>
      if (hspi->TxXferCount > 1U)
 8009138:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800913a:	b29b      	uxth	r3, r3
 800913c:	2b01      	cmp	r3, #1
 800913e:	d90c      	bls.n	800915a <HAL_SPI_Transmit+0x156>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009140:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009142:	6823      	ldr	r3, [r4, #0]
 8009144:	8812      	ldrh	r2, [r2, #0]
 8009146:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009148:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800914a:	3302      	adds	r3, #2
 800914c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800914e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009150:	b29b      	uxth	r3, r3
 8009152:	3b02      	subs	r3, #2
 8009154:	b29b      	uxth	r3, r3
 8009156:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009158:	e022      	b.n	80091a0 <HAL_SPI_Transmit+0x19c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800915a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	7812      	ldrb	r2, [r2, #0]
 8009160:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8009162:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009164:	3301      	adds	r3, #1
 8009166:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009168:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800916a:	b29b      	uxth	r3, r3
 800916c:	3b01      	subs	r3, #1
 800916e:	b29b      	uxth	r3, r3
 8009170:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009172:	e015      	b.n	80091a0 <HAL_SPI_Transmit+0x19c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009174:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800917a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800917c:	3301      	adds	r3, #1
 800917e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8009180:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009182:	b29b      	uxth	r3, r3
 8009184:	3b01      	subs	r3, #1
 8009186:	b29b      	uxth	r3, r3
 8009188:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800918a:	e009      	b.n	80091a0 <HAL_SPI_Transmit+0x19c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800918c:	f7fd fe20 	bl	8006dd0 <HAL_GetTick>
 8009190:	1bc0      	subs	r0, r0, r7
 8009192:	42a8      	cmp	r0, r5
 8009194:	d302      	bcc.n	800919c <HAL_SPI_Transmit+0x198>
 8009196:	f1b5 3fff 	cmp.w	r5, #4294967295
 800919a:	d147      	bne.n	800922c <HAL_SPI_Transmit+0x228>
 800919c:	2d00      	cmp	r5, #0
 800919e:	d047      	beq.n	8009230 <HAL_SPI_Transmit+0x22c>
    while (hspi->TxXferCount > 0U)
 80091a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	b1a3      	cbz	r3, 80091d0 <HAL_SPI_Transmit+0x1cc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80091a6:	6822      	ldr	r2, [r4, #0]
 80091a8:	6893      	ldr	r3, [r2, #8]
 80091aa:	f013 0f02 	tst.w	r3, #2
 80091ae:	d0ed      	beq.n	800918c <HAL_SPI_Transmit+0x188>
        if (hspi->TxXferCount > 1U)
 80091b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d9dd      	bls.n	8009174 <HAL_SPI_Transmit+0x170>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80091ba:	881b      	ldrh	r3, [r3, #0]
 80091bc:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80091be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80091c0:	3302      	adds	r3, #2
 80091c2:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80091c4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	3b02      	subs	r3, #2
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80091ce:	e7e7      	b.n	80091a0 <HAL_SPI_Transmit+0x19c>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80091d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091d6:	d014      	beq.n	8009202 <HAL_SPI_Transmit+0x1fe>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091d8:	463a      	mov	r2, r7
 80091da:	4629      	mov	r1, r5
 80091dc:	4620      	mov	r0, r4
 80091de:	f7ff fe51 	bl	8008e84 <SPI_EndRxTxTransaction>
 80091e2:	b108      	cbz	r0, 80091e8 <HAL_SPI_Transmit+0x1e4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091e4:	2320      	movs	r3, #32
 80091e6:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80091e8:	68a3      	ldr	r3, [r4, #8]
 80091ea:	b933      	cbnz	r3, 80091fa <HAL_SPI_Transmit+0x1f6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091ec:	9301      	str	r3, [sp, #4]
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	68da      	ldr	r2, [r3, #12]
 80091f2:	9201      	str	r2, [sp, #4]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	9301      	str	r3, [sp, #4]
 80091f8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091fa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80091fc:	b943      	cbnz	r3, 8009210 <HAL_SPI_Transmit+0x20c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80091fe:	2600      	movs	r6, #0
 8009200:	e006      	b.n	8009210 <HAL_SPI_Transmit+0x20c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009202:	6822      	ldr	r2, [r4, #0]
 8009204:	6813      	ldr	r3, [r2, #0]
 8009206:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800920a:	6013      	str	r3, [r2, #0]
 800920c:	e7e4      	b.n	80091d8 <HAL_SPI_Transmit+0x1d4>
    errorcode = HAL_BUSY;
 800920e:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8009210:	2301      	movs	r3, #1
 8009212:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009216:	2300      	movs	r3, #0
 8009218:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800921c:	4630      	mov	r0, r6
 800921e:	b003      	add	sp, #12
 8009220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8009224:	2603      	movs	r6, #3
 8009226:	e7f3      	b.n	8009210 <HAL_SPI_Transmit+0x20c>
 8009228:	2603      	movs	r6, #3
 800922a:	e7f1      	b.n	8009210 <HAL_SPI_Transmit+0x20c>
          errorcode = HAL_TIMEOUT;
 800922c:	2603      	movs	r6, #3
 800922e:	e7ef      	b.n	8009210 <HAL_SPI_Transmit+0x20c>
 8009230:	2603      	movs	r6, #3
 8009232:	e7ed      	b.n	8009210 <HAL_SPI_Transmit+0x20c>
  __HAL_LOCK(hspi);
 8009234:	2602      	movs	r6, #2
 8009236:	e7f1      	b.n	800921c <HAL_SPI_Transmit+0x218>

08009238 <HAL_SPI_TransmitReceive>:
{
 8009238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923c:	b085      	sub	sp, #20
 800923e:	461f      	mov	r7, r3
 8009240:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  __IO uint32_t tmpreg = 0U;
 8009242:	2300      	movs	r3, #0
 8009244:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hspi);
 8009246:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800924a:	2b01      	cmp	r3, #1
 800924c:	f000 81f7 	beq.w	800963e <HAL_SPI_TransmitReceive+0x406>
 8009250:	4604      	mov	r4, r0
 8009252:	468a      	mov	sl, r1
 8009254:	4693      	mov	fp, r2
 8009256:	2301      	movs	r3, #1
 8009258:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800925c:	f7fd fdb8 	bl	8006dd0 <HAL_GetTick>
 8009260:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8009262:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8009266:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8009268:	6861      	ldr	r1, [r4, #4]
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 800926a:	6822      	ldr	r2, [r4, #0]
 800926c:	f8d2 8000 	ldr.w	r8, [r2]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8009270:	f8d2 9004 	ldr.w	r9, [r2, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009274:	2b01      	cmp	r3, #1
 8009276:	d00a      	beq.n	800928e <HAL_SPI_TransmitReceive+0x56>
 8009278:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800927c:	f040 81c4 	bne.w	8009608 <HAL_SPI_TransmitReceive+0x3d0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009280:	68a1      	ldr	r1, [r4, #8]
 8009282:	2900      	cmp	r1, #0
 8009284:	f040 81cb 	bne.w	800961e <HAL_SPI_TransmitReceive+0x3e6>
 8009288:	2b04      	cmp	r3, #4
 800928a:	f040 81ca 	bne.w	8009622 <HAL_SPI_TransmitReceive+0x3ea>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800928e:	f1ba 0f00 	cmp.w	sl, #0
 8009292:	f000 81c8 	beq.w	8009626 <HAL_SPI_TransmitReceive+0x3ee>
 8009296:	f1bb 0f00 	cmp.w	fp, #0
 800929a:	f000 81c6 	beq.w	800962a <HAL_SPI_TransmitReceive+0x3f2>
 800929e:	2f00      	cmp	r7, #0
 80092a0:	f000 81c5 	beq.w	800962e <HAL_SPI_TransmitReceive+0x3f6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80092a4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	2b04      	cmp	r3, #4
 80092ac:	d002      	beq.n	80092b4 <HAL_SPI_TransmitReceive+0x7c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80092ae:	2305      	movs	r3, #5
 80092b0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092b4:	2300      	movs	r3, #0
 80092b6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80092b8:	f8c4 b040 	str.w	fp, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80092bc:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80092c0:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80092c4:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80092c8:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80092ca:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 80092cc:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80092ce:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80092d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092d6:	d029      	beq.n	800932c <HAL_SPI_TransmitReceive+0xf4>
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80092d8:	68e3      	ldr	r3, [r4, #12]
 80092da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80092de:	d801      	bhi.n	80092e4 <HAL_SPI_TransmitReceive+0xac>
 80092e0:	2f01      	cmp	r7, #1
 80092e2:	d92d      	bls.n	8009340 <HAL_SPI_TransmitReceive+0x108>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80092e4:	6822      	ldr	r2, [r4, #0]
 80092e6:	6853      	ldr	r3, [r2, #4]
 80092e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092ec:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80092f6:	d103      	bne.n	8009300 <HAL_SPI_TransmitReceive+0xc8>
    __HAL_SPI_ENABLE(hspi);
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092fe:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009300:	68e3      	ldr	r3, [r4, #12]
 8009302:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009306:	d97d      	bls.n	8009404 <HAL_SPI_TransmitReceive+0x1cc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009308:	6863      	ldr	r3, [r4, #4]
 800930a:	b10b      	cbz	r3, 8009310 <HAL_SPI_TransmitReceive+0xd8>
 800930c:	2f01      	cmp	r7, #1
 800930e:	d10b      	bne.n	8009328 <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009310:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009312:	6823      	ldr	r3, [r4, #0]
 8009314:	8812      	ldrh	r2, [r2, #0]
 8009316:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009318:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800931a:	3302      	adds	r3, #2
 800931c:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800931e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009320:	b29b      	uxth	r3, r3
 8009322:	3b01      	subs	r3, #1
 8009324:	b29b      	uxth	r3, r3
 8009326:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8009328:	2701      	movs	r7, #1
 800932a:	e042      	b.n	80093b2 <HAL_SPI_TransmitReceive+0x17a>
    SPI_RESET_CRC(hspi);
 800932c:	6813      	ldr	r3, [r2, #0]
 800932e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009332:	6013      	str	r3, [r2, #0]
 8009334:	6822      	ldr	r2, [r4, #0]
 8009336:	6813      	ldr	r3, [r2, #0]
 8009338:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800933c:	6013      	str	r3, [r2, #0]
 800933e:	e7cb      	b.n	80092d8 <HAL_SPI_TransmitReceive+0xa0>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009340:	6822      	ldr	r2, [r4, #0]
 8009342:	6853      	ldr	r3, [r2, #4]
 8009344:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009348:	6053      	str	r3, [r2, #4]
 800934a:	e7d0      	b.n	80092ee <HAL_SPI_TransmitReceive+0xb6>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800934c:	f018 0f04 	tst.w	r8, #4
 8009350:	d107      	bne.n	8009362 <HAL_SPI_TransmitReceive+0x12a>
 8009352:	f019 0f08 	tst.w	r9, #8
 8009356:	d004      	beq.n	8009362 <HAL_SPI_TransmitReceive+0x12a>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8009358:	6822      	ldr	r2, [r4, #0]
 800935a:	6813      	ldr	r3, [r2, #0]
 800935c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009360:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009362:	6822      	ldr	r2, [r4, #0]
 8009364:	6813      	ldr	r3, [r2, #0]
 8009366:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800936a:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 800936c:	2700      	movs	r7, #0
 800936e:	e000      	b.n	8009372 <HAL_SPI_TransmitReceive+0x13a>
 8009370:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009372:	6823      	ldr	r3, [r4, #0]
 8009374:	689a      	ldr	r2, [r3, #8]
 8009376:	f012 0f01 	tst.w	r2, #1
 800937a:	d011      	beq.n	80093a0 <HAL_SPI_TransmitReceive+0x168>
 800937c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8009380:	b292      	uxth	r2, r2
 8009382:	b16a      	cbz	r2, 80093a0 <HAL_SPI_TransmitReceive+0x168>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009384:	68da      	ldr	r2, [r3, #12]
 8009386:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009388:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800938a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800938c:	3302      	adds	r3, #2
 800938e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8009390:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8009394:	b29b      	uxth	r3, r3
 8009396:	3b01      	subs	r3, #1
 8009398:	b29b      	uxth	r3, r3
 800939a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800939e:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80093a0:	f7fd fd16 	bl	8006dd0 <HAL_GetTick>
 80093a4:	1b80      	subs	r0, r0, r6
 80093a6:	42a8      	cmp	r0, r5
 80093a8:	d303      	bcc.n	80093b2 <HAL_SPI_TransmitReceive+0x17a>
 80093aa:	f1b5 3fff 	cmp.w	r5, #4294967295
 80093ae:	f040 8140 	bne.w	8009632 <HAL_SPI_TransmitReceive+0x3fa>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	b92b      	cbnz	r3, 80093c4 <HAL_SPI_TransmitReceive+0x18c>
 80093b8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80093bc:	b29b      	uxth	r3, r3
 80093be:	2b00      	cmp	r3, #0
 80093c0:	f000 80d1 	beq.w	8009566 <HAL_SPI_TransmitReceive+0x32e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80093c4:	6823      	ldr	r3, [r4, #0]
 80093c6:	689a      	ldr	r2, [r3, #8]
 80093c8:	f012 0f02 	tst.w	r2, #2
 80093cc:	d0d1      	beq.n	8009372 <HAL_SPI_TransmitReceive+0x13a>
 80093ce:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80093d0:	b292      	uxth	r2, r2
 80093d2:	2a00      	cmp	r2, #0
 80093d4:	d0cd      	beq.n	8009372 <HAL_SPI_TransmitReceive+0x13a>
 80093d6:	2f00      	cmp	r7, #0
 80093d8:	d0cb      	beq.n	8009372 <HAL_SPI_TransmitReceive+0x13a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80093dc:	8812      	ldrh	r2, [r2, #0]
 80093de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80093e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80093e2:	3302      	adds	r3, #2
 80093e4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80093e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	3b01      	subs	r3, #1
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80093f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1bb      	bne.n	8009370 <HAL_SPI_TransmitReceive+0x138>
 80093f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80093fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093fe:	d0a5      	beq.n	800934c <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 8009400:	2700      	movs	r7, #0
 8009402:	e7b6      	b.n	8009372 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009404:	6863      	ldr	r3, [r4, #4]
 8009406:	b10b      	cbz	r3, 800940c <HAL_SPI_TransmitReceive+0x1d4>
 8009408:	2f01      	cmp	r7, #1
 800940a:	d10f      	bne.n	800942c <HAL_SPI_TransmitReceive+0x1f4>
      if (hspi->TxXferCount > 1U)
 800940c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800940e:	b29b      	uxth	r3, r3
 8009410:	2b01      	cmp	r3, #1
 8009412:	d90d      	bls.n	8009430 <HAL_SPI_TransmitReceive+0x1f8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009414:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	8812      	ldrh	r2, [r2, #0]
 800941a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800941c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800941e:	3302      	adds	r3, #2
 8009420:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009422:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009424:	b29b      	uxth	r3, r3
 8009426:	3b02      	subs	r3, #2
 8009428:	b29b      	uxth	r3, r3
 800942a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800942c:	2701      	movs	r7, #1
 800942e:	e065      	b.n	80094fc <HAL_SPI_TransmitReceive+0x2c4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009430:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009432:	6823      	ldr	r3, [r4, #0]
 8009434:	7812      	ldrb	r2, [r2, #0]
 8009436:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8009438:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800943a:	3301      	adds	r3, #1
 800943c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800943e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009440:	b29b      	uxth	r3, r3
 8009442:	3b01      	subs	r3, #1
 8009444:	b29b      	uxth	r3, r3
 8009446:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009448:	e7f0      	b.n	800942c <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->TxXferCount > 1U)
 800944a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800944c:	b292      	uxth	r2, r2
 800944e:	2a01      	cmp	r2, #1
 8009450:	d913      	bls.n	800947a <HAL_SPI_TransmitReceive+0x242>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009452:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009454:	8812      	ldrh	r2, [r2, #0]
 8009456:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009458:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800945a:	3302      	adds	r3, #2
 800945c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800945e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009460:	b29b      	uxth	r3, r3
 8009462:	3b02      	subs	r3, #2
 8009464:	b29b      	uxth	r3, r3
 8009466:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009468:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800946a:	b29b      	uxth	r3, r3
 800946c:	bb1b      	cbnz	r3, 80094b6 <HAL_SPI_TransmitReceive+0x27e>
 800946e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009474:	d00d      	beq.n	8009492 <HAL_SPI_TransmitReceive+0x25a>
        txallowed = 0U;
 8009476:	2700      	movs	r7, #0
 8009478:	e052      	b.n	8009520 <HAL_SPI_TransmitReceive+0x2e8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800947a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800947c:	7812      	ldrb	r2, [r2, #0]
 800947e:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8009480:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009482:	3301      	adds	r3, #1
 8009484:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8009486:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009488:	b29b      	uxth	r3, r3
 800948a:	3b01      	subs	r3, #1
 800948c:	b29b      	uxth	r3, r3
 800948e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009490:	e7ea      	b.n	8009468 <HAL_SPI_TransmitReceive+0x230>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8009492:	f018 0f04 	tst.w	r8, #4
 8009496:	d107      	bne.n	80094a8 <HAL_SPI_TransmitReceive+0x270>
 8009498:	f019 0f08 	tst.w	r9, #8
 800949c:	d004      	beq.n	80094a8 <HAL_SPI_TransmitReceive+0x270>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800949e:	6822      	ldr	r2, [r4, #0]
 80094a0:	6813      	ldr	r3, [r2, #0]
 80094a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094a6:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80094a8:	6822      	ldr	r2, [r4, #0]
 80094aa:	6813      	ldr	r3, [r2, #0]
 80094ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80094b0:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 80094b2:	2700      	movs	r7, #0
 80094b4:	e034      	b.n	8009520 <HAL_SPI_TransmitReceive+0x2e8>
 80094b6:	2700      	movs	r7, #0
 80094b8:	e032      	b.n	8009520 <HAL_SPI_TransmitReceive+0x2e8>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80094ba:	6822      	ldr	r2, [r4, #0]
 80094bc:	6853      	ldr	r3, [r2, #4]
 80094be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80094c2:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 80094c4:	2701      	movs	r7, #1
 80094c6:	e00d      	b.n	80094e4 <HAL_SPI_TransmitReceive+0x2ac>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80094c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80094ca:	7b1b      	ldrb	r3, [r3, #12]
 80094cc:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 80094ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094d0:	3301      	adds	r3, #1
 80094d2:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80094d4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80094d8:	b29b      	uxth	r3, r3
 80094da:	3b01      	subs	r3, #1
 80094dc:	b29b      	uxth	r3, r3
 80094de:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80094e2:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80094e4:	f7fd fc74 	bl	8006dd0 <HAL_GetTick>
 80094e8:	1b80      	subs	r0, r0, r6
 80094ea:	42a8      	cmp	r0, r5
 80094ec:	d303      	bcc.n	80094f6 <HAL_SPI_TransmitReceive+0x2be>
 80094ee:	f1b5 3fff 	cmp.w	r5, #4294967295
 80094f2:	f040 80a0 	bne.w	8009636 <HAL_SPI_TransmitReceive+0x3fe>
 80094f6:	2d00      	cmp	r5, #0
 80094f8:	f000 809f 	beq.w	800963a <HAL_SPI_TransmitReceive+0x402>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80094fe:	b29b      	uxth	r3, r3
 8009500:	b923      	cbnz	r3, 800950c <HAL_SPI_TransmitReceive+0x2d4>
 8009502:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8009506:	b29b      	uxth	r3, r3
 8009508:	2b00      	cmp	r3, #0
 800950a:	d02c      	beq.n	8009566 <HAL_SPI_TransmitReceive+0x32e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800950c:	6823      	ldr	r3, [r4, #0]
 800950e:	689a      	ldr	r2, [r3, #8]
 8009510:	f012 0f02 	tst.w	r2, #2
 8009514:	d004      	beq.n	8009520 <HAL_SPI_TransmitReceive+0x2e8>
 8009516:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8009518:	b292      	uxth	r2, r2
 800951a:	b10a      	cbz	r2, 8009520 <HAL_SPI_TransmitReceive+0x2e8>
 800951c:	2f00      	cmp	r7, #0
 800951e:	d194      	bne.n	800944a <HAL_SPI_TransmitReceive+0x212>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	689a      	ldr	r2, [r3, #8]
 8009524:	f012 0f01 	tst.w	r2, #1
 8009528:	d0dc      	beq.n	80094e4 <HAL_SPI_TransmitReceive+0x2ac>
 800952a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800952e:	b292      	uxth	r2, r2
 8009530:	2a00      	cmp	r2, #0
 8009532:	d0d7      	beq.n	80094e4 <HAL_SPI_TransmitReceive+0x2ac>
        if (hspi->RxXferCount > 1U)
 8009534:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8009538:	b292      	uxth	r2, r2
 800953a:	2a01      	cmp	r2, #1
 800953c:	d9c4      	bls.n	80094c8 <HAL_SPI_TransmitReceive+0x290>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800953e:	68da      	ldr	r2, [r3, #12]
 8009540:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009542:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009544:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009546:	3302      	adds	r3, #2
 8009548:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800954a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800954e:	b29b      	uxth	r3, r3
 8009550:	3b02      	subs	r3, #2
 8009552:	b29b      	uxth	r3, r3
 8009554:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009558:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800955c:	b29b      	uxth	r3, r3
 800955e:	2b01      	cmp	r3, #1
 8009560:	d9ab      	bls.n	80094ba <HAL_SPI_TransmitReceive+0x282>
        txallowed = 1U;
 8009562:	2701      	movs	r7, #1
 8009564:	e7be      	b.n	80094e4 <HAL_SPI_TransmitReceive+0x2ac>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009566:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800956c:	d017      	beq.n	800959e <HAL_SPI_TransmitReceive+0x366>
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800956e:	6823      	ldr	r3, [r4, #0]
 8009570:	689a      	ldr	r2, [r3, #8]
 8009572:	f012 0f10 	tst.w	r2, #16
 8009576:	d045      	beq.n	8009604 <HAL_SPI_TransmitReceive+0x3cc>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009578:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800957a:	f042 0202 	orr.w	r2, r2, #2
 800957e:	6622      	str	r2, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009580:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8009584:	609a      	str	r2, [r3, #8]
    errorcode = HAL_ERROR;
 8009586:	2701      	movs	r7, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009588:	4632      	mov	r2, r6
 800958a:	4629      	mov	r1, r5
 800958c:	4620      	mov	r0, r4
 800958e:	f7ff fc79 	bl	8008e84 <SPI_EndRxTxTransaction>
 8009592:	2800      	cmp	r0, #0
 8009594:	d039      	beq.n	800960a <HAL_SPI_TransmitReceive+0x3d2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009596:	2320      	movs	r3, #32
 8009598:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800959a:	2701      	movs	r7, #1
 800959c:	e035      	b.n	800960a <HAL_SPI_TransmitReceive+0x3d2>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800959e:	9600      	str	r6, [sp, #0]
 80095a0:	462b      	mov	r3, r5
 80095a2:	2201      	movs	r2, #1
 80095a4:	4611      	mov	r1, r2
 80095a6:	4620      	mov	r0, r4
 80095a8:	f7ff fb92 	bl	8008cd0 <SPI_WaitFlagStateUntilTimeout>
 80095ac:	b9c8      	cbnz	r0, 80095e2 <HAL_SPI_TransmitReceive+0x3aa>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80095ae:	68e3      	ldr	r3, [r4, #12]
 80095b0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80095b4:	d01b      	beq.n	80095ee <HAL_SPI_TransmitReceive+0x3b6>
      tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	7b1b      	ldrb	r3, [r3, #12]
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 80095be:	9b03      	ldr	r3, [sp, #12]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80095c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d1d3      	bne.n	800956e <HAL_SPI_TransmitReceive+0x336>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80095c6:	9600      	str	r6, [sp, #0]
 80095c8:	462b      	mov	r3, r5
 80095ca:	2201      	movs	r2, #1
 80095cc:	4611      	mov	r1, r2
 80095ce:	4620      	mov	r0, r4
 80095d0:	f7ff fb7e 	bl	8008cd0 <SPI_WaitFlagStateUntilTimeout>
 80095d4:	b980      	cbnz	r0, 80095f8 <HAL_SPI_TransmitReceive+0x3c0>
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	7b1b      	ldrb	r3, [r3, #12]
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	9303      	str	r3, [sp, #12]
        UNUSED(tmpreg);
 80095de:	9b03      	ldr	r3, [sp, #12]
 80095e0:	e7c5      	b.n	800956e <HAL_SPI_TransmitReceive+0x336>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80095e2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80095e4:	f043 0302 	orr.w	r3, r3, #2
 80095e8:	6623      	str	r3, [r4, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80095ea:	2703      	movs	r7, #3
      goto error;
 80095ec:	e00d      	b.n	800960a <HAL_SPI_TransmitReceive+0x3d2>
      tmpreg = READ_REG(hspi->Instance->DR);
 80095ee:	6823      	ldr	r3, [r4, #0]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 80095f4:	9b03      	ldr	r3, [sp, #12]
 80095f6:	e7ba      	b.n	800956e <HAL_SPI_TransmitReceive+0x336>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80095f8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80095fa:	f043 0302 	orr.w	r3, r3, #2
 80095fe:	6623      	str	r3, [r4, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8009600:	2703      	movs	r7, #3
          goto error;
 8009602:	e002      	b.n	800960a <HAL_SPI_TransmitReceive+0x3d2>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009604:	2700      	movs	r7, #0
 8009606:	e7bf      	b.n	8009588 <HAL_SPI_TransmitReceive+0x350>
    errorcode = HAL_BUSY;
 8009608:	2702      	movs	r7, #2
  hspi->State = HAL_SPI_STATE_READY;
 800960a:	2301      	movs	r3, #1
 800960c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009610:	2300      	movs	r3, #0
 8009612:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8009616:	4638      	mov	r0, r7
 8009618:	b005      	add	sp, #20
 800961a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    errorcode = HAL_BUSY;
 800961e:	2702      	movs	r7, #2
 8009620:	e7f3      	b.n	800960a <HAL_SPI_TransmitReceive+0x3d2>
 8009622:	2702      	movs	r7, #2
 8009624:	e7f1      	b.n	800960a <HAL_SPI_TransmitReceive+0x3d2>
    errorcode = HAL_ERROR;
 8009626:	2701      	movs	r7, #1
 8009628:	e7ef      	b.n	800960a <HAL_SPI_TransmitReceive+0x3d2>
 800962a:	2701      	movs	r7, #1
 800962c:	e7ed      	b.n	800960a <HAL_SPI_TransmitReceive+0x3d2>
 800962e:	2701      	movs	r7, #1
 8009630:	e7eb      	b.n	800960a <HAL_SPI_TransmitReceive+0x3d2>
        errorcode = HAL_TIMEOUT;
 8009632:	2703      	movs	r7, #3
 8009634:	e7e9      	b.n	800960a <HAL_SPI_TransmitReceive+0x3d2>
        errorcode = HAL_TIMEOUT;
 8009636:	2703      	movs	r7, #3
 8009638:	e7e7      	b.n	800960a <HAL_SPI_TransmitReceive+0x3d2>
 800963a:	2703      	movs	r7, #3
 800963c:	e7e5      	b.n	800960a <HAL_SPI_TransmitReceive+0x3d2>
  __HAL_LOCK(hspi);
 800963e:	2702      	movs	r7, #2
 8009640:	e7e9      	b.n	8009616 <HAL_SPI_TransmitReceive+0x3de>

08009642 <HAL_SPI_GetState>:
  return hspi->State;
 8009642:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 8009646:	4770      	bx	lr

08009648 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009648:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800964a:	6a03      	ldr	r3, [r0, #32]
 800964c:	f023 0301 	bic.w	r3, r3, #1
 8009650:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009652:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009654:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009656:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800965c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009660:	680d      	ldr	r5, [r1, #0]
 8009662:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009664:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009668:	688b      	ldr	r3, [r1, #8]
 800966a:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800966c:	4a1c      	ldr	r2, [pc, #112]	; (80096e0 <TIM_OC1_SetConfig+0x98>)
 800966e:	4290      	cmp	r0, r2
 8009670:	d00f      	beq.n	8009692 <TIM_OC1_SetConfig+0x4a>
 8009672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009676:	4290      	cmp	r0, r2
 8009678:	d00b      	beq.n	8009692 <TIM_OC1_SetConfig+0x4a>
 800967a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800967e:	4290      	cmp	r0, r2
 8009680:	d007      	beq.n	8009692 <TIM_OC1_SetConfig+0x4a>
 8009682:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009686:	4290      	cmp	r0, r2
 8009688:	d003      	beq.n	8009692 <TIM_OC1_SetConfig+0x4a>
 800968a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800968e:	4290      	cmp	r0, r2
 8009690:	d105      	bne.n	800969e <TIM_OC1_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009692:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009696:	68ca      	ldr	r2, [r1, #12]
 8009698:	431a      	orrs	r2, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800969a:	f022 0304 	bic.w	r3, r2, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800969e:	4a10      	ldr	r2, [pc, #64]	; (80096e0 <TIM_OC1_SetConfig+0x98>)
 80096a0:	4290      	cmp	r0, r2
 80096a2:	d00f      	beq.n	80096c4 <TIM_OC1_SetConfig+0x7c>
 80096a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096a8:	4290      	cmp	r0, r2
 80096aa:	d00b      	beq.n	80096c4 <TIM_OC1_SetConfig+0x7c>
 80096ac:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80096b0:	4290      	cmp	r0, r2
 80096b2:	d007      	beq.n	80096c4 <TIM_OC1_SetConfig+0x7c>
 80096b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80096b8:	4290      	cmp	r0, r2
 80096ba:	d003      	beq.n	80096c4 <TIM_OC1_SetConfig+0x7c>
 80096bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80096c0:	4290      	cmp	r0, r2
 80096c2:	d105      	bne.n	80096d0 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80096c4:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80096c8:	694a      	ldr	r2, [r1, #20]
 80096ca:	4322      	orrs	r2, r4
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80096cc:	698c      	ldr	r4, [r1, #24]
 80096ce:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096d0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096d2:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80096d4:	684a      	ldr	r2, [r1, #4]
 80096d6:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096d8:	6203      	str	r3, [r0, #32]
}
 80096da:	bc30      	pop	{r4, r5}
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	40012c00 	.word	0x40012c00

080096e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096e4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096e6:	6a03      	ldr	r3, [r0, #32]
 80096e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096f0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096f2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80096f8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096fc:	680d      	ldr	r5, [r1, #0]
 80096fe:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009700:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009704:	688a      	ldr	r2, [r1, #8]
 8009706:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800970a:	4a18      	ldr	r2, [pc, #96]	; (800976c <TIM_OC3_SetConfig+0x88>)
 800970c:	4290      	cmp	r0, r2
 800970e:	d003      	beq.n	8009718 <TIM_OC3_SetConfig+0x34>
 8009710:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009714:	4290      	cmp	r0, r2
 8009716:	d106      	bne.n	8009726 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009718:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800971c:	68ca      	ldr	r2, [r1, #12]
 800971e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009722:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009726:	4a11      	ldr	r2, [pc, #68]	; (800976c <TIM_OC3_SetConfig+0x88>)
 8009728:	4290      	cmp	r0, r2
 800972a:	d00f      	beq.n	800974c <TIM_OC3_SetConfig+0x68>
 800972c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009730:	4290      	cmp	r0, r2
 8009732:	d00b      	beq.n	800974c <TIM_OC3_SetConfig+0x68>
 8009734:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009738:	4290      	cmp	r0, r2
 800973a:	d007      	beq.n	800974c <TIM_OC3_SetConfig+0x68>
 800973c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009740:	4290      	cmp	r0, r2
 8009742:	d003      	beq.n	800974c <TIM_OC3_SetConfig+0x68>
 8009744:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009748:	4290      	cmp	r0, r2
 800974a:	d107      	bne.n	800975c <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800974c:	f424 5240 	bic.w	r2, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009750:	694c      	ldr	r4, [r1, #20]
 8009752:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009756:	698c      	ldr	r4, [r1, #24]
 8009758:	ea42 1404 	orr.w	r4, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800975c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800975e:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009760:	684a      	ldr	r2, [r1, #4]
 8009762:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009764:	6203      	str	r3, [r0, #32]
}
 8009766:	bc30      	pop	{r4, r5}
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	40012c00 	.word	0x40012c00

08009770 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009770:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009772:	6a03      	ldr	r3, [r0, #32]
 8009774:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009778:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800977a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800977c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800977e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009780:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009784:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009788:	680d      	ldr	r5, [r1, #0]
 800978a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800978e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009792:	688d      	ldr	r5, [r1, #8]
 8009794:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009798:	4d0f      	ldr	r5, [pc, #60]	; (80097d8 <TIM_OC4_SetConfig+0x68>)
 800979a:	42a8      	cmp	r0, r5
 800979c:	d00f      	beq.n	80097be <TIM_OC4_SetConfig+0x4e>
 800979e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80097a2:	42a8      	cmp	r0, r5
 80097a4:	d00b      	beq.n	80097be <TIM_OC4_SetConfig+0x4e>
 80097a6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80097aa:	42a8      	cmp	r0, r5
 80097ac:	d007      	beq.n	80097be <TIM_OC4_SetConfig+0x4e>
 80097ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80097b2:	42a8      	cmp	r0, r5
 80097b4:	d003      	beq.n	80097be <TIM_OC4_SetConfig+0x4e>
 80097b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80097ba:	42a8      	cmp	r0, r5
 80097bc:	d104      	bne.n	80097c8 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097be:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097c2:	694d      	ldr	r5, [r1, #20]
 80097c4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097c8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097ca:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097cc:	684a      	ldr	r2, [r1, #4]
 80097ce:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097d0:	6203      	str	r3, [r0, #32]
}
 80097d2:	bc30      	pop	{r4, r5}
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	40012c00 	.word	0x40012c00

080097dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80097dc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80097de:	6a03      	ldr	r3, [r0, #32]
 80097e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097e4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097e6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097e8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097ea:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80097ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80097f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097f4:	680d      	ldr	r5, [r1, #0]
 80097f6:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80097f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80097fc:	688a      	ldr	r2, [r1, #8]
 80097fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009802:	4a0f      	ldr	r2, [pc, #60]	; (8009840 <TIM_OC5_SetConfig+0x64>)
 8009804:	4290      	cmp	r0, r2
 8009806:	d00f      	beq.n	8009828 <TIM_OC5_SetConfig+0x4c>
 8009808:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800980c:	4290      	cmp	r0, r2
 800980e:	d00b      	beq.n	8009828 <TIM_OC5_SetConfig+0x4c>
 8009810:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009814:	4290      	cmp	r0, r2
 8009816:	d007      	beq.n	8009828 <TIM_OC5_SetConfig+0x4c>
 8009818:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800981c:	4290      	cmp	r0, r2
 800981e:	d003      	beq.n	8009828 <TIM_OC5_SetConfig+0x4c>
 8009820:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009824:	4290      	cmp	r0, r2
 8009826:	d104      	bne.n	8009832 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009828:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800982c:	694a      	ldr	r2, [r1, #20]
 800982e:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009832:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009834:	6545      	str	r5, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009836:	684a      	ldr	r2, [r1, #4]
 8009838:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800983a:	6203      	str	r3, [r0, #32]
}
 800983c:	bc30      	pop	{r4, r5}
 800983e:	4770      	bx	lr
 8009840:	40012c00 	.word	0x40012c00

08009844 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009844:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009846:	6a03      	ldr	r3, [r0, #32]
 8009848:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800984c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800984e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009850:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009852:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009854:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009858:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800985c:	680d      	ldr	r5, [r1, #0]
 800985e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009862:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009866:	688d      	ldr	r5, [r1, #8]
 8009868:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800986c:	4d0f      	ldr	r5, [pc, #60]	; (80098ac <TIM_OC6_SetConfig+0x68>)
 800986e:	42a8      	cmp	r0, r5
 8009870:	d00f      	beq.n	8009892 <TIM_OC6_SetConfig+0x4e>
 8009872:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009876:	42a8      	cmp	r0, r5
 8009878:	d00b      	beq.n	8009892 <TIM_OC6_SetConfig+0x4e>
 800987a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800987e:	42a8      	cmp	r0, r5
 8009880:	d007      	beq.n	8009892 <TIM_OC6_SetConfig+0x4e>
 8009882:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009886:	42a8      	cmp	r0, r5
 8009888:	d003      	beq.n	8009892 <TIM_OC6_SetConfig+0x4e>
 800988a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800988e:	42a8      	cmp	r0, r5
 8009890:	d104      	bne.n	800989c <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009892:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009896:	694d      	ldr	r5, [r1, #20]
 8009898:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800989c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800989e:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80098a0:	684a      	ldr	r2, [r1, #4]
 80098a2:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098a4:	6203      	str	r3, [r0, #32]
}
 80098a6:	bc30      	pop	{r4, r5}
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	40012c00 	.word	0x40012c00

080098b0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80098b0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d136      	bne.n	8009928 <HAL_TIM_Base_Start_IT+0x78>
  htim->State = HAL_TIM_STATE_BUSY;
 80098ba:	2302      	movs	r3, #2
 80098bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098c0:	6802      	ldr	r2, [r0, #0]
 80098c2:	68d3      	ldr	r3, [r2, #12]
 80098c4:	f043 0301 	orr.w	r3, r3, #1
 80098c8:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098ca:	6803      	ldr	r3, [r0, #0]
 80098cc:	4a19      	ldr	r2, [pc, #100]	; (8009934 <HAL_TIM_Base_Start_IT+0x84>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d01c      	beq.n	800990c <HAL_TIM_Base_Start_IT+0x5c>
 80098d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098d6:	d019      	beq.n	800990c <HAL_TIM_Base_Start_IT+0x5c>
 80098d8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80098dc:	4293      	cmp	r3, r2
 80098de:	d015      	beq.n	800990c <HAL_TIM_Base_Start_IT+0x5c>
 80098e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d011      	beq.n	800990c <HAL_TIM_Base_Start_IT+0x5c>
 80098e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d00d      	beq.n	800990c <HAL_TIM_Base_Start_IT+0x5c>
 80098f0:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d009      	beq.n	800990c <HAL_TIM_Base_Start_IT+0x5c>
 80098f8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d005      	beq.n	800990c <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	f042 0201 	orr.w	r2, r2, #1
 8009906:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009908:	2000      	movs	r0, #0
 800990a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800990c:	6899      	ldr	r1, [r3, #8]
 800990e:	4a0a      	ldr	r2, [pc, #40]	; (8009938 <HAL_TIM_Base_Start_IT+0x88>)
 8009910:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009912:	2a06      	cmp	r2, #6
 8009914:	d00a      	beq.n	800992c <HAL_TIM_Base_Start_IT+0x7c>
 8009916:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800991a:	d009      	beq.n	8009930 <HAL_TIM_Base_Start_IT+0x80>
      __HAL_TIM_ENABLE(htim);
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	f042 0201 	orr.w	r2, r2, #1
 8009922:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009924:	2000      	movs	r0, #0
 8009926:	4770      	bx	lr
    return HAL_ERROR;
 8009928:	2001      	movs	r0, #1
 800992a:	4770      	bx	lr
  return HAL_OK;
 800992c:	2000      	movs	r0, #0
 800992e:	4770      	bx	lr
 8009930:	2000      	movs	r0, #0
}
 8009932:	4770      	bx	lr
 8009934:	40012c00 	.word	0x40012c00
 8009938:	00010007 	.word	0x00010007

0800993c <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 800993c:	290c      	cmp	r1, #12
 800993e:	d814      	bhi.n	800996a <HAL_TIM_ReadCapturedValue+0x2e>
 8009940:	e8df f001 	tbb	[pc, r1]
 8009944:	13131307 	.word	0x13131307
 8009948:	1313130a 	.word	0x1313130a
 800994c:	1313130d 	.word	0x1313130d
 8009950:	10          	.byte	0x10
 8009951:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 8009952:	6803      	ldr	r3, [r0, #0]
 8009954:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 8009956:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8009958:	6803      	ldr	r3, [r0, #0]
 800995a:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 800995c:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 800995e:	6803      	ldr	r3, [r0, #0]
 8009960:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 8009962:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 8009964:	6803      	ldr	r3, [r0, #0]
 8009966:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 8009968:	4770      	bx	lr
  switch (Channel)
 800996a:	2000      	movs	r0, #0
}
 800996c:	4770      	bx	lr

0800996e <HAL_TIM_IC_CaptureCallback>:
}
 800996e:	4770      	bx	lr

08009970 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8009970:	4770      	bx	lr

08009972 <HAL_TIM_TriggerCallback>:
}
 8009972:	4770      	bx	lr

08009974 <HAL_TIM_IRQHandler>:
{
 8009974:	b510      	push	{r4, lr}
 8009976:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009978:	6803      	ldr	r3, [r0, #0]
 800997a:	691a      	ldr	r2, [r3, #16]
 800997c:	f012 0f02 	tst.w	r2, #2
 8009980:	d011      	beq.n	80099a6 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009982:	68da      	ldr	r2, [r3, #12]
 8009984:	f012 0f02 	tst.w	r2, #2
 8009988:	d00d      	beq.n	80099a6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800998a:	f06f 0202 	mvn.w	r2, #2
 800998e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009990:	2301      	movs	r3, #1
 8009992:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009994:	6803      	ldr	r3, [r0, #0]
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	f013 0f03 	tst.w	r3, #3
 800999c:	d079      	beq.n	8009a92 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800999e:	f7ff ffe6 	bl	800996e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099a2:	2300      	movs	r3, #0
 80099a4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80099a6:	6823      	ldr	r3, [r4, #0]
 80099a8:	691a      	ldr	r2, [r3, #16]
 80099aa:	f012 0f04 	tst.w	r2, #4
 80099ae:	d012      	beq.n	80099d6 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80099b0:	68da      	ldr	r2, [r3, #12]
 80099b2:	f012 0f04 	tst.w	r2, #4
 80099b6:	d00e      	beq.n	80099d6 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80099b8:	f06f 0204 	mvn.w	r2, #4
 80099bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099be:	2302      	movs	r3, #2
 80099c0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80099c2:	6823      	ldr	r3, [r4, #0]
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80099ca:	d068      	beq.n	8009a9e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80099cc:	4620      	mov	r0, r4
 80099ce:	f7ff ffce 	bl	800996e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099d2:	2300      	movs	r3, #0
 80099d4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80099d6:	6823      	ldr	r3, [r4, #0]
 80099d8:	691a      	ldr	r2, [r3, #16]
 80099da:	f012 0f08 	tst.w	r2, #8
 80099de:	d012      	beq.n	8009a06 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80099e0:	68da      	ldr	r2, [r3, #12]
 80099e2:	f012 0f08 	tst.w	r2, #8
 80099e6:	d00e      	beq.n	8009a06 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80099e8:	f06f 0208 	mvn.w	r2, #8
 80099ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099ee:	2304      	movs	r3, #4
 80099f0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099f2:	6823      	ldr	r3, [r4, #0]
 80099f4:	69db      	ldr	r3, [r3, #28]
 80099f6:	f013 0f03 	tst.w	r3, #3
 80099fa:	d057      	beq.n	8009aac <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80099fc:	4620      	mov	r0, r4
 80099fe:	f7ff ffb6 	bl	800996e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a02:	2300      	movs	r3, #0
 8009a04:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a06:	6823      	ldr	r3, [r4, #0]
 8009a08:	691a      	ldr	r2, [r3, #16]
 8009a0a:	f012 0f10 	tst.w	r2, #16
 8009a0e:	d012      	beq.n	8009a36 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a10:	68da      	ldr	r2, [r3, #12]
 8009a12:	f012 0f10 	tst.w	r2, #16
 8009a16:	d00e      	beq.n	8009a36 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a18:	f06f 0210 	mvn.w	r2, #16
 8009a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a1e:	2308      	movs	r3, #8
 8009a20:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a22:	6823      	ldr	r3, [r4, #0]
 8009a24:	69db      	ldr	r3, [r3, #28]
 8009a26:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009a2a:	d046      	beq.n	8009aba <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	f7ff ff9e 	bl	800996e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a32:	2300      	movs	r3, #0
 8009a34:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	691a      	ldr	r2, [r3, #16]
 8009a3a:	f012 0f01 	tst.w	r2, #1
 8009a3e:	d003      	beq.n	8009a48 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a40:	68da      	ldr	r2, [r3, #12]
 8009a42:	f012 0f01 	tst.w	r2, #1
 8009a46:	d13f      	bne.n	8009ac8 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a48:	6823      	ldr	r3, [r4, #0]
 8009a4a:	691a      	ldr	r2, [r3, #16]
 8009a4c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009a50:	d003      	beq.n	8009a5a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a52:	68da      	ldr	r2, [r3, #12]
 8009a54:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009a58:	d13d      	bne.n	8009ad6 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	691a      	ldr	r2, [r3, #16]
 8009a5e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8009a62:	d003      	beq.n	8009a6c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a64:	68da      	ldr	r2, [r3, #12]
 8009a66:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009a6a:	d13b      	bne.n	8009ae4 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a6c:	6823      	ldr	r3, [r4, #0]
 8009a6e:	691a      	ldr	r2, [r3, #16]
 8009a70:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009a74:	d003      	beq.n	8009a7e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a76:	68da      	ldr	r2, [r3, #12]
 8009a78:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009a7c:	d139      	bne.n	8009af2 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a7e:	6823      	ldr	r3, [r4, #0]
 8009a80:	691a      	ldr	r2, [r3, #16]
 8009a82:	f012 0f20 	tst.w	r2, #32
 8009a86:	d003      	beq.n	8009a90 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a88:	68da      	ldr	r2, [r3, #12]
 8009a8a:	f012 0f20 	tst.w	r2, #32
 8009a8e:	d137      	bne.n	8009b00 <HAL_TIM_IRQHandler+0x18c>
}
 8009a90:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a92:	f7fb fef1 	bl	8005878 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a96:	4620      	mov	r0, r4
 8009a98:	f7ff ff6a 	bl	8009970 <HAL_TIM_PWM_PulseFinishedCallback>
 8009a9c:	e781      	b.n	80099a2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	f7fb feea 	bl	8005878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f7ff ff63 	bl	8009970 <HAL_TIM_PWM_PulseFinishedCallback>
 8009aaa:	e792      	b.n	80099d2 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aac:	4620      	mov	r0, r4
 8009aae:	f7fb fee3 	bl	8005878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f7ff ff5c 	bl	8009970 <HAL_TIM_PWM_PulseFinishedCallback>
 8009ab8:	e7a3      	b.n	8009a02 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aba:	4620      	mov	r0, r4
 8009abc:	f7fb fedc 	bl	8005878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f7ff ff55 	bl	8009970 <HAL_TIM_PWM_PulseFinishedCallback>
 8009ac6:	e7b4      	b.n	8009a32 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009ac8:	f06f 0201 	mvn.w	r2, #1
 8009acc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f7fb fee8 	bl	80058a4 <HAL_TIM_PeriodElapsedCallback>
 8009ad4:	e7b8      	b.n	8009a48 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ad6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ada:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009adc:	4620      	mov	r0, r4
 8009ade:	f000 fac0 	bl	800a062 <HAL_TIMEx_BreakCallback>
 8009ae2:	e7ba      	b.n	8009a5a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ae4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009ae8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8009aea:	4620      	mov	r0, r4
 8009aec:	f000 faba 	bl	800a064 <HAL_TIMEx_Break2Callback>
 8009af0:	e7bc      	b.n	8009a6c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009af2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009af6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009af8:	4620      	mov	r0, r4
 8009afa:	f7ff ff3a 	bl	8009972 <HAL_TIM_TriggerCallback>
 8009afe:	e7be      	b.n	8009a7e <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b00:	f06f 0220 	mvn.w	r2, #32
 8009b04:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8009b06:	4620      	mov	r0, r4
 8009b08:	f000 faaa 	bl	800a060 <HAL_TIMEx_CommutCallback>
}
 8009b0c:	e7c0      	b.n	8009a90 <HAL_TIM_IRQHandler+0x11c>
	...

08009b10 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8009b10:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b12:	4a30      	ldr	r2, [pc, #192]	; (8009bd4 <TIM_Base_SetConfig+0xc4>)
 8009b14:	4290      	cmp	r0, r2
 8009b16:	d012      	beq.n	8009b3e <TIM_Base_SetConfig+0x2e>
 8009b18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009b1c:	d00f      	beq.n	8009b3e <TIM_Base_SetConfig+0x2e>
 8009b1e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009b22:	4290      	cmp	r0, r2
 8009b24:	d00b      	beq.n	8009b3e <TIM_Base_SetConfig+0x2e>
 8009b26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b2a:	4290      	cmp	r0, r2
 8009b2c:	d007      	beq.n	8009b3e <TIM_Base_SetConfig+0x2e>
 8009b2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b32:	4290      	cmp	r0, r2
 8009b34:	d003      	beq.n	8009b3e <TIM_Base_SetConfig+0x2e>
 8009b36:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009b3a:	4290      	cmp	r0, r2
 8009b3c:	d103      	bne.n	8009b46 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009b42:	684a      	ldr	r2, [r1, #4]
 8009b44:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b46:	4a23      	ldr	r2, [pc, #140]	; (8009bd4 <TIM_Base_SetConfig+0xc4>)
 8009b48:	4290      	cmp	r0, r2
 8009b4a:	d01e      	beq.n	8009b8a <TIM_Base_SetConfig+0x7a>
 8009b4c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009b50:	d01b      	beq.n	8009b8a <TIM_Base_SetConfig+0x7a>
 8009b52:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009b56:	4290      	cmp	r0, r2
 8009b58:	d017      	beq.n	8009b8a <TIM_Base_SetConfig+0x7a>
 8009b5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b5e:	4290      	cmp	r0, r2
 8009b60:	d013      	beq.n	8009b8a <TIM_Base_SetConfig+0x7a>
 8009b62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b66:	4290      	cmp	r0, r2
 8009b68:	d00f      	beq.n	8009b8a <TIM_Base_SetConfig+0x7a>
 8009b6a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009b6e:	4290      	cmp	r0, r2
 8009b70:	d00b      	beq.n	8009b8a <TIM_Base_SetConfig+0x7a>
 8009b72:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009b76:	4290      	cmp	r0, r2
 8009b78:	d007      	beq.n	8009b8a <TIM_Base_SetConfig+0x7a>
 8009b7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b7e:	4290      	cmp	r0, r2
 8009b80:	d003      	beq.n	8009b8a <TIM_Base_SetConfig+0x7a>
 8009b82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b86:	4290      	cmp	r0, r2
 8009b88:	d103      	bne.n	8009b92 <TIM_Base_SetConfig+0x82>
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b8e:	68ca      	ldr	r2, [r1, #12]
 8009b90:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b96:	694a      	ldr	r2, [r1, #20]
 8009b98:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009b9a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b9c:	688b      	ldr	r3, [r1, #8]
 8009b9e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009ba0:	680b      	ldr	r3, [r1, #0]
 8009ba2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ba4:	4b0b      	ldr	r3, [pc, #44]	; (8009bd4 <TIM_Base_SetConfig+0xc4>)
 8009ba6:	4298      	cmp	r0, r3
 8009ba8:	d00f      	beq.n	8009bca <TIM_Base_SetConfig+0xba>
 8009baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bae:	4298      	cmp	r0, r3
 8009bb0:	d00b      	beq.n	8009bca <TIM_Base_SetConfig+0xba>
 8009bb2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8009bb6:	4298      	cmp	r0, r3
 8009bb8:	d007      	beq.n	8009bca <TIM_Base_SetConfig+0xba>
 8009bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bbe:	4298      	cmp	r0, r3
 8009bc0:	d003      	beq.n	8009bca <TIM_Base_SetConfig+0xba>
 8009bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bc6:	4298      	cmp	r0, r3
 8009bc8:	d101      	bne.n	8009bce <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8009bca:	690b      	ldr	r3, [r1, #16]
 8009bcc:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	6143      	str	r3, [r0, #20]
}
 8009bd2:	4770      	bx	lr
 8009bd4:	40012c00 	.word	0x40012c00

08009bd8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8009bd8:	b360      	cbz	r0, 8009c34 <HAL_TIM_Base_Init+0x5c>
{
 8009bda:	b510      	push	{r4, lr}
 8009bdc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8009bde:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009be2:	b313      	cbz	r3, 8009c2a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8009be4:	2302      	movs	r3, #2
 8009be6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bea:	4621      	mov	r1, r4
 8009bec:	f851 0b04 	ldr.w	r0, [r1], #4
 8009bf0:	f7ff ff8e 	bl	8009b10 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bfa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009bfe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009c02:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009c06:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009c0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c12:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009c16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c1a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009c1e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009c22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8009c26:	2000      	movs	r0, #0
}
 8009c28:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8009c2a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009c2e:	f7fc fc25 	bl	800647c <HAL_TIM_Base_MspInit>
 8009c32:	e7d7      	b.n	8009be4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8009c34:	2001      	movs	r0, #1
}
 8009c36:	4770      	bx	lr

08009c38 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8009c38:	b360      	cbz	r0, 8009c94 <HAL_TIM_OC_Init+0x5c>
{
 8009c3a:	b510      	push	{r4, lr}
 8009c3c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8009c3e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009c42:	b313      	cbz	r3, 8009c8a <HAL_TIM_OC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8009c44:	2302      	movs	r3, #2
 8009c46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009c4a:	4621      	mov	r1, r4
 8009c4c:	f851 0b04 	ldr.w	r0, [r1], #4
 8009c50:	f7ff ff5e 	bl	8009b10 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c54:	2301      	movs	r3, #1
 8009c56:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c5a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009c5e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009c62:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009c66:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009c6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c72:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009c76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c7a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009c7e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009c82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8009c86:	2000      	movs	r0, #0
}
 8009c88:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8009c8a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8009c8e:	f7fc fc2d 	bl	80064ec <HAL_TIM_OC_MspInit>
 8009c92:	e7d7      	b.n	8009c44 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8009c94:	2001      	movs	r0, #1
}
 8009c96:	4770      	bx	lr

08009c98 <TIM_OC2_SetConfig>:
{
 8009c98:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c9a:	6a03      	ldr	r3, [r0, #32]
 8009c9c:	f023 0310 	bic.w	r3, r3, #16
 8009ca0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8009ca2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8009ca4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8009ca6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ca8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009cac:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cb0:	680d      	ldr	r5, [r1, #0]
 8009cb2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8009cb6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009cba:	688d      	ldr	r5, [r1, #8]
 8009cbc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009cc0:	4d17      	ldr	r5, [pc, #92]	; (8009d20 <TIM_OC2_SetConfig+0x88>)
 8009cc2:	42a8      	cmp	r0, r5
 8009cc4:	d003      	beq.n	8009cce <TIM_OC2_SetConfig+0x36>
 8009cc6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009cca:	42a8      	cmp	r0, r5
 8009ccc:	d106      	bne.n	8009cdc <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 8009cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009cd2:	68cd      	ldr	r5, [r1, #12]
 8009cd4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8009cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cdc:	4d10      	ldr	r5, [pc, #64]	; (8009d20 <TIM_OC2_SetConfig+0x88>)
 8009cde:	42a8      	cmp	r0, r5
 8009ce0:	d00f      	beq.n	8009d02 <TIM_OC2_SetConfig+0x6a>
 8009ce2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009ce6:	42a8      	cmp	r0, r5
 8009ce8:	d00b      	beq.n	8009d02 <TIM_OC2_SetConfig+0x6a>
 8009cea:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009cee:	42a8      	cmp	r0, r5
 8009cf0:	d007      	beq.n	8009d02 <TIM_OC2_SetConfig+0x6a>
 8009cf2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009cf6:	42a8      	cmp	r0, r5
 8009cf8:	d003      	beq.n	8009d02 <TIM_OC2_SetConfig+0x6a>
 8009cfa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009cfe:	42a8      	cmp	r0, r5
 8009d00:	d107      	bne.n	8009d12 <TIM_OC2_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d02:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d06:	694c      	ldr	r4, [r1, #20]
 8009d08:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d0c:	698c      	ldr	r4, [r1, #24]
 8009d0e:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8009d12:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009d14:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8009d16:	684a      	ldr	r2, [r1, #4]
 8009d18:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8009d1a:	6203      	str	r3, [r0, #32]
}
 8009d1c:	bc30      	pop	{r4, r5}
 8009d1e:	4770      	bx	lr
 8009d20:	40012c00 	.word	0x40012c00

08009d24 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8009d24:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d02e      	beq.n	8009d8a <HAL_TIM_OC_ConfigChannel+0x66>
{
 8009d2c:	b510      	push	{r4, lr}
 8009d2e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8009d30:	2301      	movs	r3, #1
 8009d32:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8009d36:	2a14      	cmp	r2, #20
 8009d38:	d80f      	bhi.n	8009d5a <HAL_TIM_OC_ConfigChannel+0x36>
 8009d3a:	e8df f002 	tbb	[pc, r2]
 8009d3e:	0e0b      	.short	0x0e0b
 8009d40:	0e120e0e 	.word	0x0e120e0e
 8009d44:	0e160e0e 	.word	0x0e160e0e
 8009d48:	0e1a0e0e 	.word	0x0e1a0e0e
 8009d4c:	0e1e0e0e 	.word	0x0e1e0e0e
 8009d50:	0e0e      	.short	0x0e0e
 8009d52:	22          	.byte	0x22
 8009d53:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d54:	6800      	ldr	r0, [r0, #0]
 8009d56:	f7ff fc77 	bl	8009648 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8009d60:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d62:	6800      	ldr	r0, [r0, #0]
 8009d64:	f7ff ff98 	bl	8009c98 <TIM_OC2_SetConfig>
      break;
 8009d68:	e7f7      	b.n	8009d5a <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d6a:	6800      	ldr	r0, [r0, #0]
 8009d6c:	f7ff fcba 	bl	80096e4 <TIM_OC3_SetConfig>
      break;
 8009d70:	e7f3      	b.n	8009d5a <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d72:	6800      	ldr	r0, [r0, #0]
 8009d74:	f7ff fcfc 	bl	8009770 <TIM_OC4_SetConfig>
      break;
 8009d78:	e7ef      	b.n	8009d5a <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009d7a:	6800      	ldr	r0, [r0, #0]
 8009d7c:	f7ff fd2e 	bl	80097dc <TIM_OC5_SetConfig>
      break;
 8009d80:	e7eb      	b.n	8009d5a <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009d82:	6800      	ldr	r0, [r0, #0]
 8009d84:	f7ff fd5e 	bl	8009844 <TIM_OC6_SetConfig>
      break;
 8009d88:	e7e7      	b.n	8009d5a <HAL_TIM_OC_ConfigChannel+0x36>
  __HAL_LOCK(htim);
 8009d8a:	2002      	movs	r0, #2
}
 8009d8c:	4770      	bx	lr

08009d8e <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d8e:	f001 011f 	and.w	r1, r1, #31
 8009d92:	f04f 0c01 	mov.w	ip, #1
 8009d96:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009d9a:	6a03      	ldr	r3, [r0, #32]
 8009d9c:	ea23 030c 	bic.w	r3, r3, ip
 8009da0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009da2:	6a03      	ldr	r3, [r0, #32]
 8009da4:	408a      	lsls	r2, r1
 8009da6:	4313      	orrs	r3, r2
 8009da8:	6203      	str	r3, [r0, #32]
}
 8009daa:	4770      	bx	lr

08009dac <HAL_TIM_OC_Start_IT>:
{
 8009dac:	b510      	push	{r4, lr}
 8009dae:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009db0:	2910      	cmp	r1, #16
 8009db2:	d83c      	bhi.n	8009e2e <HAL_TIM_OC_Start_IT+0x82>
 8009db4:	e8df f001 	tbb	[pc, r1]
 8009db8:	3b3b3b09 	.word	0x3b3b3b09
 8009dbc:	3b3b3b1f 	.word	0x3b3b3b1f
 8009dc0:	3b3b3b26 	.word	0x3b3b3b26
 8009dc4:	3b3b3b2d 	.word	0x3b3b3b2d
 8009dc8:	34          	.byte	0x34
 8009dc9:	00          	.byte	0x00
 8009dca:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	bf18      	it	ne
 8009dd4:	2301      	movne	r3, #1
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f040 80b4 	bne.w	8009f44 <HAL_TIM_OC_Start_IT+0x198>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ddc:	2910      	cmp	r1, #16
 8009dde:	d84b      	bhi.n	8009e78 <HAL_TIM_OC_Start_IT+0xcc>
 8009de0:	e8df f001 	tbb	[pc, r1]
 8009de4:	4a4a4a2c 	.word	0x4a4a4a2c
 8009de8:	4a4a4a3a 	.word	0x4a4a4a3a
 8009dec:	4a4a4a3e 	.word	0x4a4a4a3e
 8009df0:	4a4a4a42 	.word	0x4a4a4a42
 8009df4:	46          	.byte	0x46
 8009df5:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009df6:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	bf18      	it	ne
 8009e00:	2301      	movne	r3, #1
 8009e02:	e7e8      	b.n	8009dd6 <HAL_TIM_OC_Start_IT+0x2a>
 8009e04:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	bf18      	it	ne
 8009e0e:	2301      	movne	r3, #1
 8009e10:	e7e1      	b.n	8009dd6 <HAL_TIM_OC_Start_IT+0x2a>
 8009e12:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	bf18      	it	ne
 8009e1c:	2301      	movne	r3, #1
 8009e1e:	e7da      	b.n	8009dd6 <HAL_TIM_OC_Start_IT+0x2a>
 8009e20:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	3b01      	subs	r3, #1
 8009e28:	bf18      	it	ne
 8009e2a:	2301      	movne	r3, #1
 8009e2c:	e7d3      	b.n	8009dd6 <HAL_TIM_OC_Start_IT+0x2a>
 8009e2e:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	3b01      	subs	r3, #1
 8009e36:	bf18      	it	ne
 8009e38:	2301      	movne	r3, #1
 8009e3a:	e7cc      	b.n	8009dd6 <HAL_TIM_OC_Start_IT+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e3c:	2302      	movs	r3, #2
 8009e3e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  switch (Channel)
 8009e42:	290c      	cmp	r1, #12
 8009e44:	d821      	bhi.n	8009e8a <HAL_TIM_OC_Start_IT+0xde>
 8009e46:	e8df f001 	tbb	[pc, r1]
 8009e4a:	201b      	.short	0x201b
 8009e4c:	205d2020 	.word	0x205d2020
 8009e50:	20632020 	.word	0x20632020
 8009e54:	2020      	.short	0x2020
 8009e56:	69          	.byte	0x69
 8009e57:	00          	.byte	0x00
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e58:	2302      	movs	r3, #2
 8009e5a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009e5e:	e7f0      	b.n	8009e42 <HAL_TIM_OC_Start_IT+0x96>
 8009e60:	2302      	movs	r3, #2
 8009e62:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009e66:	e7ec      	b.n	8009e42 <HAL_TIM_OC_Start_IT+0x96>
 8009e68:	2302      	movs	r3, #2
 8009e6a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009e6e:	e7e8      	b.n	8009e42 <HAL_TIM_OC_Start_IT+0x96>
 8009e70:	2302      	movs	r3, #2
 8009e72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e76:	e7e4      	b.n	8009e42 <HAL_TIM_OC_Start_IT+0x96>
 8009e78:	2302      	movs	r3, #2
 8009e7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e7e:	e7e0      	b.n	8009e42 <HAL_TIM_OC_Start_IT+0x96>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009e80:	6822      	ldr	r2, [r4, #0]
 8009e82:	68d3      	ldr	r3, [r2, #12]
 8009e84:	f043 0302 	orr.w	r3, r3, #2
 8009e88:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	6820      	ldr	r0, [r4, #0]
 8009e8e:	f7ff ff7e 	bl	8009d8e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e92:	6823      	ldr	r3, [r4, #0]
 8009e94:	4a2e      	ldr	r2, [pc, #184]	; (8009f50 <HAL_TIM_OC_Start_IT+0x1a4>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d00f      	beq.n	8009eba <HAL_TIM_OC_Start_IT+0x10e>
 8009e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d00b      	beq.n	8009eba <HAL_TIM_OC_Start_IT+0x10e>
 8009ea2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d007      	beq.n	8009eba <HAL_TIM_OC_Start_IT+0x10e>
 8009eaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d003      	beq.n	8009eba <HAL_TIM_OC_Start_IT+0x10e>
 8009eb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d103      	bne.n	8009ec2 <HAL_TIM_OC_Start_IT+0x116>
    __HAL_TIM_MOE_ENABLE(htim);
 8009eba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ebc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ec0:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ec2:	6823      	ldr	r3, [r4, #0]
 8009ec4:	4a22      	ldr	r2, [pc, #136]	; (8009f50 <HAL_TIM_OC_Start_IT+0x1a4>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d02e      	beq.n	8009f28 <HAL_TIM_OC_Start_IT+0x17c>
 8009eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ece:	d02b      	beq.n	8009f28 <HAL_TIM_OC_Start_IT+0x17c>
 8009ed0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d027      	beq.n	8009f28 <HAL_TIM_OC_Start_IT+0x17c>
 8009ed8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d023      	beq.n	8009f28 <HAL_TIM_OC_Start_IT+0x17c>
 8009ee0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d01f      	beq.n	8009f28 <HAL_TIM_OC_Start_IT+0x17c>
 8009ee8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d01b      	beq.n	8009f28 <HAL_TIM_OC_Start_IT+0x17c>
 8009ef0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d017      	beq.n	8009f28 <HAL_TIM_OC_Start_IT+0x17c>
    __HAL_TIM_ENABLE(htim);
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	f042 0201 	orr.w	r2, r2, #1
 8009efe:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009f00:	2000      	movs	r0, #0
 8009f02:	e020      	b.n	8009f46 <HAL_TIM_OC_Start_IT+0x19a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009f04:	6822      	ldr	r2, [r4, #0]
 8009f06:	68d3      	ldr	r3, [r2, #12]
 8009f08:	f043 0304 	orr.w	r3, r3, #4
 8009f0c:	60d3      	str	r3, [r2, #12]
      break;
 8009f0e:	e7bc      	b.n	8009e8a <HAL_TIM_OC_Start_IT+0xde>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009f10:	6822      	ldr	r2, [r4, #0]
 8009f12:	68d3      	ldr	r3, [r2, #12]
 8009f14:	f043 0308 	orr.w	r3, r3, #8
 8009f18:	60d3      	str	r3, [r2, #12]
      break;
 8009f1a:	e7b6      	b.n	8009e8a <HAL_TIM_OC_Start_IT+0xde>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009f1c:	6822      	ldr	r2, [r4, #0]
 8009f1e:	68d3      	ldr	r3, [r2, #12]
 8009f20:	f043 0310 	orr.w	r3, r3, #16
 8009f24:	60d3      	str	r3, [r2, #12]
      break;
 8009f26:	e7b0      	b.n	8009e8a <HAL_TIM_OC_Start_IT+0xde>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f28:	6899      	ldr	r1, [r3, #8]
 8009f2a:	4a0a      	ldr	r2, [pc, #40]	; (8009f54 <HAL_TIM_OC_Start_IT+0x1a8>)
 8009f2c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f2e:	2a06      	cmp	r2, #6
 8009f30:	d00a      	beq.n	8009f48 <HAL_TIM_OC_Start_IT+0x19c>
 8009f32:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009f36:	d009      	beq.n	8009f4c <HAL_TIM_OC_Start_IT+0x1a0>
      __HAL_TIM_ENABLE(htim);
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	f042 0201 	orr.w	r2, r2, #1
 8009f3e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009f40:	2000      	movs	r0, #0
 8009f42:	e000      	b.n	8009f46 <HAL_TIM_OC_Start_IT+0x19a>
    return HAL_ERROR;
 8009f44:	2001      	movs	r0, #1
}
 8009f46:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8009f48:	2000      	movs	r0, #0
 8009f4a:	e7fc      	b.n	8009f46 <HAL_TIM_OC_Start_IT+0x19a>
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	e7fa      	b.n	8009f46 <HAL_TIM_OC_Start_IT+0x19a>
 8009f50:	40012c00 	.word	0x40012c00
 8009f54:	00010007 	.word	0x00010007

08009f58 <HAL_TIM_OC_Stop_IT>:
{
 8009f58:	b538      	push	{r3, r4, r5, lr}
 8009f5a:	4605      	mov	r5, r0
 8009f5c:	460c      	mov	r4, r1
  switch (Channel)
 8009f5e:	290c      	cmp	r1, #12
 8009f60:	d80d      	bhi.n	8009f7e <HAL_TIM_OC_Stop_IT+0x26>
 8009f62:	e8df f001 	tbb	[pc, r1]
 8009f66:	0c07      	.short	0x0c07
 8009f68:	0c480c0c 	.word	0x0c480c0c
 8009f6c:	0c4e0c0c 	.word	0x0c4e0c0c
 8009f70:	0c0c      	.short	0x0c0c
 8009f72:	54          	.byte	0x54
 8009f73:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009f74:	6802      	ldr	r2, [r0, #0]
 8009f76:	68d3      	ldr	r3, [r2, #12]
 8009f78:	f023 0302 	bic.w	r3, r3, #2
 8009f7c:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009f7e:	2200      	movs	r2, #0
 8009f80:	4621      	mov	r1, r4
 8009f82:	6828      	ldr	r0, [r5, #0]
 8009f84:	f7ff ff03 	bl	8009d8e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009f88:	682b      	ldr	r3, [r5, #0]
 8009f8a:	4a34      	ldr	r2, [pc, #208]	; (800a05c <HAL_TIM_OC_Stop_IT+0x104>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d00f      	beq.n	8009fb0 <HAL_TIM_OC_Stop_IT+0x58>
 8009f90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d00b      	beq.n	8009fb0 <HAL_TIM_OC_Stop_IT+0x58>
 8009f98:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d007      	beq.n	8009fb0 <HAL_TIM_OC_Stop_IT+0x58>
 8009fa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d003      	beq.n	8009fb0 <HAL_TIM_OC_Stop_IT+0x58>
 8009fa8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d10d      	bne.n	8009fcc <HAL_TIM_OC_Stop_IT+0x74>
    __HAL_TIM_MOE_DISABLE(htim);
 8009fb0:	6a19      	ldr	r1, [r3, #32]
 8009fb2:	f241 1211 	movw	r2, #4369	; 0x1111
 8009fb6:	4211      	tst	r1, r2
 8009fb8:	d108      	bne.n	8009fcc <HAL_TIM_OC_Stop_IT+0x74>
 8009fba:	6a19      	ldr	r1, [r3, #32]
 8009fbc:	f240 4244 	movw	r2, #1092	; 0x444
 8009fc0:	4211      	tst	r1, r2
 8009fc2:	d103      	bne.n	8009fcc <HAL_TIM_OC_Stop_IT+0x74>
 8009fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009fca:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8009fcc:	682b      	ldr	r3, [r5, #0]
 8009fce:	6a19      	ldr	r1, [r3, #32]
 8009fd0:	f241 1211 	movw	r2, #4369	; 0x1111
 8009fd4:	4211      	tst	r1, r2
 8009fd6:	d108      	bne.n	8009fea <HAL_TIM_OC_Stop_IT+0x92>
 8009fd8:	6a19      	ldr	r1, [r3, #32]
 8009fda:	f240 4244 	movw	r2, #1092	; 0x444
 8009fde:	4211      	tst	r1, r2
 8009fe0:	d103      	bne.n	8009fea <HAL_TIM_OC_Stop_IT+0x92>
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	f022 0201 	bic.w	r2, r2, #1
 8009fe8:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009fea:	b9b4      	cbnz	r4, 800a01a <HAL_TIM_OC_Stop_IT+0xc2>
 8009fec:	2301      	movs	r3, #1
 8009fee:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
}
 8009ff2:	2000      	movs	r0, #0
 8009ff4:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009ff6:	6802      	ldr	r2, [r0, #0]
 8009ff8:	68d3      	ldr	r3, [r2, #12]
 8009ffa:	f023 0304 	bic.w	r3, r3, #4
 8009ffe:	60d3      	str	r3, [r2, #12]
      break;
 800a000:	e7bd      	b.n	8009f7e <HAL_TIM_OC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800a002:	6802      	ldr	r2, [r0, #0]
 800a004:	68d3      	ldr	r3, [r2, #12]
 800a006:	f023 0308 	bic.w	r3, r3, #8
 800a00a:	60d3      	str	r3, [r2, #12]
      break;
 800a00c:	e7b7      	b.n	8009f7e <HAL_TIM_OC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800a00e:	6802      	ldr	r2, [r0, #0]
 800a010:	68d3      	ldr	r3, [r2, #12]
 800a012:	f023 0310 	bic.w	r3, r3, #16
 800a016:	60d3      	str	r3, [r2, #12]
      break;
 800a018:	e7b1      	b.n	8009f7e <HAL_TIM_OC_Stop_IT+0x26>
 800a01a:	3c04      	subs	r4, #4
 800a01c:	2c0c      	cmp	r4, #12
 800a01e:	d818      	bhi.n	800a052 <HAL_TIM_OC_Stop_IT+0xfa>
 800a020:	e8df f004 	tbb	[pc, r4]
 800a024:	17171707 	.word	0x17171707
 800a028:	1717170b 	.word	0x1717170b
 800a02c:	1717170f 	.word	0x1717170f
 800a030:	13          	.byte	0x13
 800a031:	00          	.byte	0x00
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a032:	2301      	movs	r3, #1
 800a034:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 800a038:	e7db      	b.n	8009ff2 <HAL_TIM_OC_Stop_IT+0x9a>
 800a03a:	2301      	movs	r3, #1
 800a03c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800a040:	e7d7      	b.n	8009ff2 <HAL_TIM_OC_Stop_IT+0x9a>
 800a042:	2301      	movs	r3, #1
 800a044:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 800a048:	e7d3      	b.n	8009ff2 <HAL_TIM_OC_Stop_IT+0x9a>
 800a04a:	2301      	movs	r3, #1
 800a04c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
 800a050:	e7cf      	b.n	8009ff2 <HAL_TIM_OC_Stop_IT+0x9a>
 800a052:	2301      	movs	r3, #1
 800a054:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
 800a058:	e7cb      	b.n	8009ff2 <HAL_TIM_OC_Stop_IT+0x9a>
 800a05a:	bf00      	nop
 800a05c:	40012c00 	.word	0x40012c00

0800a060 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a060:	4770      	bx	lr

0800a062 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a062:	4770      	bx	lr

0800a064 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a064:	4770      	bx	lr
	...

0800a068 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 800a068:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a06a:	3301      	adds	r3, #1
 800a06c:	4a0c      	ldr	r2, [pc, #48]	; (800a0a0 <USB_CoreReset+0x38>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d811      	bhi.n	800a096 <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a072:	6902      	ldr	r2, [r0, #16]
 800a074:	2a00      	cmp	r2, #0
 800a076:	daf8      	bge.n	800a06a <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a078:	6903      	ldr	r3, [r0, #16]
 800a07a:	f043 0301 	orr.w	r3, r3, #1
 800a07e:	6103      	str	r3, [r0, #16]
  count = 0U;
 800a080:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 800a082:	3301      	adds	r3, #1
 800a084:	4a06      	ldr	r2, [pc, #24]	; (800a0a0 <USB_CoreReset+0x38>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d807      	bhi.n	800a09a <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a08a:	6902      	ldr	r2, [r0, #16]
 800a08c:	f012 0f01 	tst.w	r2, #1
 800a090:	d1f7      	bne.n	800a082 <USB_CoreReset+0x1a>

  return HAL_OK;
 800a092:	2000      	movs	r0, #0
 800a094:	4770      	bx	lr
      return HAL_TIMEOUT;
 800a096:	2003      	movs	r0, #3
 800a098:	4770      	bx	lr
      return HAL_TIMEOUT;
 800a09a:	2003      	movs	r0, #3
}
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	00030d40 	.word	0x00030d40

0800a0a4 <USB_CoreInit>:
{
 800a0a4:	b084      	sub	sp, #16
 800a0a6:	b510      	push	{r4, lr}
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	f10d 0c0c 	add.w	ip, sp, #12
 800a0ae:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a0b2:	68c3      	ldr	r3, [r0, #12]
 800a0b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0b8:	60c3      	str	r3, [r0, #12]
  ret = USB_CoreReset(USBx);
 800a0ba:	f7ff ffd5 	bl	800a068 <USB_CoreReset>
  if (cfg.battery_charging_enable == 0U)
 800a0be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0c0:	b93b      	cbnz	r3, 800a0d2 <USB_CoreInit+0x2e>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a0c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a0c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0c8:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800a0ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0ce:	b004      	add	sp, #16
 800a0d0:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a0d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a0d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0d8:	63a3      	str	r3, [r4, #56]	; 0x38
 800a0da:	e7f6      	b.n	800a0ca <USB_CoreInit+0x26>

0800a0dc <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800a0dc:	2a02      	cmp	r2, #2
 800a0de:	d00a      	beq.n	800a0f6 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a0e0:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a0e2:	68c3      	ldr	r3, [r0, #12]
 800a0e4:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800a0e8:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a0ea:	68c3      	ldr	r3, [r0, #12]
 800a0ec:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800a0f0:	60c3      	str	r3, [r0, #12]
}
 800a0f2:	2000      	movs	r0, #0
 800a0f4:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a0f6:	4b23      	ldr	r3, [pc, #140]	; (800a184 <USB_SetTurnaroundTime+0xa8>)
 800a0f8:	440b      	add	r3, r1
 800a0fa:	4a23      	ldr	r2, [pc, #140]	; (800a188 <USB_SetTurnaroundTime+0xac>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d92f      	bls.n	800a160 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a100:	4b22      	ldr	r3, [pc, #136]	; (800a18c <USB_SetTurnaroundTime+0xb0>)
 800a102:	440b      	add	r3, r1
 800a104:	4a22      	ldr	r2, [pc, #136]	; (800a190 <USB_SetTurnaroundTime+0xb4>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d92c      	bls.n	800a164 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a10a:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800a10e:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 800a112:	4a20      	ldr	r2, [pc, #128]	; (800a194 <USB_SetTurnaroundTime+0xb8>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d927      	bls.n	800a168 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a118:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800a11c:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 800a120:	4a1d      	ldr	r2, [pc, #116]	; (800a198 <USB_SetTurnaroundTime+0xbc>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d322      	bcc.n	800a16c <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a126:	4b1d      	ldr	r3, [pc, #116]	; (800a19c <USB_SetTurnaroundTime+0xc0>)
 800a128:	440b      	add	r3, r1
 800a12a:	4a1d      	ldr	r2, [pc, #116]	; (800a1a0 <USB_SetTurnaroundTime+0xc4>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d91f      	bls.n	800a170 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a130:	4b1c      	ldr	r3, [pc, #112]	; (800a1a4 <USB_SetTurnaroundTime+0xc8>)
 800a132:	440b      	add	r3, r1
 800a134:	4a1c      	ldr	r2, [pc, #112]	; (800a1a8 <USB_SetTurnaroundTime+0xcc>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d31c      	bcc.n	800a174 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a13a:	4b1c      	ldr	r3, [pc, #112]	; (800a1ac <USB_SetTurnaroundTime+0xd0>)
 800a13c:	440b      	add	r3, r1
 800a13e:	4a1c      	ldr	r2, [pc, #112]	; (800a1b0 <USB_SetTurnaroundTime+0xd4>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d319      	bcc.n	800a178 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a144:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 800a148:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 800a14c:	4a19      	ldr	r2, [pc, #100]	; (800a1b4 <USB_SetTurnaroundTime+0xd8>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d314      	bcc.n	800a17c <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a152:	4b19      	ldr	r3, [pc, #100]	; (800a1b8 <USB_SetTurnaroundTime+0xdc>)
 800a154:	440b      	add	r3, r1
 800a156:	4a19      	ldr	r2, [pc, #100]	; (800a1bc <USB_SetTurnaroundTime+0xe0>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d211      	bcs.n	800a180 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 800a15c:	2207      	movs	r2, #7
 800a15e:	e7c0      	b.n	800a0e2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 800a160:	220f      	movs	r2, #15
 800a162:	e7be      	b.n	800a0e2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 800a164:	220e      	movs	r2, #14
 800a166:	e7bc      	b.n	800a0e2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 800a168:	220d      	movs	r2, #13
 800a16a:	e7ba      	b.n	800a0e2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 800a16c:	220c      	movs	r2, #12
 800a16e:	e7b8      	b.n	800a0e2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 800a170:	220b      	movs	r2, #11
 800a172:	e7b6      	b.n	800a0e2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 800a174:	220a      	movs	r2, #10
 800a176:	e7b4      	b.n	800a0e2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 800a178:	2209      	movs	r2, #9
 800a17a:	e7b2      	b.n	800a0e2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 800a17c:	2208      	movs	r2, #8
 800a17e:	e7b0      	b.n	800a0e2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 800a180:	2206      	movs	r2, #6
 800a182:	e7ae      	b.n	800a0e2 <USB_SetTurnaroundTime+0x6>
 800a184:	ff275340 	.word	0xff275340
 800a188:	000c34ff 	.word	0x000c34ff
 800a18c:	ff1b1e40 	.word	0xff1b1e40
 800a190:	000f423f 	.word	0x000f423f
 800a194:	00124f7f 	.word	0x00124f7f
 800a198:	0013d620 	.word	0x0013d620
 800a19c:	fee5b660 	.word	0xfee5b660
 800a1a0:	0016e35f 	.word	0x0016e35f
 800a1a4:	feced300 	.word	0xfeced300
 800a1a8:	001b7740 	.word	0x001b7740
 800a1ac:	feb35bc0 	.word	0xfeb35bc0
 800a1b0:	002191c0 	.word	0x002191c0
 800a1b4:	00387520 	.word	0x00387520
 800a1b8:	fe5954e0 	.word	0xfe5954e0
 800a1bc:	00419ce0 	.word	0x00419ce0

0800a1c0 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a1c0:	6883      	ldr	r3, [r0, #8]
 800a1c2:	f043 0301 	orr.w	r3, r3, #1
 800a1c6:	6083      	str	r3, [r0, #8]
}
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	4770      	bx	lr

0800a1cc <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a1cc:	6883      	ldr	r3, [r0, #8]
 800a1ce:	f023 0301 	bic.w	r3, r3, #1
 800a1d2:	6083      	str	r3, [r0, #8]
}
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	4770      	bx	lr

0800a1d8 <USB_SetCurrentMode>:
{
 800a1d8:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a1da:	68c3      	ldr	r3, [r0, #12]
 800a1dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a1e0:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800a1e2:	2901      	cmp	r1, #1
 800a1e4:	d009      	beq.n	800a1fa <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 800a1e6:	b969      	cbnz	r1, 800a204 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a1e8:	68c3      	ldr	r3, [r0, #12]
 800a1ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a1ee:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800a1f0:	2032      	movs	r0, #50	; 0x32
 800a1f2:	f7fb fec3 	bl	8005f7c <HAL_Delay>
  return HAL_OK;
 800a1f6:	2000      	movs	r0, #0
}
 800a1f8:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a1fa:	68c3      	ldr	r3, [r0, #12]
 800a1fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a200:	60c3      	str	r3, [r0, #12]
 800a202:	e7f5      	b.n	800a1f0 <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 800a204:	2001      	movs	r0, #1
 800a206:	e7f7      	b.n	800a1f8 <USB_SetCurrentMode+0x20>

0800a208 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a208:	0189      	lsls	r1, r1, #6
 800a20a:	f041 0120 	orr.w	r1, r1, #32
 800a20e:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 800a210:	2300      	movs	r3, #0
    if (++count > 200000U)
 800a212:	3301      	adds	r3, #1
 800a214:	4a05      	ldr	r2, [pc, #20]	; (800a22c <USB_FlushTxFifo+0x24>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d805      	bhi.n	800a226 <USB_FlushTxFifo+0x1e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a21a:	6902      	ldr	r2, [r0, #16]
 800a21c:	f012 0f20 	tst.w	r2, #32
 800a220:	d1f7      	bne.n	800a212 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800a222:	2000      	movs	r0, #0
 800a224:	4770      	bx	lr
      return HAL_TIMEOUT;
 800a226:	2003      	movs	r0, #3
}
 800a228:	4770      	bx	lr
 800a22a:	bf00      	nop
 800a22c:	00030d40 	.word	0x00030d40

0800a230 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a230:	2310      	movs	r3, #16
 800a232:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 800a234:	2300      	movs	r3, #0
    if (++count > 200000U)
 800a236:	3301      	adds	r3, #1
 800a238:	4a05      	ldr	r2, [pc, #20]	; (800a250 <USB_FlushRxFifo+0x20>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d805      	bhi.n	800a24a <USB_FlushRxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a23e:	6902      	ldr	r2, [r0, #16]
 800a240:	f012 0f10 	tst.w	r2, #16
 800a244:	d1f7      	bne.n	800a236 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800a246:	2000      	movs	r0, #0
 800a248:	4770      	bx	lr
      return HAL_TIMEOUT;
 800a24a:	2003      	movs	r0, #3
}
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	00030d40 	.word	0x00030d40

0800a254 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800a254:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800a258:	4319      	orrs	r1, r3
 800a25a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800a25e:	2000      	movs	r0, #0
 800a260:	4770      	bx	lr
	...

0800a264 <USB_DevInit>:
{
 800a264:	b084      	sub	sp, #16
 800a266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a26a:	4604      	mov	r4, r0
 800a26c:	a807      	add	r0, sp, #28
 800a26e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 800a272:	2300      	movs	r3, #0
 800a274:	e006      	b.n	800a284 <USB_DevInit+0x20>
    USBx->DIEPTXF[i] = 0U;
 800a276:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800a27a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a27e:	2100      	movs	r1, #0
 800a280:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800a282:	3301      	adds	r3, #1
 800a284:	2b0e      	cmp	r3, #14
 800a286:	d9f6      	bls.n	800a276 <USB_DevInit+0x12>
  if (cfg.vbus_sensing_enable == 0U)
 800a288:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800a28a:	bb8f      	cbnz	r7, 800a2f0 <USB_DevInit+0x8c>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a28c:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 800a290:	f043 0302 	orr.w	r3, r3, #2
 800a294:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a298:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a29a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a29e:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a2a0:	6823      	ldr	r3, [r4, #0]
 800a2a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2a6:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a2a8:	6823      	ldr	r3, [r4, #0]
 800a2aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2ae:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a2b6:	f504 6500 	add.w	r5, r4, #2048	; 0x800
 800a2ba:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800a2be:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a2c2:	2103      	movs	r1, #3
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	f7ff ffc5 	bl	800a254 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a2ca:	2110      	movs	r1, #16
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	f7ff ff9b 	bl	800a208 <USB_FlushTxFifo>
 800a2d2:	4680      	mov	r8, r0
 800a2d4:	b108      	cbz	r0, 800a2da <USB_DevInit+0x76>
    ret = HAL_ERROR;
 800a2d6:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a2da:	4620      	mov	r0, r4
 800a2dc:	f7ff ffa8 	bl	800a230 <USB_FlushRxFifo>
 800a2e0:	b108      	cbz	r0, 800a2e6 <USB_DevInit+0x82>
    ret = HAL_ERROR;
 800a2e2:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	612b      	str	r3, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a2ea:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a2ec:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a2ee:	e00f      	b.n	800a310 <USB_DevInit+0xac>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a2f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a2f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a2f6:	63a3      	str	r3, [r4, #56]	; 0x38
 800a2f8:	e7da      	b.n	800a2b0 <USB_DevInit+0x4c>
      if (i == 0U)
 800a2fa:	b9c3      	cbnz	r3, 800a32e <USB_DevInit+0xca>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a2fc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800a300:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a304:	2200      	movs	r2, #0
 800a306:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a308:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 800a30c:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a30e:	3301      	adds	r3, #1
 800a310:	9907      	ldr	r1, [sp, #28]
 800a312:	4299      	cmp	r1, r3
 800a314:	d910      	bls.n	800a338 <USB_DevInit+0xd4>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a316:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800a31a:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 800a31e:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 800a322:	2800      	cmp	r0, #0
 800a324:	dbe9      	blt.n	800a2fa <USB_DevInit+0x96>
      USBx_INEP(i)->DIEPCTL = 0U;
 800a326:	2000      	movs	r0, #0
 800a328:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 800a32c:	e7ea      	b.n	800a304 <USB_DevInit+0xa0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a32e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a332:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 800a336:	e7e5      	b.n	800a304 <USB_DevInit+0xa0>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a338:	2300      	movs	r3, #0
 800a33a:	e00a      	b.n	800a352 <USB_DevInit+0xee>
      if (i == 0U)
 800a33c:	b1c3      	cbz	r3, 800a370 <USB_DevInit+0x10c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a33e:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
 800a342:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a346:	2200      	movs	r2, #0
 800a348:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a34a:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 800a34e:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a350:	3301      	adds	r3, #1
 800a352:	4299      	cmp	r1, r3
 800a354:	d911      	bls.n	800a37a <USB_DevInit+0x116>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a356:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800a35a:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 800a35e:	f8d2 6b00 	ldr.w	r6, [r2, #2816]	; 0xb00
 800a362:	2e00      	cmp	r6, #0
 800a364:	dbea      	blt.n	800a33c <USB_DevInit+0xd8>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a366:	f04f 0c00 	mov.w	ip, #0
 800a36a:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
 800a36e:	e7ea      	b.n	800a346 <USB_DevInit+0xe2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a370:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 800a374:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
 800a378:	e7e5      	b.n	800a346 <USB_DevInit+0xe2>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a37a:	692b      	ldr	r3, [r5, #16]
 800a37c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a380:	612b      	str	r3, [r5, #16]
  USBx->GINTMSK = 0U;
 800a382:	2300      	movs	r3, #0
 800a384:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a386:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800a38a:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a38c:	69a3      	ldr	r3, [r4, #24]
 800a38e:	f043 0310 	orr.w	r3, r3, #16
 800a392:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a394:	69a2      	ldr	r2, [r4, #24]
 800a396:	4b0b      	ldr	r3, [pc, #44]	; (800a3c4 <USB_DevInit+0x160>)
 800a398:	4313      	orrs	r3, r2
 800a39a:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800a39c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a39e:	b11b      	cbz	r3, 800a3a8 <USB_DevInit+0x144>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a3a0:	69a3      	ldr	r3, [r4, #24]
 800a3a2:	f043 0308 	orr.w	r3, r3, #8
 800a3a6:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800a3a8:	2f01      	cmp	r7, #1
 800a3aa:	d004      	beq.n	800a3b6 <USB_DevInit+0x152>
}
 800a3ac:	4640      	mov	r0, r8
 800a3ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3b2:	b004      	add	sp, #16
 800a3b4:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a3b6:	69a3      	ldr	r3, [r4, #24]
 800a3b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3bc:	f043 0304 	orr.w	r3, r3, #4
 800a3c0:	61a3      	str	r3, [r4, #24]
 800a3c2:	e7f3      	b.n	800a3ac <USB_DevInit+0x148>
 800a3c4:	803c3800 	.word	0x803c3800

0800a3c8 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a3c8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800a3cc:	f003 0306 	and.w	r3, r3, #6
  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d005      	beq.n	800a3e0 <USB_GetDevSpeed+0x18>
 800a3d4:	2b06      	cmp	r3, #6
 800a3d6:	d001      	beq.n	800a3dc <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 800a3d8:	200f      	movs	r0, #15
}
 800a3da:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 800a3dc:	2002      	movs	r0, #2
 800a3de:	4770      	bx	lr
 800a3e0:	2002      	movs	r0, #2
 800a3e2:	4770      	bx	lr

0800a3e4 <USB_ActivateEndpoint>:
{
 800a3e4:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800a3e6:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 800a3ea:	784b      	ldrb	r3, [r1, #1]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d023      	beq.n	800a438 <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a3f0:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 800a3f4:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 800a3f8:	f00c 040f 	and.w	r4, ip, #15
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	40a2      	lsls	r2, r4
 800a400:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a404:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a408:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800a40c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a410:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800a414:	d10e      	bne.n	800a434 <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a416:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a41a:	688a      	ldr	r2, [r1, #8]
 800a41c:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a420:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a422:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800a426:	4313      	orrs	r3, r2
 800a428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a42c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a430:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800a434:	2000      	movs	r0, #0
 800a436:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a438:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800a43c:	f00c 0e0f 	and.w	lr, ip, #15
 800a440:	fa03 f30e 	lsl.w	r3, r3, lr
 800a444:	b29b      	uxth	r3, r3
 800a446:	4313      	orrs	r3, r2
 800a448:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a44c:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800a450:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a454:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800a458:	d1ec      	bne.n	800a434 <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a45a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a45e:	688a      	ldr	r2, [r1, #8]
 800a460:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a464:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a466:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a46a:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a46e:	4313      	orrs	r3, r2
 800a470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a478:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800a47c:	e7da      	b.n	800a434 <USB_ActivateEndpoint+0x50>
	...

0800a480 <USB_DeactivateEndpoint>:
{
 800a480:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 800a482:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a484:	784a      	ldrb	r2, [r1, #1]
 800a486:	2a01      	cmp	r2, #1
 800a488:	d026      	beq.n	800a4d8 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a48a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a48e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a492:	2a00      	cmp	r2, #0
 800a494:	db52      	blt.n	800a53c <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a496:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 800a49a:	780a      	ldrb	r2, [r1, #0]
 800a49c:	f002 020f 	and.w	r2, r2, #15
 800a4a0:	f04f 0c01 	mov.w	ip, #1
 800a4a4:	fa0c f202 	lsl.w	r2, ip, r2
 800a4a8:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 800a4ac:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a4b0:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800a4b4:	7809      	ldrb	r1, [r1, #0]
 800a4b6:	f001 010f 	and.w	r1, r1, #15
 800a4ba:	fa0c fc01 	lsl.w	ip, ip, r1
 800a4be:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 800a4c2:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a4c6:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800a4ca:	4a23      	ldr	r2, [pc, #140]	; (800a558 <USB_DeactivateEndpoint+0xd8>)
 800a4cc:	400a      	ands	r2, r1
 800a4ce:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800a4d2:	2000      	movs	r0, #0
 800a4d4:	bc30      	pop	{r4, r5}
 800a4d6:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a4d8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a4dc:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a4e0:	2a00      	cmp	r2, #0
 800a4e2:	db1e      	blt.n	800a522 <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a4e4:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 800a4e8:	780a      	ldrb	r2, [r1, #0]
 800a4ea:	f002 020f 	and.w	r2, r2, #15
 800a4ee:	2401      	movs	r4, #1
 800a4f0:	fa04 f202 	lsl.w	r2, r4, r2
 800a4f4:	b292      	uxth	r2, r2
 800a4f6:	ea25 0202 	bic.w	r2, r5, r2
 800a4fa:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a4fe:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800a502:	7809      	ldrb	r1, [r1, #0]
 800a504:	f001 010f 	and.w	r1, r1, #15
 800a508:	408c      	lsls	r4, r1
 800a50a:	b2a4      	uxth	r4, r4
 800a50c:	ea22 0204 	bic.w	r2, r2, r4
 800a510:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a514:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800a518:	4a10      	ldr	r2, [pc, #64]	; (800a55c <USB_DeactivateEndpoint+0xdc>)
 800a51a:	400a      	ands	r2, r1
 800a51c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800a520:	e7d7      	b.n	800a4d2 <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a522:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a526:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800a52a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a52e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a532:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a536:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800a53a:	e7d3      	b.n	800a4e4 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a53c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a540:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800a544:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a548:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a54c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a550:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800a554:	e79f      	b.n	800a496 <USB_DeactivateEndpoint+0x16>
 800a556:	bf00      	nop
 800a558:	eff37800 	.word	0xeff37800
 800a55c:	ec337800 	.word	0xec337800

0800a560 <USB_EP0StartXfer>:
  uint32_t epnum = (uint32_t)ep->num;
 800a560:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a562:	784a      	ldrb	r2, [r1, #1]
 800a564:	2a01      	cmp	r2, #1
 800a566:	d023      	beq.n	800a5b0 <USB_EP0StartXfer+0x50>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a568:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a56c:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800a570:	691a      	ldr	r2, [r3, #16]
 800a572:	0cd2      	lsrs	r2, r2, #19
 800a574:	04d2      	lsls	r2, r2, #19
 800a576:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a578:	691a      	ldr	r2, [r3, #16]
 800a57a:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 800a57e:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 800a582:	611a      	str	r2, [r3, #16]
    if (ep->xfer_len > 0U)
 800a584:	694a      	ldr	r2, [r1, #20]
 800a586:	b10a      	cbz	r2, 800a58c <USB_EP0StartXfer+0x2c>
      ep->xfer_len = ep->maxpacket;
 800a588:	688a      	ldr	r2, [r1, #8]
 800a58a:	614a      	str	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a58c:	691a      	ldr	r2, [r3, #16]
 800a58e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800a592:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a594:	691a      	ldr	r2, [r3, #16]
 800a596:	6889      	ldr	r1, [r1, #8]
 800a598:	f3c1 0112 	ubfx	r1, r1, #0, #19
 800a59c:	430a      	orrs	r2, r1
 800a59e:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a5a0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a5a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a5a8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	4770      	bx	lr
{
 800a5b0:	b430      	push	{r4, r5}
    if (ep->xfer_len == 0U)
 800a5b2:	694a      	ldr	r2, [r1, #20]
 800a5b4:	bb62      	cbnz	r2, 800a610 <USB_EP0StartXfer+0xb0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5b6:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800a5ba:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800a5be:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800a5c2:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800a5c6:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a5ca:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800a5ce:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800a5d2:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a5d6:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800a5da:	0ce4      	lsrs	r4, r4, #19
 800a5dc:	04e4      	lsls	r4, r4, #19
 800a5de:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a5e2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a5e6:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a5ea:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800a5ee:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    if (ep->xfer_len > 0U)
 800a5f2:	694b      	ldr	r3, [r1, #20]
 800a5f4:	b14b      	cbz	r3, 800a60a <USB_EP0StartXfer+0xaa>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a5f6:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800a5fa:	7809      	ldrb	r1, [r1, #0]
 800a5fc:	f001 010f 	and.w	r1, r1, #15
 800a600:	2201      	movs	r2, #1
 800a602:	408a      	lsls	r2, r1
 800a604:	4313      	orrs	r3, r2
 800a606:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 800a60a:	2000      	movs	r0, #0
 800a60c:	bc30      	pop	{r4, r5}
 800a60e:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a610:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800a614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a618:	6914      	ldr	r4, [r2, #16]
 800a61a:	0ce4      	lsrs	r4, r4, #19
 800a61c:	04e4      	lsls	r4, r4, #19
 800a61e:	6114      	str	r4, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a620:	6914      	ldr	r4, [r2, #16]
 800a622:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800a626:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800a62a:	6114      	str	r4, [r2, #16]
      if (ep->xfer_len > ep->maxpacket)
 800a62c:	688c      	ldr	r4, [r1, #8]
 800a62e:	694d      	ldr	r5, [r1, #20]
 800a630:	42a5      	cmp	r5, r4
 800a632:	d900      	bls.n	800a636 <USB_EP0StartXfer+0xd6>
        ep->xfer_len = ep->maxpacket;
 800a634:	614c      	str	r4, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a636:	6914      	ldr	r4, [r2, #16]
 800a638:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800a63c:	6114      	str	r4, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a63e:	6914      	ldr	r4, [r2, #16]
 800a640:	694d      	ldr	r5, [r1, #20]
 800a642:	f3c5 0c12 	ubfx	ip, r5, #0, #19
 800a646:	ea44 040c 	orr.w	r4, r4, ip
 800a64a:	6114      	str	r4, [r2, #16]
 800a64c:	e7c9      	b.n	800a5e2 <USB_EP0StartXfer+0x82>

0800a64e <USB_WritePacket>:
{
 800a64e:	b510      	push	{r4, lr}
  count32b = ((uint32_t)len + 3U) / 4U;
 800a650:	1cdc      	adds	r4, r3, #3
 800a652:	08a4      	lsrs	r4, r4, #2
  for (i = 0U; i < count32b; i++)
 800a654:	f04f 0e00 	mov.w	lr, #0
 800a658:	e009      	b.n	800a66e <USB_WritePacket+0x20>
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a65a:	eb00 3c02 	add.w	ip, r0, r2, lsl #12
 800a65e:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 800a662:	f851 3b04 	ldr.w	r3, [r1], #4
 800a666:	f8cc 3000 	str.w	r3, [ip]
  for (i = 0U; i < count32b; i++)
 800a66a:	f10e 0e01 	add.w	lr, lr, #1
 800a66e:	45a6      	cmp	lr, r4
 800a670:	d3f3      	bcc.n	800a65a <USB_WritePacket+0xc>
}
 800a672:	2000      	movs	r0, #0
 800a674:	bd10      	pop	{r4, pc}
	...

0800a678 <USB_EPStartXfer>:
{
 800a678:	b570      	push	{r4, r5, r6, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800a67a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a67c:	784a      	ldrb	r2, [r1, #1]
 800a67e:	2a01      	cmp	r2, #1
 800a680:	d027      	beq.n	800a6d2 <USB_EPStartXfer+0x5a>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a682:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a686:	f503 6230 	add.w	r2, r3, #2816	; 0xb00
 800a68a:	6914      	ldr	r4, [r2, #16]
 800a68c:	0ce4      	lsrs	r4, r4, #19
 800a68e:	04e4      	lsls	r4, r4, #19
 800a690:	6114      	str	r4, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a692:	6914      	ldr	r4, [r2, #16]
 800a694:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800a698:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800a69c:	6114      	str	r4, [r2, #16]
    if (ep->xfer_len == 0U)
 800a69e:	694c      	ldr	r4, [r1, #20]
 800a6a0:	2c00      	cmp	r4, #0
 800a6a2:	f040 8093 	bne.w	800a7cc <USB_EPStartXfer+0x154>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a6a6:	6914      	ldr	r4, [r2, #16]
 800a6a8:	688d      	ldr	r5, [r1, #8]
 800a6aa:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800a6ae:	432c      	orrs	r4, r5
 800a6b0:	6114      	str	r4, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6b2:	6914      	ldr	r4, [r2, #16]
 800a6b4:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800a6b8:	6114      	str	r4, [r2, #16]
    if (ep->type == EP_TYPE_ISOC)
 800a6ba:	78ca      	ldrb	r2, [r1, #3]
 800a6bc:	2a01      	cmp	r2, #1
 800a6be:	f000 809b 	beq.w	800a7f8 <USB_EPStartXfer+0x180>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a6c2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a6c6:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800a6ca:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len == 0U)
 800a6d2:	694a      	ldr	r2, [r1, #20]
 800a6d4:	bb72      	cbnz	r2, 800a734 <USB_EPStartXfer+0xbc>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a6d6:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800a6da:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800a6de:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800a6e2:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800a6e6:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a6ea:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800a6ee:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800a6f2:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a6f6:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800a6fa:	0ce4      	lsrs	r4, r4, #19
 800a6fc:	04e4      	lsls	r4, r4, #19
 800a6fe:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a702:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a706:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a70a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800a70e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 800a712:	78ca      	ldrb	r2, [r1, #3]
 800a714:	2a01      	cmp	r2, #1
 800a716:	d041      	beq.n	800a79c <USB_EPStartXfer+0x124>
      if (ep->xfer_len > 0U)
 800a718:	694b      	ldr	r3, [r1, #20]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d0d7      	beq.n	800a6ce <USB_EPStartXfer+0x56>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a71e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800a722:	7809      	ldrb	r1, [r1, #0]
 800a724:	f001 010f 	and.w	r1, r1, #15
 800a728:	2201      	movs	r2, #1
 800a72a:	408a      	lsls	r2, r1
 800a72c:	4313      	orrs	r3, r2
 800a72e:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800a732:	e7cc      	b.n	800a6ce <USB_EPStartXfer+0x56>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a734:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800a738:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800a73c:	0ce4      	lsrs	r4, r4, #19
 800a73e:	04e4      	lsls	r4, r4, #19
 800a740:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a744:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800a748:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800a74c:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800a750:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a754:	f8d2 5910 	ldr.w	r5, [r2, #2320]	; 0x910
 800a758:	694c      	ldr	r4, [r1, #20]
 800a75a:	688e      	ldr	r6, [r1, #8]
 800a75c:	4434      	add	r4, r6
 800a75e:	3c01      	subs	r4, #1
 800a760:	fbb4 f4f6 	udiv	r4, r4, r6
 800a764:	4e2e      	ldr	r6, [pc, #184]	; (800a820 <USB_EPStartXfer+0x1a8>)
 800a766:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 800a76a:	432c      	orrs	r4, r5
 800a76c:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a770:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800a774:	694d      	ldr	r5, [r1, #20]
 800a776:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800a77a:	432c      	orrs	r4, r5
 800a77c:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800a784:	78cc      	ldrb	r4, [r1, #3]
 800a786:	2c01      	cmp	r4, #1
 800a788:	d1bb      	bne.n	800a702 <USB_EPStartXfer+0x8a>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a78a:	6914      	ldr	r4, [r2, #16]
 800a78c:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 800a790:	6114      	str	r4, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a792:	6914      	ldr	r4, [r2, #16]
 800a794:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 800a798:	6114      	str	r4, [r2, #16]
 800a79a:	e7b2      	b.n	800a702 <USB_EPStartXfer+0x8a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a79c:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800a7a0:	f412 7f80 	tst.w	r2, #256	; 0x100
 800a7a4:	d10b      	bne.n	800a7be <USB_EPStartXfer+0x146>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a7a6:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a7aa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800a7ae:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a7b2:	8a8b      	ldrh	r3, [r1, #20]
 800a7b4:	780a      	ldrb	r2, [r1, #0]
 800a7b6:	68c9      	ldr	r1, [r1, #12]
 800a7b8:	f7ff ff49 	bl	800a64e <USB_WritePacket>
 800a7bc:	e787      	b.n	800a6ce <USB_EPStartXfer+0x56>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a7be:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a7c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a7c6:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800a7ca:	e7f2      	b.n	800a7b2 <USB_EPStartXfer+0x13a>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a7cc:	688d      	ldr	r5, [r1, #8]
 800a7ce:	442c      	add	r4, r5
 800a7d0:	3c01      	subs	r4, #1
 800a7d2:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a7d6:	6915      	ldr	r5, [r2, #16]
 800a7d8:	fa1f fc84 	uxth.w	ip, r4
 800a7dc:	4e10      	ldr	r6, [pc, #64]	; (800a820 <USB_EPStartXfer+0x1a8>)
 800a7de:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 800a7e2:	432c      	orrs	r4, r5
 800a7e4:	6114      	str	r4, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a7e6:	6915      	ldr	r5, [r2, #16]
 800a7e8:	688c      	ldr	r4, [r1, #8]
 800a7ea:	fb0c f404 	mul.w	r4, ip, r4
 800a7ee:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800a7f2:	432c      	orrs	r4, r5
 800a7f4:	6114      	str	r4, [r2, #16]
 800a7f6:	e760      	b.n	800a6ba <USB_EPStartXfer+0x42>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a7f8:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800a7fc:	f412 7f80 	tst.w	r2, #256	; 0x100
 800a800:	d106      	bne.n	800a810 <USB_EPStartXfer+0x198>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a802:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a806:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800a80a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800a80e:	e758      	b.n	800a6c2 <USB_EPStartXfer+0x4a>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a810:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a814:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a818:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800a81c:	e751      	b.n	800a6c2 <USB_EPStartXfer+0x4a>
 800a81e:	bf00      	nop
 800a820:	1ff80000 	.word	0x1ff80000

0800a824 <USB_ReadPacket>:
{
 800a824:	4684      	mov	ip, r0
 800a826:	4608      	mov	r0, r1
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a828:	3203      	adds	r2, #3
 800a82a:	0892      	lsrs	r2, r2, #2
  for (i = 0U; i < count32b; i++)
 800a82c:	2300      	movs	r3, #0
 800a82e:	e005      	b.n	800a83c <USB_ReadPacket+0x18>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a830:	f50c 5180 	add.w	r1, ip, #4096	; 0x1000
 800a834:	6809      	ldr	r1, [r1, #0]
 800a836:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 800a83a:	3301      	adds	r3, #1
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d3f7      	bcc.n	800a830 <USB_ReadPacket+0xc>
}
 800a840:	4770      	bx	lr

0800a842 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800a842:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a844:	784a      	ldrb	r2, [r1, #1]
 800a846:	2a01      	cmp	r2, #1
 800a848:	d014      	beq.n	800a874 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a84a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a84e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800a852:	2a00      	cmp	r2, #0
 800a854:	db06      	blt.n	800a864 <USB_EPSetStall+0x22>
 800a856:	b12b      	cbz	r3, 800a864 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a858:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a85c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a860:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a864:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a868:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a86c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800a870:	2000      	movs	r0, #0
 800a872:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a874:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a878:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800a87c:	2a00      	cmp	r2, #0
 800a87e:	db06      	blt.n	800a88e <USB_EPSetStall+0x4c>
 800a880:	b12b      	cbz	r3, 800a88e <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a882:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a886:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a88a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a88e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a892:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a896:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800a89a:	e7e9      	b.n	800a870 <USB_EPSetStall+0x2e>

0800a89c <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800a89c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a89e:	784a      	ldrb	r2, [r1, #1]
 800a8a0:	2a01      	cmp	r2, #1
 800a8a2:	d00e      	beq.n	800a8c2 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a8a4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a8a8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a8ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a8b0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a8b4:	78cb      	ldrb	r3, [r1, #3]
 800a8b6:	3b02      	subs	r3, #2
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d915      	bls.n	800a8ea <USB_EPClearStall+0x4e>
}
 800a8be:	2000      	movs	r0, #0
 800a8c0:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a8c2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a8c6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a8ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a8ce:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a8d2:	78cb      	ldrb	r3, [r1, #3]
 800a8d4:	3b02      	subs	r3, #2
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d8f0      	bhi.n	800a8be <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a8dc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a8e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8e4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800a8e8:	e7e9      	b.n	800a8be <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a8ea:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a8ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8f2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800a8f6:	e7e2      	b.n	800a8be <USB_EPClearStall+0x22>

0800a8f8 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a8f8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800a8fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a900:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a904:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800a908:	0109      	lsls	r1, r1, #4
 800a90a:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800a90e:	430b      	orrs	r3, r1
 800a910:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
}
 800a914:	2000      	movs	r0, #0
 800a916:	4770      	bx	lr

0800a918 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a918:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 800a91c:	f023 0303 	bic.w	r3, r3, #3
 800a920:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a924:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800a928:	f023 0302 	bic.w	r3, r3, #2
 800a92c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800a930:	2000      	movs	r0, #0
 800a932:	4770      	bx	lr

0800a934 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a934:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 800a938:	f023 0303 	bic.w	r3, r3, #3
 800a93c:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a940:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800a944:	f043 0302 	orr.w	r3, r3, #2
 800a948:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800a94c:	2000      	movs	r0, #0
 800a94e:	4770      	bx	lr

0800a950 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800a950:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800a952:	6980      	ldr	r0, [r0, #24]
}
 800a954:	4010      	ands	r0, r2
 800a956:	4770      	bx	lr

0800a958 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800a958:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800a95c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a960:	69c0      	ldr	r0, [r0, #28]
 800a962:	4018      	ands	r0, r3
}
 800a964:	0c00      	lsrs	r0, r0, #16
 800a966:	4770      	bx	lr

0800a968 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800a968:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800a96c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a970:	69c0      	ldr	r0, [r0, #28]
 800a972:	4018      	ands	r0, r3
}
 800a974:	b280      	uxth	r0, r0
 800a976:	4770      	bx	lr

0800a978 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a978:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800a97c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a980:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800a984:	6940      	ldr	r0, [r0, #20]
}
 800a986:	4010      	ands	r0, r2
 800a988:	4770      	bx	lr

0800a98a <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800a98a:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a98e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a992:	f001 0c0f 	and.w	ip, r1, #15
 800a996:	fa23 f30c 	lsr.w	r3, r3, ip
 800a99a:	01db      	lsls	r3, r3, #7
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a9a0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800a9a4:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800a9a8:	6880      	ldr	r0, [r0, #8]
}
 800a9aa:	4018      	ands	r0, r3
 800a9ac:	4770      	bx	lr

0800a9ae <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800a9ae:	6940      	ldr	r0, [r0, #20]
}
 800a9b0:	f000 0001 	and.w	r0, r0, #1
 800a9b4:	4770      	bx	lr

0800a9b6 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a9b6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a9ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a9be:	f023 0307 	bic.w	r3, r3, #7
 800a9c2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a9c6:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800a9ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9ce:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800a9d2:	2000      	movs	r0, #0
 800a9d4:	4770      	bx	lr
	...

0800a9d8 <USB_EP0_OutStart>:
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a9d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a9da:	4b0f      	ldr	r3, [pc, #60]	; (800aa18 <USB_EP0_OutStart+0x40>)
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d903      	bls.n	800a9e8 <USB_EP0_OutStart+0x10>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a9e0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	db14      	blt.n	800aa12 <USB_EP0_OutStart+0x3a>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a9ee:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 800a9f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9f6:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a9fa:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 800a9fe:	f043 0318 	orr.w	r3, r3, #24
 800aa02:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aa06:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 800aa0a:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800aa0e:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
}
 800aa12:	2000      	movs	r0, #0
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	4f54300a 	.word	0x4f54300a

0800aa1c <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800aa1c:	b510      	push	{r4, lr}
 800aa1e:	b08a      	sub	sp, #40	; 0x28
 800aa20:	461c      	mov	r4, r3
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800aa22:	f88d 000c 	strb.w	r0, [sp, #12]
  cp.privacy_enabled = privacy_enabled;
 800aa26:	f88d 100d 	strb.w	r1, [sp, #13]
  cp.device_name_char_len = device_name_char_len;
 800aa2a:	f88d 200e 	strb.w	r2, [sp, #14]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800aa2e:	2100      	movs	r1, #0
 800aa30:	9101      	str	r1, [sp, #4]
 800aa32:	f8cd 1007 	str.w	r1, [sp, #7]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800aa36:	9104      	str	r1, [sp, #16]
 800aa38:	9105      	str	r1, [sp, #20]
 800aa3a:	9106      	str	r1, [sp, #24]
 800aa3c:	9107      	str	r1, [sp, #28]
 800aa3e:	9108      	str	r1, [sp, #32]
 800aa40:	9109      	str	r1, [sp, #36]	; 0x24
  rq.ogf = OGF_VENDOR_CMD;
 800aa42:	233f      	movs	r3, #63	; 0x3f
 800aa44:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 800aa48:	238a      	movs	r3, #138	; 0x8a
 800aa4a:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 800aa4e:	ab03      	add	r3, sp, #12
 800aa50:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 800aa52:	2303      	movs	r3, #3
 800aa54:	9307      	str	r3, [sp, #28]
  rq.rparam = &resp;
 800aa56:	ab01      	add	r3, sp, #4
 800aa58:	9308      	str	r3, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 800aa5a:	2307      	movs	r3, #7
 800aa5c:	9309      	str	r3, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 800aa5e:	a804      	add	r0, sp, #16
 800aa60:	f000 fbfe 	bl	800b260 <hci_send_req>
 800aa64:	2800      	cmp	r0, #0
 800aa66:	db0f      	blt.n	800aa88 <aci_gap_init_IDB05A1+0x6c>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 800aa68:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800aa6c:	b950      	cbnz	r0, 800aa84 <aci_gap_init_IDB05A1+0x68>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 800aa6e:	f8bd 3005 	ldrh.w	r3, [sp, #5]
 800aa72:	8023      	strh	r3, [r4, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800aa74:	f8bd 2007 	ldrh.w	r2, [sp, #7]
 800aa78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa7a:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800aa7c:	f8bd 2009 	ldrh.w	r2, [sp, #9]
 800aa80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa82:	801a      	strh	r2, [r3, #0]
  
  return 0;
}
 800aa84:	b00a      	add	sp, #40	; 0x28
 800aa86:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 800aa88:	20ff      	movs	r0, #255	; 0xff
 800aa8a:	e7fb      	b.n	800aa84 <aci_gap_init_IDB05A1+0x68>

0800aa8c <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800aa8c:	b570      	push	{r4, r5, r6, lr}
 800aa8e:	b092      	sub	sp, #72	; 0x48
 800aa90:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800aa94:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800aa98:	192e      	adds	r6, r5, r4
 800aa9a:	360e      	adds	r6, #14
 800aa9c:	2e28      	cmp	r6, #40	; 0x28
 800aa9e:	d851      	bhi.n	800ab44 <aci_gap_set_discoverable+0xb8>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 800aaa0:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800aaa4:	f8ad 1005 	strh.w	r1, [sp, #5]
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800aaa8:	f8ad 2007 	strh.w	r2, [sp, #7]
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
 800aaac:	f88d 3009 	strb.w	r3, [sp, #9]
  indx++;
    
  buffer[indx] = AdvFilterPolicy;
 800aab0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800aab4:	f88d 300a 	strb.w	r3, [sp, #10]
  indx++;
    
  buffer[indx] = LocalNameLen;
 800aab8:	f88d 500b 	strb.w	r5, [sp, #11]
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800aabc:	ae01      	add	r6, sp, #4
 800aabe:	462a      	mov	r2, r5
 800aac0:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aac2:	a803      	add	r0, sp, #12
 800aac4:	f002 ffd8 	bl	800da78 <memcpy>
  indx +=  LocalNameLen;
 800aac8:	f105 0308 	add.w	r3, r5, #8
  
  buffer[indx] = ServiceUUIDLen;
 800aacc:	aa12      	add	r2, sp, #72	; 0x48
 800aace:	fa52 f383 	uxtab	r3, r2, r3
 800aad2:	f803 4c44 	strb.w	r4, [r3, #-68]
  indx++;
 800aad6:	3509      	adds	r5, #9
 800aad8:	b2ed      	uxtb	r5, r5

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800aada:	4622      	mov	r2, r4
 800aadc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800aade:	1970      	adds	r0, r6, r5
 800aae0:	f002 ffca 	bl	800da78 <memcpy>
  indx +=  ServiceUUIDLen;  
 800aae4:	442c      	add	r4, r5
 800aae6:	b2e4      	uxtb	r4, r4

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800aae8:	f104 0348 	add.w	r3, r4, #72	; 0x48
 800aaec:	446b      	add	r3, sp
 800aaee:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 800aaf2:	f823 2c44 	strh.w	r2, [r3, #-68]
  indx +=  2;
 800aaf6:	1ca3      	adds	r3, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800aaf8:	aa12      	add	r2, sp, #72	; 0x48
 800aafa:	fa52 f383 	uxtab	r3, r2, r3
 800aafe:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 800ab02:	f823 2c44 	strh.w	r2, [r3, #-68]
  indx +=  2;    
 800ab06:	3404      	adds	r4, #4
 800ab08:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	910c      	str	r1, [sp, #48]	; 0x30
 800ab0e:	910d      	str	r1, [sp, #52]	; 0x34
 800ab10:	910e      	str	r1, [sp, #56]	; 0x38
 800ab12:	910f      	str	r1, [sp, #60]	; 0x3c
 800ab14:	9110      	str	r1, [sp, #64]	; 0x40
 800ab16:	9111      	str	r1, [sp, #68]	; 0x44
  rq.ogf = OGF_VENDOR_CMD;
 800ab18:	233f      	movs	r3, #63	; 0x3f
 800ab1a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800ab1e:	2383      	movs	r3, #131	; 0x83
 800ab20:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  rq.cparam = (void *)buffer;
 800ab24:	960e      	str	r6, [sp, #56]	; 0x38
  rq.clen = indx;
 800ab26:	940f      	str	r4, [sp, #60]	; 0x3c
  rq.rparam = &status;
 800ab28:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800ab2c:	9310      	str	r3, [sp, #64]	; 0x40
  rq.rlen = 1;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	9311      	str	r3, [sp, #68]	; 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 800ab32:	a80c      	add	r0, sp, #48	; 0x30
 800ab34:	f000 fb94 	bl	800b260 <hci_send_req>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	db05      	blt.n	800ab48 <aci_gap_set_discoverable+0xbc>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800ab3c:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    return status;
  }

  return 0;
}
 800ab40:	b012      	add	sp, #72	; 0x48
 800ab42:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800ab44:	2042      	movs	r0, #66	; 0x42
 800ab46:	e7fb      	b.n	800ab40 <aci_gap_set_discoverable+0xb4>
    return BLE_STATUS_TIMEOUT;
 800ab48:	20ff      	movs	r0, #255	; 0xff
 800ab4a:	e7f9      	b.n	800ab40 <aci_gap_set_discoverable+0xb4>

0800ab4c <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800ab4c:	b500      	push	{lr}
 800ab4e:	b08f      	sub	sp, #60	; 0x3c
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800ab50:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.oob_enable = oob_enable;
 800ab54:	f88d 1005 	strb.w	r1, [sp, #5]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 800ab58:	b161      	cbz	r1, 800ab74 <aci_gap_set_auth_requirement+0x28>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800ab5a:	f8d2 c000 	ldr.w	ip, [r2]
 800ab5e:	6850      	ldr	r0, [r2, #4]
 800ab60:	6891      	ldr	r1, [r2, #8]
 800ab62:	68d2      	ldr	r2, [r2, #12]
 800ab64:	f8cd c006 	str.w	ip, [sp, #6]
 800ab68:	f8cd 000a 	str.w	r0, [sp, #10]
 800ab6c:	f8cd 100e 	str.w	r1, [sp, #14]
 800ab70:	f8cd 2012 	str.w	r2, [sp, #18]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800ab74:	f88d 3016 	strb.w	r3, [sp, #22]
  cp.max_encryption_key_size = max_encryption_key_size;
 800ab78:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800ab7c:	f88d 3017 	strb.w	r3, [sp, #23]
  cp.use_fixed_pin = use_fixed_pin;
 800ab80:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800ab84:	f88d 3018 	strb.w	r3, [sp, #24]
  cp.fixed_pin = htobl(fixed_pin);
 800ab88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab8a:	f8cd 3019 	str.w	r3, [sp, #25]
  cp.bonding_mode = bonding_mode;
 800ab8e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800ab92:	f88d 301d 	strb.w	r3, [sp, #29]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ab96:	2100      	movs	r1, #0
 800ab98:	9108      	str	r1, [sp, #32]
 800ab9a:	9109      	str	r1, [sp, #36]	; 0x24
 800ab9c:	910a      	str	r1, [sp, #40]	; 0x28
 800ab9e:	910b      	str	r1, [sp, #44]	; 0x2c
 800aba0:	910c      	str	r1, [sp, #48]	; 0x30
 800aba2:	910d      	str	r1, [sp, #52]	; 0x34
  rq.ogf = OGF_VENDOR_CMD;
 800aba4:	233f      	movs	r3, #63	; 0x3f
 800aba6:	f8ad 3020 	strh.w	r3, [sp, #32]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800abaa:	2386      	movs	r3, #134	; 0x86
 800abac:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  rq.cparam = &cp;
 800abb0:	ab01      	add	r3, sp, #4
 800abb2:	930a      	str	r3, [sp, #40]	; 0x28
  rq.clen = sizeof(cp);
 800abb4:	231a      	movs	r3, #26
 800abb6:	930b      	str	r3, [sp, #44]	; 0x2c
  rq.rparam = &status;
 800abb8:	f10d 0303 	add.w	r3, sp, #3
 800abbc:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = 1;
 800abbe:	2301      	movs	r3, #1
 800abc0:	930d      	str	r3, [sp, #52]	; 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 800abc2:	a808      	add	r0, sp, #32
 800abc4:	f000 fb4c 	bl	800b260 <hci_send_req>
 800abc8:	2800      	cmp	r0, #0
 800abca:	db04      	blt.n	800abd6 <aci_gap_set_auth_requirement+0x8a>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800abcc:	f89d 0003 	ldrb.w	r0, [sp, #3]
    return status;
  }
    
  return 0;
}
 800abd0:	b00f      	add	sp, #60	; 0x3c
 800abd2:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 800abd6:	20ff      	movs	r0, #255	; 0xff
 800abd8:	e7fa      	b.n	800abd0 <aci_gap_set_auth_requirement+0x84>

0800abda <aci_gap_update_adv_data>:
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
    
  if (AdvLen > (sizeof(buffer)-1))
 800abda:	281f      	cmp	r0, #31
 800abdc:	d829      	bhi.n	800ac32 <aci_gap_update_adv_data+0x58>
{
 800abde:	b510      	push	{r4, lr}
 800abe0:	b090      	sub	sp, #64	; 0x40
 800abe2:	4604      	mov	r4, r0
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvLen;
 800abe4:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 800abe8:	4602      	mov	r2, r0
 800abea:	f10d 0005 	add.w	r0, sp, #5
 800abee:	f002 ff43 	bl	800da78 <memcpy>
  indx +=  AdvLen;
 800abf2:	3401      	adds	r4, #1
 800abf4:	b2e4      	uxtb	r4, r4
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800abf6:	2100      	movs	r1, #0
 800abf8:	910a      	str	r1, [sp, #40]	; 0x28
 800abfa:	910b      	str	r1, [sp, #44]	; 0x2c
 800abfc:	910c      	str	r1, [sp, #48]	; 0x30
 800abfe:	910d      	str	r1, [sp, #52]	; 0x34
 800ac00:	910e      	str	r1, [sp, #56]	; 0x38
 800ac02:	910f      	str	r1, [sp, #60]	; 0x3c
  rq.ogf = OGF_VENDOR_CMD;
 800ac04:	233f      	movs	r3, #63	; 0x3f
 800ac06:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 800ac0a:	238e      	movs	r3, #142	; 0x8e
 800ac0c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  rq.cparam = (void *)buffer;
 800ac10:	ab01      	add	r3, sp, #4
 800ac12:	930c      	str	r3, [sp, #48]	; 0x30
  rq.clen = indx;
 800ac14:	940d      	str	r4, [sp, #52]	; 0x34
  rq.rparam = &status;
 800ac16:	f10d 0327 	add.w	r3, sp, #39	; 0x27
 800ac1a:	930e      	str	r3, [sp, #56]	; 0x38
  rq.rlen = 1;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	930f      	str	r3, [sp, #60]	; 0x3c
    
  if (hci_send_req(&rq, FALSE) < 0)
 800ac20:	a80a      	add	r0, sp, #40	; 0x28
 800ac22:	f000 fb1d 	bl	800b260 <hci_send_req>
 800ac26:	2800      	cmp	r0, #0
 800ac28:	db05      	blt.n	800ac36 <aci_gap_update_adv_data+0x5c>
    return BLE_STATUS_TIMEOUT;
    
  return status;
 800ac2a:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
}
 800ac2e:	b010      	add	sp, #64	; 0x40
 800ac30:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800ac32:	2042      	movs	r0, #66	; 0x42
}
 800ac34:	4770      	bx	lr
    return BLE_STATUS_TIMEOUT;
 800ac36:	20ff      	movs	r0, #255	; 0xff
 800ac38:	e7f9      	b.n	800ac2e <aci_gap_update_adv_data+0x54>

0800ac3a <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800ac3a:	b500      	push	{lr}
 800ac3c:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ac3e:	2100      	movs	r1, #0
 800ac40:	9102      	str	r1, [sp, #8]
 800ac42:	9103      	str	r1, [sp, #12]
 800ac44:	9104      	str	r1, [sp, #16]
 800ac46:	9105      	str	r1, [sp, #20]
 800ac48:	9106      	str	r1, [sp, #24]
 800ac4a:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_VENDOR_CMD;
 800ac4c:	233f      	movs	r3, #63	; 0x3f
 800ac4e:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
 800ac52:	f240 1301 	movw	r3, #257	; 0x101
 800ac56:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 800ac5a:	f10d 0307 	add.w	r3, sp, #7
 800ac5e:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 800ac60:	2301      	movs	r3, #1
 800ac62:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800ac64:	a802      	add	r0, sp, #8
 800ac66:	f000 fafb 	bl	800b260 <hci_send_req>
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	db04      	blt.n	800ac78 <aci_gatt_init+0x3e>
    return BLE_STATUS_TIMEOUT;

  return status;
 800ac6e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800ac72:	b009      	add	sp, #36	; 0x24
 800ac74:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 800ac78:	20ff      	movs	r0, #255	; 0xff
 800ac7a:	e7fa      	b.n	800ac72 <aci_gatt_init+0x38>

0800ac7c <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800ac7c:	b570      	push	{r4, r5, r6, lr}
 800ac7e:	b08c      	sub	sp, #48	; 0x30
 800ac80:	4616      	mov	r6, r2
 800ac82:	461d      	mov	r5, r3
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  buffer[indx] = service_uuid_type;
 800ac84:	f88d 0000 	strb.w	r0, [sp]
  indx++;
    
  if(service_uuid_type == UUID_TYPE_16){
 800ac88:	2801      	cmp	r0, #1
 800ac8a:	d038      	beq.n	800acfe <aci_gatt_add_serv+0x82>
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 800ac8c:	2410      	movs	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800ac8e:	4622      	mov	r2, r4
 800ac90:	f10d 0001 	add.w	r0, sp, #1
 800ac94:	f002 fef0 	bl	800da78 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 800ac98:	f104 0331 	add.w	r3, r4, #49	; 0x31
 800ac9c:	446b      	add	r3, sp
 800ac9e:	f803 6c30 	strb.w	r6, [r3, #-48]
  indx++;
    
  buffer[indx] = max_attr_records;
 800aca2:	f104 0332 	add.w	r3, r4, #50	; 0x32
 800aca6:	eb0d 0203 	add.w	r2, sp, r3
 800acaa:	f802 5c30 	strb.w	r5, [r2, #-48]
  indx++;
 800acae:	3403      	adds	r4, #3
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800acb0:	ab05      	add	r3, sp, #20
 800acb2:	2100      	movs	r1, #0
 800acb4:	f8ad 1014 	strh.w	r1, [sp, #20]
 800acb8:	f88d 1016 	strb.w	r1, [sp, #22]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800acbc:	9106      	str	r1, [sp, #24]
 800acbe:	9107      	str	r1, [sp, #28]
 800acc0:	9108      	str	r1, [sp, #32]
 800acc2:	9109      	str	r1, [sp, #36]	; 0x24
 800acc4:	910a      	str	r1, [sp, #40]	; 0x28
 800acc6:	910b      	str	r1, [sp, #44]	; 0x2c
  rq.ogf = OGF_VENDOR_CMD;
 800acc8:	223f      	movs	r2, #63	; 0x3f
 800acca:	f8ad 2018 	strh.w	r2, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
 800acce:	f44f 7281 	mov.w	r2, #258	; 0x102
 800acd2:	f8ad 201a 	strh.w	r2, [sp, #26]
  rq.cparam = (void *)buffer;
 800acd6:	f8cd d020 	str.w	sp, [sp, #32]
  rq.clen = indx;
 800acda:	9409      	str	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 800acdc:	930a      	str	r3, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800acde:	2303      	movs	r3, #3
 800ace0:	930b      	str	r3, [sp, #44]	; 0x2c

  if (hci_send_req(&rq, FALSE) < 0)
 800ace2:	a806      	add	r0, sp, #24
 800ace4:	f000 fabc 	bl	800b260 <hci_send_req>
 800ace8:	2800      	cmp	r0, #0
 800acea:	db0a      	blt.n	800ad02 <aci_gatt_add_serv+0x86>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800acec:	f89d 0014 	ldrb.w	r0, [sp, #20]
 800acf0:	b918      	cbnz	r0, 800acfa <aci_gatt_add_serv+0x7e>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 800acf2:	f8bd 2015 	ldrh.w	r2, [sp, #21]
 800acf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acf8:	801a      	strh	r2, [r3, #0]

  return 0;
}
 800acfa:	b00c      	add	sp, #48	; 0x30
 800acfc:	bd70      	pop	{r4, r5, r6, pc}
    uuid_len = 2;
 800acfe:	2402      	movs	r4, #2
 800ad00:	e7c5      	b.n	800ac8e <aci_gatt_add_serv+0x12>
    return BLE_STATUS_TIMEOUT;
 800ad02:	20ff      	movs	r0, #255	; 0xff
 800ad04:	e7f9      	b.n	800acfa <aci_gatt_add_serv+0x7e>

0800ad06 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800ad06:	b530      	push	{r4, r5, lr}
 800ad08:	b08f      	sub	sp, #60	; 0x3c
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	4611      	mov	r1, r2
 800ad0e:	461d      	mov	r5, r3
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  serviceHandle = htobs(serviceHandle);
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800ad10:	f8ad 0000 	strh.w	r0, [sp]
  indx += 2;
    
  buffer[indx] = charUuidType;
 800ad14:	f88d 4002 	strb.w	r4, [sp, #2]
  indx++;
    
  if(charUuidType == UUID_TYPE_16){
 800ad18:	2c01      	cmp	r4, #1
 800ad1a:	d056      	beq.n	800adca <aci_gatt_add_char+0xc4>
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 800ad1c:	2410      	movs	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800ad1e:	4622      	mov	r2, r4
 800ad20:	f10d 0003 	add.w	r0, sp, #3
 800ad24:	f002 fea8 	bl	800da78 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 800ad28:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 800ad2c:	eb0d 0203 	add.w	r2, sp, r3
 800ad30:	f802 5c38 	strb.w	r5, [r2, #-56]
  indx++;
    
  buffer[indx] = charProperties;
 800ad34:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800ad38:	446b      	add	r3, sp
 800ad3a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800ad3e:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = secPermissions;
 800ad42:	f104 033d 	add.w	r3, r4, #61	; 0x3d
 800ad46:	446b      	add	r3, sp
 800ad48:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 800ad4c:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = gattEvtMask;
 800ad50:	f104 033e 	add.w	r3, r4, #62	; 0x3e
 800ad54:	446b      	add	r3, sp
 800ad56:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800ad5a:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = encryKeySize;
 800ad5e:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 800ad62:	446b      	add	r3, sp
 800ad64:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800ad68:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = isVariable;
 800ad6c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800ad70:	446b      	add	r3, sp
 800ad72:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800ad76:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
 800ad7a:	3409      	adds	r4, #9
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ad7c:	ab07      	add	r3, sp, #28
 800ad7e:	2100      	movs	r1, #0
 800ad80:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ad84:	f88d 101e 	strb.w	r1, [sp, #30]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ad88:	9108      	str	r1, [sp, #32]
 800ad8a:	9109      	str	r1, [sp, #36]	; 0x24
 800ad8c:	910a      	str	r1, [sp, #40]	; 0x28
 800ad8e:	910b      	str	r1, [sp, #44]	; 0x2c
 800ad90:	910c      	str	r1, [sp, #48]	; 0x30
 800ad92:	910d      	str	r1, [sp, #52]	; 0x34
  rq.ogf = OGF_VENDOR_CMD;
 800ad94:	223f      	movs	r2, #63	; 0x3f
 800ad96:	f8ad 2020 	strh.w	r2, [sp, #32]
  rq.ocf = OCF_GATT_ADD_CHAR;
 800ad9a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ad9e:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
  rq.cparam = (void *)buffer;
 800ada2:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.clen = indx;
 800ada6:	940b      	str	r4, [sp, #44]	; 0x2c
  rq.rparam = &resp;
 800ada8:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800adaa:	2303      	movs	r3, #3
 800adac:	930d      	str	r3, [sp, #52]	; 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 800adae:	a808      	add	r0, sp, #32
 800adb0:	f000 fa56 	bl	800b260 <hci_send_req>
 800adb4:	2800      	cmp	r0, #0
 800adb6:	db0a      	blt.n	800adce <aci_gatt_add_char+0xc8>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800adb8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800adbc:	b918      	cbnz	r0, 800adc6 <aci_gatt_add_char+0xc0>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 800adbe:	f8bd 201d 	ldrh.w	r2, [sp, #29]
 800adc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800adc4:	801a      	strh	r2, [r3, #0]

  return 0;
}
 800adc6:	b00f      	add	sp, #60	; 0x3c
 800adc8:	bd30      	pop	{r4, r5, pc}
    uuid_len = 2;
 800adca:	2402      	movs	r4, #2
 800adcc:	e7a7      	b.n	800ad1e <aci_gatt_add_char+0x18>
    return BLE_STATUS_TIMEOUT;
 800adce:	20ff      	movs	r0, #255	; 0xff
 800add0:	e7f9      	b.n	800adc6 <aci_gatt_add_char+0xc0>

0800add2 <aci_gatt_update_char_value>:
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800add2:	2b7a      	cmp	r3, #122	; 0x7a
 800add4:	d831      	bhi.n	800ae3a <aci_gatt_update_char_value+0x68>
{
 800add6:	b510      	push	{r4, lr}
 800add8:	b0a8      	sub	sp, #160	; 0xa0
 800adda:	461c      	mov	r4, r3
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800addc:	f8ad 0004 	strh.w	r0, [sp, #4]
  indx += 2;
    
  charHandle = htobs(charHandle);
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800ade0:	f8ad 1006 	strh.w	r1, [sp, #6]
  indx += 2;
    
  buffer[indx] = charValOffset;
 800ade4:	f88d 2008 	strb.w	r2, [sp, #8]
  indx++;
    
  buffer[indx] = charValueLen;
 800ade8:	f88d 3009 	strb.w	r3, [sp, #9]
  indx++;
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800adec:	461a      	mov	r2, r3
 800adee:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800adf0:	f10d 000a 	add.w	r0, sp, #10
 800adf4:	f002 fe40 	bl	800da78 <memcpy>
  indx +=  charValueLen;
 800adf8:	3406      	adds	r4, #6
 800adfa:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800adfc:	2100      	movs	r1, #0
 800adfe:	9122      	str	r1, [sp, #136]	; 0x88
 800ae00:	9123      	str	r1, [sp, #140]	; 0x8c
 800ae02:	9124      	str	r1, [sp, #144]	; 0x90
 800ae04:	9125      	str	r1, [sp, #148]	; 0x94
 800ae06:	9126      	str	r1, [sp, #152]	; 0x98
 800ae08:	9127      	str	r1, [sp, #156]	; 0x9c
  rq.ogf = OGF_VENDOR_CMD;
 800ae0a:	233f      	movs	r3, #63	; 0x3f
 800ae0c:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800ae10:	f44f 7383 	mov.w	r3, #262	; 0x106
 800ae14:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = (void *)buffer;
 800ae18:	ab01      	add	r3, sp, #4
 800ae1a:	9324      	str	r3, [sp, #144]	; 0x90
  rq.clen = indx;
 800ae1c:	9425      	str	r4, [sp, #148]	; 0x94
  rq.rparam = &status;
 800ae1e:	f10d 0387 	add.w	r3, sp, #135	; 0x87
 800ae22:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = 1;
 800ae24:	2301      	movs	r3, #1
 800ae26:	9327      	str	r3, [sp, #156]	; 0x9c

  if (hci_send_req(&rq, FALSE) < 0)
 800ae28:	a822      	add	r0, sp, #136	; 0x88
 800ae2a:	f000 fa19 	bl	800b260 <hci_send_req>
 800ae2e:	2800      	cmp	r0, #0
 800ae30:	db05      	blt.n	800ae3e <aci_gatt_update_char_value+0x6c>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800ae32:	f89d 0087 	ldrb.w	r0, [sp, #135]	; 0x87
    return status;
  }

  return 0;
}
 800ae36:	b028      	add	sp, #160	; 0xa0
 800ae38:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800ae3a:	2042      	movs	r0, #66	; 0x42
}
 800ae3c:	4770      	bx	lr
    return BLE_STATUS_TIMEOUT;
 800ae3e:	20ff      	movs	r0, #255	; 0xff
 800ae40:	e7f9      	b.n	800ae36 <aci_gatt_update_char_value+0x64>

0800ae42 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 800ae42:	b500      	push	{lr}
 800ae44:	b089      	sub	sp, #36	; 0x24
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800ae46:	f8ad 0004 	strh.w	r0, [sp, #4]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 800ae4a:	2100      	movs	r1, #0
 800ae4c:	9102      	str	r1, [sp, #8]
 800ae4e:	9103      	str	r1, [sp, #12]
 800ae50:	9104      	str	r1, [sp, #16]
 800ae52:	9105      	str	r1, [sp, #20]
 800ae54:	9106      	str	r1, [sp, #24]
 800ae56:	9107      	str	r1, [sp, #28]
    rq.ogf = OGF_VENDOR_CMD;
 800ae58:	233f      	movs	r3, #63	; 0x3f
 800ae5a:	f8ad 3008 	strh.w	r3, [sp, #8]
    rq.ocf = OCF_GATT_ALLOW_READ;
 800ae5e:	f240 1327 	movw	r3, #295	; 0x127
 800ae62:	f8ad 300a 	strh.w	r3, [sp, #10]
    rq.cparam = &cp;
 800ae66:	ab01      	add	r3, sp, #4
 800ae68:	9304      	str	r3, [sp, #16]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800ae6a:	2302      	movs	r3, #2
 800ae6c:	9305      	str	r3, [sp, #20]
    rq.rparam = &status;
 800ae6e:	f10d 0303 	add.w	r3, sp, #3
 800ae72:	9306      	str	r3, [sp, #24]
    rq.rlen = 1;
 800ae74:	2301      	movs	r3, #1
 800ae76:	9307      	str	r3, [sp, #28]

    if (hci_send_req(&rq, FALSE) < 0)
 800ae78:	a802      	add	r0, sp, #8
 800ae7a:	f000 f9f1 	bl	800b260 <hci_send_req>
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	db04      	blt.n	800ae8c <aci_gatt_allow_read+0x4a>
      return BLE_STATUS_TIMEOUT;

    return status;
 800ae82:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
 800ae86:	b009      	add	sp, #36	; 0x24
 800ae88:	f85d fb04 	ldr.w	pc, [sp], #4
      return BLE_STATUS_TIMEOUT;
 800ae8c:	20ff      	movs	r0, #255	; 0xff
 800ae8e:	e7fa      	b.n	800ae86 <aci_gatt_allow_read+0x44>

0800ae90 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800ae90:	b510      	push	{r4, lr}
 800ae92:	b0a8      	sub	sp, #160	; 0xa0
 800ae94:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800ae96:	297e      	cmp	r1, #126	; 0x7e
 800ae98:	d829      	bhi.n	800aeee <aci_hal_write_config_data+0x5e>
 800ae9a:	4611      	mov	r1, r2
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = offset;
 800ae9c:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
    
  buffer[indx] = len;
 800aea0:	f88d 4005 	strb.w	r4, [sp, #5]
  indx++;
        
  BLUENRG_memcpy(buffer + indx, val, len);
 800aea4:	4622      	mov	r2, r4
 800aea6:	f10d 0006 	add.w	r0, sp, #6
 800aeaa:	f002 fde5 	bl	800da78 <memcpy>
  indx +=  len;
 800aeae:	3402      	adds	r4, #2
 800aeb0:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800aeb2:	2100      	movs	r1, #0
 800aeb4:	9122      	str	r1, [sp, #136]	; 0x88
 800aeb6:	9123      	str	r1, [sp, #140]	; 0x8c
 800aeb8:	9124      	str	r1, [sp, #144]	; 0x90
 800aeba:	9125      	str	r1, [sp, #148]	; 0x94
 800aebc:	9126      	str	r1, [sp, #152]	; 0x98
 800aebe:	9127      	str	r1, [sp, #156]	; 0x9c
  rq.ogf = OGF_VENDOR_CMD;
 800aec0:	233f      	movs	r3, #63	; 0x3f
 800aec2:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 800aec6:	230c      	movs	r3, #12
 800aec8:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = (void *)buffer;
 800aecc:	ab01      	add	r3, sp, #4
 800aece:	9324      	str	r3, [sp, #144]	; 0x90
  rq.clen = indx;
 800aed0:	9425      	str	r4, [sp, #148]	; 0x94
  rq.rparam = &status;
 800aed2:	f10d 0387 	add.w	r3, sp, #135	; 0x87
 800aed6:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = 1;
 800aed8:	2301      	movs	r3, #1
 800aeda:	9327      	str	r3, [sp, #156]	; 0x9c

  if (hci_send_req(&rq, FALSE) < 0)
 800aedc:	a822      	add	r0, sp, #136	; 0x88
 800aede:	f000 f9bf 	bl	800b260 <hci_send_req>
 800aee2:	2800      	cmp	r0, #0
 800aee4:	db05      	blt.n	800aef2 <aci_hal_write_config_data+0x62>
    return BLE_STATUS_TIMEOUT;

  return status;
 800aee6:	f89d 0087 	ldrb.w	r0, [sp, #135]	; 0x87
}
 800aeea:	b028      	add	sp, #160	; 0xa0
 800aeec:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800aeee:	2042      	movs	r0, #66	; 0x42
 800aef0:	e7fb      	b.n	800aeea <aci_hal_write_config_data+0x5a>
    return BLE_STATUS_TIMEOUT;
 800aef2:	20ff      	movs	r0, #255	; 0xff
 800aef4:	e7f9      	b.n	800aeea <aci_hal_write_config_data+0x5a>

0800aef6 <aci_hal_read_config_data>:

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 800aef6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aef8:	b0a9      	sub	sp, #164	; 0xa4
 800aefa:	460c      	mov	r4, r1
 800aefc:	4616      	mov	r6, r2
 800aefe:	461d      	mov	r5, r3
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 800af00:	f88d 0084 	strb.w	r0, [sp, #132]	; 0x84
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800af04:	2100      	movs	r1, #0
 800af06:	9122      	str	r1, [sp, #136]	; 0x88
 800af08:	9123      	str	r1, [sp, #140]	; 0x8c
 800af0a:	9124      	str	r1, [sp, #144]	; 0x90
 800af0c:	9125      	str	r1, [sp, #148]	; 0x94
 800af0e:	9126      	str	r1, [sp, #152]	; 0x98
 800af10:	9127      	str	r1, [sp, #156]	; 0x9c
  rq.ogf = OGF_VENDOR_CMD;
 800af12:	233f      	movs	r3, #63	; 0x3f
 800af14:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 800af18:	230d      	movs	r3, #13
 800af1a:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = &cp;
 800af1e:	ab21      	add	r3, sp, #132	; 0x84
 800af20:	9324      	str	r3, [sp, #144]	; 0x90
  rq.clen = sizeof(cp);
 800af22:	2301      	movs	r3, #1
 800af24:	9325      	str	r3, [sp, #148]	; 0x94
  rq.rparam = &rp;
 800af26:	ab01      	add	r3, sp, #4
 800af28:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = sizeof(rp);
 800af2a:	2380      	movs	r3, #128	; 0x80
 800af2c:	9327      	str	r3, [sp, #156]	; 0x9c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800af2e:	a822      	add	r0, sp, #136	; 0x88
 800af30:	f000 f996 	bl	800b260 <hci_send_req>
 800af34:	2800      	cmp	r0, #0
 800af36:	db18      	blt.n	800af6a <aci_hal_read_config_data+0x74>
    return BLE_STATUS_TIMEOUT;
  
  if(rp.status)
 800af38:	f89d 7004 	ldrb.w	r7, [sp, #4]
 800af3c:	b987      	cbnz	r7, 800af60 <aci_hal_read_config_data+0x6a>
    return rp.status;
  
  *data_len_out_p = rq.rlen-1;
 800af3e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800af40:	f103 3cff 	add.w	ip, r3, #4294967295
 800af44:	fa5f fc8c 	uxtb.w	ip, ip
 800af48:	f886 c000 	strb.w	ip, [r6]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800af4c:	fa1f f38c 	uxth.w	r3, ip
 800af50:	42a3      	cmp	r3, r4
 800af52:	d908      	bls.n	800af66 <aci_hal_read_config_data+0x70>
 800af54:	4622      	mov	r2, r4
 800af56:	f10d 0105 	add.w	r1, sp, #5
 800af5a:	4628      	mov	r0, r5
 800af5c:	f002 fd8c 	bl	800da78 <memcpy>
  
  return 0;
}
 800af60:	4638      	mov	r0, r7
 800af62:	b029      	add	sp, #164	; 0xa4
 800af64:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800af66:	4662      	mov	r2, ip
 800af68:	e7f5      	b.n	800af56 <aci_hal_read_config_data+0x60>
    return BLE_STATUS_TIMEOUT;
 800af6a:	27ff      	movs	r7, #255	; 0xff
 800af6c:	e7f8      	b.n	800af60 <aci_hal_read_config_data+0x6a>

0800af6e <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800af6e:	b500      	push	{lr}
 800af70:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800af72:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 800af76:	f88d 1005 	strb.w	r1, [sp, #5]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800af7a:	2100      	movs	r1, #0
 800af7c:	9102      	str	r1, [sp, #8]
 800af7e:	9103      	str	r1, [sp, #12]
 800af80:	9104      	str	r1, [sp, #16]
 800af82:	9105      	str	r1, [sp, #20]
 800af84:	9106      	str	r1, [sp, #24]
 800af86:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_VENDOR_CMD;
 800af88:	233f      	movs	r3, #63	; 0x3f
 800af8a:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800af8e:	230f      	movs	r3, #15
 800af90:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 800af94:	ab01      	add	r3, sp, #4
 800af96:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800af98:	2302      	movs	r3, #2
 800af9a:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 800af9c:	f10d 0303 	add.w	r3, sp, #3
 800afa0:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 800afa2:	2301      	movs	r3, #1
 800afa4:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800afa6:	a802      	add	r0, sp, #8
 800afa8:	f000 f95a 	bl	800b260 <hci_send_req>
 800afac:	2800      	cmp	r0, #0
 800afae:	db04      	blt.n	800afba <aci_hal_set_tx_power_level+0x4c>
    return BLE_STATUS_TIMEOUT;

  return status;
 800afb0:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
 800afb4:	b009      	add	sp, #36	; 0x24
 800afb6:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 800afba:	20ff      	movs	r0, #255	; 0xff
 800afbc:	e7fa      	b.n	800afb4 <aci_hal_set_tx_power_level+0x46>

0800afbe <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800afbe:	b530      	push	{r4, r5, lr}
 800afc0:	b085      	sub	sp, #20
 800afc2:	4605      	mov	r5, r0
 800afc4:	460c      	mov	r4, r1
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800afc6:	ab02      	add	r3, sp, #8
 800afc8:	9300      	str	r3, [sp, #0]
 800afca:	f10d 030a 	add.w	r3, sp, #10
 800afce:	f10d 020e 	add.w	r2, sp, #14
 800afd2:	a903      	add	r1, sp, #12
 800afd4:	f10d 000f 	add.w	r0, sp, #15
 800afd8:	f000 f839 	bl	800b04e <hci_le_read_local_version>
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800afdc:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800afe0:	d114      	bne.n	800b00c <getBlueNRGVersion+0x4e>
    *hwVersion = hci_revision >> 8;
 800afe2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800afe6:	0a1a      	lsrs	r2, r3, #8
 800afe8:	702a      	strb	r2, [r5, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800afea:	021b      	lsls	r3, r3, #8
 800afec:	b29b      	uxth	r3, r3
 800afee:	8023      	strh	r3, [r4, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800aff0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800aff4:	0912      	lsrs	r2, r2, #4
 800aff6:	0112      	lsls	r2, r2, #4
 800aff8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800affc:	4313      	orrs	r3, r2
 800affe:	8023      	strh	r3, [r4, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800b000:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800b004:	f002 020f 	and.w	r2, r2, #15
 800b008:	4313      	orrs	r3, r2
 800b00a:	8023      	strh	r3, [r4, #0]
  }
  return status;
}
 800b00c:	b005      	add	sp, #20
 800b00e:	bd30      	pop	{r4, r5, pc}

0800b010 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800b010:	b500      	push	{lr}
 800b012:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b014:	2100      	movs	r1, #0
 800b016:	9102      	str	r1, [sp, #8]
 800b018:	9103      	str	r1, [sp, #12]
 800b01a:	9104      	str	r1, [sp, #16]
 800b01c:	9105      	str	r1, [sp, #20]
 800b01e:	9106      	str	r1, [sp, #24]
 800b020:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_HOST_CTL;
 800b022:	2303      	movs	r3, #3
 800b024:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_RESET;
 800b028:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 800b02c:	f10d 0307 	add.w	r3, sp, #7
 800b030:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 800b032:	2301      	movs	r3, #1
 800b034:	9307      	str	r3, [sp, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800b036:	a802      	add	r0, sp, #8
 800b038:	f000 f912 	bl	800b260 <hci_send_req>
 800b03c:	2800      	cmp	r0, #0
 800b03e:	db04      	blt.n	800b04a <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 800b040:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800b044:	b009      	add	sp, #36	; 0x24
 800b046:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 800b04a:	20ff      	movs	r0, #255	; 0xff
 800b04c:	e7fa      	b.n	800b044 <hci_reset+0x34>

0800b04e <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800b04e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b052:	b08a      	sub	sp, #40	; 0x28
 800b054:	4680      	mov	r8, r0
 800b056:	460f      	mov	r7, r1
 800b058:	4616      	mov	r6, r2
 800b05a:	461d      	mov	r5, r3
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b05c:	ac01      	add	r4, sp, #4
 800b05e:	2100      	movs	r1, #0
 800b060:	9101      	str	r1, [sp, #4]
 800b062:	9102      	str	r1, [sp, #8]
 800b064:	f88d 100c 	strb.w	r1, [sp, #12]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b068:	9104      	str	r1, [sp, #16]
 800b06a:	9105      	str	r1, [sp, #20]
 800b06c:	9106      	str	r1, [sp, #24]
 800b06e:	9107      	str	r1, [sp, #28]
 800b070:	9108      	str	r1, [sp, #32]
 800b072:	9109      	str	r1, [sp, #36]	; 0x24
  rq.ogf = OGF_INFO_PARAM;
 800b074:	2304      	movs	r3, #4
 800b076:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800b07a:	2301      	movs	r3, #1
 800b07c:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
 800b080:	9408      	str	r4, [sp, #32]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800b082:	2309      	movs	r3, #9
 800b084:	9309      	str	r3, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 800b086:	a804      	add	r0, sp, #16
 800b088:	f000 f8ea 	bl	800b260 <hci_send_req>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	db16      	blt.n	800b0be <hci_le_read_local_version+0x70>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 800b090:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800b094:	b980      	cbnz	r0, 800b0b8 <hci_le_read_local_version+0x6a>
    return resp.status;
  }
  
  
  *hci_version = resp.hci_version;
 800b096:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b09a:	f888 3000 	strb.w	r3, [r8]
  *hci_revision =  btohs(resp.hci_revision);
 800b09e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b0a2:	803b      	strh	r3, [r7, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800b0a4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b0a8:	7033      	strb	r3, [r6, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800b0aa:	f8bd 3009 	ldrh.w	r3, [sp, #9]
 800b0ae:	802b      	strh	r3, [r5, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800b0b0:	f8bd 200b 	ldrh.w	r2, [sp, #11]
 800b0b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b0b6:	801a      	strh	r2, [r3, #0]
  
  return 0;
}
 800b0b8:	b00a      	add	sp, #40	; 0x28
 800b0ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 800b0be:	20ff      	movs	r0, #255	; 0xff
 800b0c0:	e7fa      	b.n	800b0b8 <hci_le_read_local_version+0x6a>

0800b0c2 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800b0c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0c4:	b091      	sub	sp, #68	; 0x44
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	460d      	mov	r5, r1
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800b0ca:	af02      	add	r7, sp, #8
 800b0cc:	2620      	movs	r6, #32
 800b0ce:	4632      	mov	r2, r6
 800b0d0:	2100      	movs	r1, #0
 800b0d2:	4638      	mov	r0, r7
 800b0d4:	f002 fc8c 	bl	800d9f0 <memset>
  scan_resp_cp.length = length;
 800b0d8:	f88d 4008 	strb.w	r4, [sp, #8]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800b0dc:	4622      	mov	r2, r4
 800b0de:	2c1f      	cmp	r4, #31
 800b0e0:	bf28      	it	cs
 800b0e2:	221f      	movcs	r2, #31
 800b0e4:	4629      	mov	r1, r5
 800b0e6:	f10d 0009 	add.w	r0, sp, #9
 800b0ea:	f002 fcc5 	bl	800da78 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b0ee:	2100      	movs	r1, #0
 800b0f0:	910a      	str	r1, [sp, #40]	; 0x28
 800b0f2:	910b      	str	r1, [sp, #44]	; 0x2c
 800b0f4:	910c      	str	r1, [sp, #48]	; 0x30
 800b0f6:	910d      	str	r1, [sp, #52]	; 0x34
 800b0f8:	910e      	str	r1, [sp, #56]	; 0x38
 800b0fa:	910f      	str	r1, [sp, #60]	; 0x3c
  rq.ogf = OGF_LE_CTL;
 800b0fc:	2308      	movs	r3, #8
 800b0fe:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800b102:	2309      	movs	r3, #9
 800b104:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  rq.cparam = &scan_resp_cp;
 800b108:	970c      	str	r7, [sp, #48]	; 0x30
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800b10a:	960d      	str	r6, [sp, #52]	; 0x34
  rq.rparam = &status;
 800b10c:	f10d 0307 	add.w	r3, sp, #7
 800b110:	930e      	str	r3, [sp, #56]	; 0x38
  rq.rlen = 1;
 800b112:	2301      	movs	r3, #1
 800b114:	930f      	str	r3, [sp, #60]	; 0x3c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800b116:	a80a      	add	r0, sp, #40	; 0x28
 800b118:	f000 f8a2 	bl	800b260 <hci_send_req>
 800b11c:	2800      	cmp	r0, #0
 800b11e:	db03      	blt.n	800b128 <hci_le_set_scan_resp_data+0x66>
    return BLE_STATUS_TIMEOUT;
  
  return status;
 800b120:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800b124:	b011      	add	sp, #68	; 0x44
 800b126:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 800b128:	20ff      	movs	r0, #255	; 0xff
 800b12a:	e7fb      	b.n	800b124 <hci_le_set_scan_resp_data+0x62>

0800b12c <verify_packet>:
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800b12c:	7a03      	ldrb	r3, [r0, #8]
 800b12e:	2b04      	cmp	r3, #4
 800b130:	d107      	bne.n	800b142 <verify_packet+0x16>
    return 1; /* Incorrect type */
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800b132:	7a82      	ldrb	r2, [r0, #10]
 800b134:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 800b138:	3b03      	subs	r3, #3
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d103      	bne.n	800b146 <verify_packet+0x1a>
    return 2; /* Wrong length (packet truncated or too long) */
  
  return 0;      
 800b13e:	2000      	movs	r0, #0
 800b140:	4770      	bx	lr
    return 1; /* Incorrect type */
 800b142:	2001      	movs	r0, #1
 800b144:	4770      	bx	lr
    return 2; /* Wrong length (packet truncated or too long) */
 800b146:	2002      	movs	r0, #2
}
 800b148:	4770      	bx	lr
	...

0800b14c <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800b14c:	b510      	push	{r4, lr}
 800b14e:	b0a2      	sub	sp, #136	; 0x88
 800b150:	4614      	mov	r4, r2
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800b152:	f3c1 0c09 	ubfx	ip, r1, #0, #10
 800b156:	ea4c 2c80 	orr.w	ip, ip, r0, lsl #10
 800b15a:	f8ad c004 	strh.w	ip, [sp, #4]
  hc.plen = plen;
 800b15e:	f88d 2006 	strb.w	r2, [sp, #6]

  payload[0] = HCI_COMMAND_PKT;
 800b162:	2101      	movs	r1, #1
 800b164:	f88d 1008 	strb.w	r1, [sp, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800b168:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800b16c:	b2d1      	uxtb	r1, r2
 800b16e:	f8ad 0009 	strh.w	r0, [sp, #9]
 800b172:	f88d 100b 	strb.w	r1, [sp, #11]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800b176:	4619      	mov	r1, r3
 800b178:	a803      	add	r0, sp, #12
 800b17a:	f002 fc7d 	bl	800da78 <memcpy>
  
  if (hciContext.io.Send)
 800b17e:	4b04      	ldr	r3, [pc, #16]	; (800b190 <send_cmd+0x44>)
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	b113      	cbz	r3, 800b18a <send_cmd+0x3e>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800b184:	1d21      	adds	r1, r4, #4
 800b186:	a802      	add	r0, sp, #8
 800b188:	4798      	blx	r3
  }
}
 800b18a:	b022      	add	sp, #136	; 0x88
 800b18c:	bd10      	pop	{r4, pc}
 800b18e:	bf00      	nop
 800b190:	20002654 	.word	0x20002654

0800b194 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800b194:	b510      	push	{r4, lr}
 800b196:	b082      	sub	sp, #8
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800b198:	e00a      	b.n	800b1b0 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800b19a:	4c09      	ldr	r4, [pc, #36]	; (800b1c0 <free_event_list+0x2c>)
 800b19c:	a901      	add	r1, sp, #4
 800b19e:	f104 0020 	add.w	r0, r4, #32
 800b1a2:	f000 f997 	bl	800b4d4 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800b1a6:	9901      	ldr	r1, [sp, #4]
 800b1a8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b1ac:	f000 f97b 	bl	800b4a6 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800b1b0:	4804      	ldr	r0, [pc, #16]	; (800b1c4 <free_event_list+0x30>)
 800b1b2:	f000 f9b1 	bl	800b518 <list_get_size>
 800b1b6:	2801      	cmp	r0, #1
 800b1b8:	ddef      	ble.n	800b19a <free_event_list+0x6>
  }
}
 800b1ba:	b002      	add	sp, #8
 800b1bc:	bd10      	pop	{r4, pc}
 800b1be:	bf00      	nop
 800b1c0:	20002654 	.word	0x20002654
 800b1c4:	2000267c 	.word	0x2000267c

0800b1c8 <move_list>:
{
 800b1c8:	b530      	push	{r4, r5, lr}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	4605      	mov	r5, r0
 800b1ce:	460c      	mov	r4, r1
  while (!list_is_empty(src_list))
 800b1d0:	e007      	b.n	800b1e2 <move_list+0x1a>
    list_remove_tail(src_list, &tmp_node);
 800b1d2:	a901      	add	r1, sp, #4
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f000 f98e 	bl	800b4f6 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800b1da:	9901      	ldr	r1, [sp, #4]
 800b1dc:	4628      	mov	r0, r5
 800b1de:	f000 f956 	bl	800b48e <list_insert_head>
  while (!list_is_empty(src_list))
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	f000 f947 	bl	800b476 <list_is_empty>
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	d0f2      	beq.n	800b1d2 <move_list+0xa>
}
 800b1ec:	b003      	add	sp, #12
 800b1ee:	bd30      	pop	{r4, r5, pc}

0800b1f0 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b1f0:	b510      	push	{r4, lr}
  uint8_t index;

  if(UserEvtRx != NULL)
 800b1f2:	b108      	cbz	r0, 800b1f8 <hci_init+0x8>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800b1f4:	4a12      	ldr	r2, [pc, #72]	; (800b240 <hci_init+0x50>)
 800b1f6:	61d0      	str	r0, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800b1f8:	4c11      	ldr	r4, [pc, #68]	; (800b240 <hci_init+0x50>)
 800b1fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b1fe:	f000 f937 	bl	800b470 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800b202:	f104 0020 	add.w	r0, r4, #32
 800b206:	f000 f933 	bl	800b470 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800b20a:	f7fa f8d9 	bl	80053c0 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800b20e:	2400      	movs	r4, #0
 800b210:	e00a      	b.n	800b228 <hci_init+0x38>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800b212:	480b      	ldr	r0, [pc, #44]	; (800b240 <hci_init+0x50>)
 800b214:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b218:	218c      	movs	r1, #140	; 0x8c
 800b21a:	fb01 3104 	mla	r1, r1, r4, r3
 800b21e:	3028      	adds	r0, #40	; 0x28
 800b220:	f000 f941 	bl	800b4a6 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800b224:	3401      	adds	r4, #1
 800b226:	b2e4      	uxtb	r4, r4
 800b228:	2c04      	cmp	r4, #4
 800b22a:	d9f2      	bls.n	800b212 <hci_init+0x22>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800b22c:	4b04      	ldr	r3, [pc, #16]	; (800b240 <hci_init+0x50>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	b10b      	cbz	r3, 800b236 <hci_init+0x46>
 800b232:	2000      	movs	r0, #0
 800b234:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800b236:	4b02      	ldr	r3, [pc, #8]	; (800b240 <hci_init+0x50>)
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	b103      	cbz	r3, 800b23e <hci_init+0x4e>
 800b23c:	4798      	blx	r3
}
 800b23e:	bd10      	pop	{r4, pc}
 800b240:	20002654 	.word	0x20002654

0800b244 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800b244:	6802      	ldr	r2, [r0, #0]
 800b246:	4b05      	ldr	r3, [pc, #20]	; (800b25c <hci_register_io_bus+0x18>)
 800b248:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 800b24a:	68c2      	ldr	r2, [r0, #12]
 800b24c:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 800b24e:	6902      	ldr	r2, [r0, #16]
 800b250:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 800b252:	6982      	ldr	r2, [r0, #24]
 800b254:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 800b256:	6882      	ldr	r2, [r0, #8]
 800b258:	609a      	str	r2, [r3, #8]
}
 800b25a:	4770      	bx	lr
 800b25c:	20002654 	.word	0x20002654

0800b260 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800b260:	b570      	push	{r4, r5, r6, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	4605      	mov	r5, r0
 800b266:	460c      	mov	r4, r1
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800b268:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800b26c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b270:	8802      	ldrh	r2, [r0, #0]
 800b272:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800b276:	b29e      	uxth	r6, r3
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800b278:	2300      	movs	r3, #0
 800b27a:	9303      	str	r3, [sp, #12]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800b27c:	a801      	add	r0, sp, #4
 800b27e:	f000 f8f7 	bl	800b470 <list_init_head>

  free_event_list();
 800b282:	f7ff ff87 	bl	800b194 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800b286:	68ab      	ldr	r3, [r5, #8]
 800b288:	7b2a      	ldrb	r2, [r5, #12]
 800b28a:	8869      	ldrh	r1, [r5, #2]
 800b28c:	8828      	ldrh	r0, [r5, #0]
 800b28e:	f7ff ff5d 	bl	800b14c <send_cmd>
  
  if (async)
 800b292:	2c00      	cmp	r4, #0
 800b294:	f040 8086 	bne.w	800b3a4 <hci_send_req+0x144>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800b298:	f7fb fd9a 	bl	8006dd0 <HAL_GetTick>
 800b29c:	4604      	mov	r4, r0
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800b29e:	f7fb fd97 	bl	8006dd0 <HAL_GetTick>
 800b2a2:	1b00      	subs	r0, r0, r4
 800b2a4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b2a8:	d822      	bhi.n	800b2f0 <hci_send_req+0x90>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800b2aa:	483f      	ldr	r0, [pc, #252]	; (800b3a8 <hci_send_req+0x148>)
 800b2ac:	f000 f8e3 	bl	800b476 <list_is_empty>
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	d1f4      	bne.n	800b29e <hci_send_req+0x3e>
        break;
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800b2b4:	a903      	add	r1, sp, #12
 800b2b6:	483c      	ldr	r0, [pc, #240]	; (800b3a8 <hci_send_req+0x148>)
 800b2b8:	f000 f90c 	bl	800b4d4 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800b2bc:	9b03      	ldr	r3, [sp, #12]

    if (hci_hdr->type == HCI_EVENT_PKT)
 800b2be:	7a1a      	ldrb	r2, [r3, #8]
 800b2c0:	2a04      	cmp	r2, #4
 800b2c2:	d128      	bne.n	800b316 <hci_send_req+0xb6>
    {
      event_pckt = (void *)(hci_hdr->data);
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800b2c4:	f103 010b 	add.w	r1, r3, #11
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800b2c8:	f893 0088 	ldrb.w	r0, [r3, #136]	; 0x88
 800b2cc:	1ec4      	subs	r4, r0, #3
    
      switch (event_pckt->evt) 
 800b2ce:	7a5a      	ldrb	r2, [r3, #9]
 800b2d0:	2a10      	cmp	r2, #16
 800b2d2:	d00d      	beq.n	800b2f0 <hci_send_req+0x90>
 800b2d4:	d819      	bhi.n	800b30a <hci_send_req+0xaa>
 800b2d6:	2a0e      	cmp	r2, #14
 800b2d8:	d036      	beq.n	800b348 <hci_send_req+0xe8>
 800b2da:	2a0f      	cmp	r2, #15
 800b2dc:	d11b      	bne.n	800b316 <hci_send_req+0xb6>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
        
        if (cs->opcode != opcode)
 800b2de:	f8b3 200d 	ldrh.w	r2, [r3, #13]
 800b2e2:	42b2      	cmp	r2, r6
 800b2e4:	d104      	bne.n	800b2f0 <hci_send_req+0x90>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800b2e6:	686a      	ldr	r2, [r5, #4]
 800b2e8:	2a0f      	cmp	r2, #15
 800b2ea:	d024      	beq.n	800b336 <hci_send_req+0xd6>
          if (cs->status) {
 800b2ec:	7adb      	ldrb	r3, [r3, #11]
 800b2ee:	b193      	cbz	r3, 800b316 <hci_send_req+0xb6>
      hciReadPacket=NULL;
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800b2f0:	9903      	ldr	r1, [sp, #12]
 800b2f2:	b111      	cbz	r1, 800b2fa <hci_send_req+0x9a>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b2f4:	482d      	ldr	r0, [pc, #180]	; (800b3ac <hci_send_req+0x14c>)
 800b2f6:	f000 f8ca 	bl	800b48e <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800b2fa:	a901      	add	r1, sp, #4
 800b2fc:	482a      	ldr	r0, [pc, #168]	; (800b3a8 <hci_send_req+0x148>)
 800b2fe:	f7ff ff63 	bl	800b1c8 <move_list>

  return -1;
 800b302:	f04f 30ff 	mov.w	r0, #4294967295
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);

  return 0;
}
 800b306:	b004      	add	sp, #16
 800b308:	bd70      	pop	{r4, r5, r6, pc}
      switch (event_pckt->evt) 
 800b30a:	2a3e      	cmp	r2, #62	; 0x3e
 800b30c:	d103      	bne.n	800b316 <hci_send_req+0xb6>
        if (me->subevent != r->event)
 800b30e:	7ad9      	ldrb	r1, [r3, #11]
 800b310:	686a      	ldr	r2, [r5, #4]
 800b312:	4291      	cmp	r1, r2
 800b314:	d033      	beq.n	800b37e <hci_send_req+0x11e>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800b316:	4825      	ldr	r0, [pc, #148]	; (800b3ac <hci_send_req+0x14c>)
 800b318:	f000 f8ad 	bl	800b476 <list_is_empty>
 800b31c:	b120      	cbz	r0, 800b328 <hci_send_req+0xc8>
 800b31e:	4822      	ldr	r0, [pc, #136]	; (800b3a8 <hci_send_req+0x148>)
 800b320:	f000 f8a9 	bl	800b476 <list_is_empty>
 800b324:	2800      	cmp	r0, #0
 800b326:	d136      	bne.n	800b396 <hci_send_req+0x136>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800b328:	9903      	ldr	r1, [sp, #12]
 800b32a:	a801      	add	r0, sp, #4
 800b32c:	f000 f8bb 	bl	800b4a6 <list_insert_tail>
      hciReadPacket=NULL;
 800b330:	2300      	movs	r3, #0
 800b332:	9303      	str	r3, [sp, #12]
 800b334:	e7b0      	b.n	800b298 <hci_send_req+0x38>
        r->rlen = MIN(len, r->rlen);
 800b336:	696a      	ldr	r2, [r5, #20]
 800b338:	42a2      	cmp	r2, r4
 800b33a:	bf28      	it	cs
 800b33c:	4622      	movcs	r2, r4
 800b33e:	616a      	str	r2, [r5, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800b340:	6928      	ldr	r0, [r5, #16]
 800b342:	f002 fb99 	bl	800da78 <memcpy>
        goto done;
 800b346:	e00d      	b.n	800b364 <hci_send_req+0x104>
        if (cc->opcode != opcode)
 800b348:	899a      	ldrh	r2, [r3, #12]
 800b34a:	42b2      	cmp	r2, r6
 800b34c:	d1d0      	bne.n	800b2f0 <hci_send_req+0x90>
        len -= EVT_CMD_COMPLETE_SIZE;
 800b34e:	3806      	subs	r0, #6
        r->rlen = MIN(len, r->rlen);
 800b350:	696a      	ldr	r2, [r5, #20]
 800b352:	4282      	cmp	r2, r0
 800b354:	bf28      	it	cs
 800b356:	4602      	movcs	r2, r0
 800b358:	616a      	str	r2, [r5, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800b35a:	f103 010e 	add.w	r1, r3, #14
 800b35e:	6928      	ldr	r0, [r5, #16]
 800b360:	f002 fb8a 	bl	800da78 <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800b364:	4c12      	ldr	r4, [pc, #72]	; (800b3b0 <hci_send_req+0x150>)
 800b366:	9903      	ldr	r1, [sp, #12]
 800b368:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b36c:	f000 f88f 	bl	800b48e <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800b370:	a901      	add	r1, sp, #4
 800b372:	f104 0020 	add.w	r0, r4, #32
 800b376:	f7ff ff27 	bl	800b1c8 <move_list>
  return 0;
 800b37a:	2000      	movs	r0, #0
 800b37c:	e7c3      	b.n	800b306 <hci_send_req+0xa6>
        len -= 1;
 800b37e:	3804      	subs	r0, #4
        r->rlen = MIN(len, r->rlen);
 800b380:	696a      	ldr	r2, [r5, #20]
 800b382:	4282      	cmp	r2, r0
 800b384:	bf28      	it	cs
 800b386:	4602      	movcs	r2, r0
 800b388:	616a      	str	r2, [r5, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800b38a:	f103 010c 	add.w	r1, r3, #12
 800b38e:	6928      	ldr	r0, [r5, #16]
 800b390:	f002 fb72 	bl	800da78 <memcpy>
        goto done;
 800b394:	e7e6      	b.n	800b364 <hci_send_req+0x104>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b396:	9903      	ldr	r1, [sp, #12]
 800b398:	4804      	ldr	r0, [pc, #16]	; (800b3ac <hci_send_req+0x14c>)
 800b39a:	f000 f884 	bl	800b4a6 <list_insert_tail>
      hciReadPacket=NULL;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	9303      	str	r3, [sp, #12]
 800b3a2:	e779      	b.n	800b298 <hci_send_req+0x38>
    return 0;
 800b3a4:	2000      	movs	r0, #0
 800b3a6:	e7ae      	b.n	800b306 <hci_send_req+0xa6>
 800b3a8:	20002674 	.word	0x20002674
 800b3ac:	2000267c 	.word	0x2000267c
 800b3b0:	20002654 	.word	0x20002654

0800b3b4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800b3b4:	b510      	push	{r4, lr}
 800b3b6:	b082      	sub	sp, #8
  tHciDataPacket * hciReadPacket = NULL;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	9301      	str	r3, [sp, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800b3bc:	e006      	b.n	800b3cc <hci_user_evt_proc+0x18>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);

    if (hciContext.UserEvtRx != NULL)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800b3be:	9801      	ldr	r0, [sp, #4]
 800b3c0:	3008      	adds	r0, #8
 800b3c2:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b3c4:	9901      	ldr	r1, [sp, #4]
 800b3c6:	4809      	ldr	r0, [pc, #36]	; (800b3ec <hci_user_evt_proc+0x38>)
 800b3c8:	f000 f86d 	bl	800b4a6 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800b3cc:	4808      	ldr	r0, [pc, #32]	; (800b3f0 <hci_user_evt_proc+0x3c>)
 800b3ce:	f000 f852 	bl	800b476 <list_is_empty>
 800b3d2:	b948      	cbnz	r0, 800b3e8 <hci_user_evt_proc+0x34>
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800b3d4:	4c07      	ldr	r4, [pc, #28]	; (800b3f4 <hci_user_evt_proc+0x40>)
 800b3d6:	a901      	add	r1, sp, #4
 800b3d8:	f104 0020 	add.w	r0, r4, #32
 800b3dc:	f000 f87a 	bl	800b4d4 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 800b3e0:	69e3      	ldr	r3, [r4, #28]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d1eb      	bne.n	800b3be <hci_user_evt_proc+0xa>
 800b3e6:	e7ed      	b.n	800b3c4 <hci_user_evt_proc+0x10>
  }
}
 800b3e8:	b002      	add	sp, #8
 800b3ea:	bd10      	pop	{r4, pc}
 800b3ec:	2000267c 	.word	0x2000267c
 800b3f0:	20002674 	.word	0x20002674
 800b3f4:	20002654 	.word	0x20002654

0800b3f8 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800b3f8:	b530      	push	{r4, r5, lr}
 800b3fa:	b083      	sub	sp, #12
  tHciDataPacket * hciReadPacket = NULL;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	9301      	str	r3, [sp, #4]
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800b400:	4818      	ldr	r0, [pc, #96]	; (800b464 <hci_notify_asynch_evt+0x6c>)
 800b402:	f000 f838 	bl	800b476 <list_is_empty>
 800b406:	b118      	cbz	r0, 800b410 <hci_notify_asynch_evt+0x18>
      }
    }
  }
  else 
  {
    ret = 1;
 800b408:	2401      	movs	r4, #1
  }
  return ret;

}
 800b40a:	4620      	mov	r0, r4
 800b40c:	b003      	add	sp, #12
 800b40e:	bd30      	pop	{r4, r5, pc}
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800b410:	4c15      	ldr	r4, [pc, #84]	; (800b468 <hci_notify_asynch_evt+0x70>)
 800b412:	a901      	add	r1, sp, #4
 800b414:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b418:	f000 f85c 	bl	800b4d4 <list_remove_head>
    if (hciContext.io.Receive)
 800b41c:	68e3      	ldr	r3, [r4, #12]
 800b41e:	b1fb      	cbz	r3, 800b460 <hci_notify_asynch_evt+0x68>
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800b420:	2180      	movs	r1, #128	; 0x80
 800b422:	9801      	ldr	r0, [sp, #4]
 800b424:	3008      	adds	r0, #8
 800b426:	4798      	blx	r3
      if (data_len > 0)
 800b428:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800b42c:	d012      	beq.n	800b454 <hci_notify_asynch_evt+0x5c>
        hciReadPacket->data_len = data_len;
 800b42e:	9d01      	ldr	r5, [sp, #4]
 800b430:	f885 0088 	strb.w	r0, [r5, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800b434:	4628      	mov	r0, r5
 800b436:	f7ff fe79 	bl	800b12c <verify_packet>
 800b43a:	4604      	mov	r4, r0
 800b43c:	b920      	cbnz	r0, 800b448 <hci_notify_asynch_evt+0x50>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800b43e:	4629      	mov	r1, r5
 800b440:	480a      	ldr	r0, [pc, #40]	; (800b46c <hci_notify_asynch_evt+0x74>)
 800b442:	f000 f830 	bl	800b4a6 <list_insert_tail>
 800b446:	e7e0      	b.n	800b40a <hci_notify_asynch_evt+0x12>
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800b448:	4629      	mov	r1, r5
 800b44a:	4806      	ldr	r0, [pc, #24]	; (800b464 <hci_notify_asynch_evt+0x6c>)
 800b44c:	f000 f81f 	bl	800b48e <list_insert_head>
  int32_t ret = 0;
 800b450:	2400      	movs	r4, #0
 800b452:	e7da      	b.n	800b40a <hci_notify_asynch_evt+0x12>
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b454:	9901      	ldr	r1, [sp, #4]
 800b456:	4803      	ldr	r0, [pc, #12]	; (800b464 <hci_notify_asynch_evt+0x6c>)
 800b458:	f000 f819 	bl	800b48e <list_insert_head>
  int32_t ret = 0;
 800b45c:	2400      	movs	r4, #0
 800b45e:	e7d4      	b.n	800b40a <hci_notify_asynch_evt+0x12>
 800b460:	2400      	movs	r4, #0
  return ret;
 800b462:	e7d2      	b.n	800b40a <hci_notify_asynch_evt+0x12>
 800b464:	2000267c 	.word	0x2000267c
 800b468:	20002654 	.word	0x20002654
 800b46c:	20002674 	.word	0x20002674

0800b470 <list_init_head>:
/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 800b470:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;	
 800b472:	6040      	str	r0, [r0, #4]
}
 800b474:	4770      	bx	lr

0800b476 <list_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b476:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b47a:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800b47c:	6802      	ldr	r2, [r0, #0]
 800b47e:	4282      	cmp	r2, r0
 800b480:	d003      	beq.n	800b48a <list_is_empty+0x14>
  {
    return_value = 1;
  }
  else
  {
    return_value = 0;
 800b482:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b484:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 800b488:	4770      	bx	lr
    return_value = 1;
 800b48a:	2001      	movs	r0, #1
 800b48c:	e7fa      	b.n	800b484 <list_is_empty+0xe>

0800b48e <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b48e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b492:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800b494:	6802      	ldr	r2, [r0, #0]
 800b496:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 800b498:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 800b49a:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 800b49c:	680a      	ldr	r2, [r1, #0]
 800b49e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4a0:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b4a4:	4770      	bx	lr

0800b4a6 <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4a6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b4aa:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800b4ac:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 800b4ae:	6842      	ldr	r2, [r0, #4]
 800b4b0:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 800b4b2:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 800b4b4:	684a      	ldr	r2, [r1, #4]
 800b4b6:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4b8:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b4bc:	4770      	bx	lr

0800b4be <list_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4be:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b4c2:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800b4c4:	6841      	ldr	r1, [r0, #4]
 800b4c6:	6803      	ldr	r3, [r0, #0]
 800b4c8:	600b      	str	r3, [r1, #0]
  (node->next)->prev = node->prev;
 800b4ca:	6841      	ldr	r1, [r0, #4]
 800b4cc:	6059      	str	r1, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4ce:	f382 8810 	msr	PRIMASK, r2
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b4d2:	4770      	bx	lr

0800b4d4 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800b4d4:	b538      	push	{r3, r4, r5, lr}
 800b4d6:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4d8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b4dc:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800b4de:	6800      	ldr	r0, [r0, #0]
 800b4e0:	6008      	str	r0, [r1, #0]
  list_remove_node (listHead->next);
 800b4e2:	f7ff ffec 	bl	800b4be <list_remove_node>
  (*node)->next = NULL;
 800b4e6:	6822      	ldr	r2, [r4, #0]
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 800b4ec:	6822      	ldr	r2, [r4, #0]
 800b4ee:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4f0:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b4f4:	bd38      	pop	{r3, r4, r5, pc}

0800b4f6 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800b4f6:	b538      	push	{r3, r4, r5, lr}
 800b4f8:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4fa:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b4fe:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800b500:	6840      	ldr	r0, [r0, #4]
 800b502:	6008      	str	r0, [r1, #0]
  list_remove_node (listHead->prev);
 800b504:	f7ff ffdb 	bl	800b4be <list_remove_node>
  (*node)->next = NULL;
 800b508:	6822      	ldr	r2, [r4, #0]
 800b50a:	2300      	movs	r3, #0
 800b50c:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 800b50e:	6822      	ldr	r2, [r4, #0]
 800b510:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b512:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b516:	bd38      	pop	{r3, r4, r5, pc}

0800b518 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800b518:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b51a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b51e:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800b520:	6803      	ldr	r3, [r0, #0]
  int size = 0;
 800b522:	2000      	movs	r0, #0
  while (temp != listHead)
 800b524:	e001      	b.n	800b52a <list_get_size+0x12>
  {
    size++;
 800b526:	3001      	adds	r0, #1
    temp = temp->next;		
 800b528:	681b      	ldr	r3, [r3, #0]
  while (temp != listHead)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d1fb      	bne.n	800b526 <list_get_size+0xe>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b52e:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 800b532:	4770      	bx	lr

0800b534 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b534:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b536:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800b53a:	b184      	cbz	r4, 800b55e <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b53c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800b540:	b17b      	cbz	r3, 800b562 <USBD_CDC_EP0_RxReady+0x2e>
 800b542:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800b546:	28ff      	cmp	r0, #255	; 0xff
 800b548:	d00d      	beq.n	800b566 <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800b550:	4621      	mov	r1, r4
 800b552:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800b554:	23ff      	movs	r3, #255	; 0xff
 800b556:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b55a:	2000      	movs	r0, #0
}
 800b55c:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800b55e:	2003      	movs	r0, #3
 800b560:	e7fc      	b.n	800b55c <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 800b562:	2000      	movs	r0, #0
 800b564:	e7fa      	b.n	800b55c <USBD_CDC_EP0_RxReady+0x28>
 800b566:	2000      	movs	r0, #0
 800b568:	e7f8      	b.n	800b55c <USBD_CDC_EP0_RxReady+0x28>
	...

0800b56c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b56c:	2343      	movs	r3, #67	; 0x43
 800b56e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800b570:	4800      	ldr	r0, [pc, #0]	; (800b574 <USBD_CDC_GetFSCfgDesc+0x8>)
 800b572:	4770      	bx	lr
 800b574:	20000090 	.word	0x20000090

0800b578 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b578:	2343      	movs	r3, #67	; 0x43
 800b57a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800b57c:	4800      	ldr	r0, [pc, #0]	; (800b580 <USBD_CDC_GetHSCfgDesc+0x8>)
 800b57e:	4770      	bx	lr
 800b580:	200000d4 	.word	0x200000d4

0800b584 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b584:	2343      	movs	r3, #67	; 0x43
 800b586:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800b588:	4800      	ldr	r0, [pc, #0]	; (800b58c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800b58a:	4770      	bx	lr
 800b58c:	20000118 	.word	0x20000118

0800b590 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b590:	230a      	movs	r3, #10
 800b592:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800b594:	4800      	ldr	r0, [pc, #0]	; (800b598 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800b596:	4770      	bx	lr
 800b598:	2000015c 	.word	0x2000015c

0800b59c <USBD_CDC_DataOut>:
{
 800b59c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b59e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800b5a2:	b175      	cbz	r5, 800b5c2 <USBD_CDC_DataOut+0x26>
 800b5a4:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b5a6:	f7fb f9b7 	bl	8006918 <USBD_LL_GetRxDataSize>
 800b5aa:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b5ae:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800b5b8:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800b5bc:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800b5be:	2000      	movs	r0, #0
}
 800b5c0:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800b5c2:	2003      	movs	r0, #3
 800b5c4:	e7fc      	b.n	800b5c0 <USBD_CDC_DataOut+0x24>

0800b5c6 <USBD_CDC_DataIn>:
{
 800b5c6:	b510      	push	{r4, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b5c8:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 800b5cc:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800b5d0:	b353      	cbz	r3, 800b628 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b5d2:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800b5d6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b5da:	6992      	ldr	r2, [r2, #24]
 800b5dc:	b14a      	cbz	r2, 800b5f2 <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b5de:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 800b5e2:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 800b5e6:	6c64      	ldr	r4, [r4, #68]	; 0x44
 800b5e8:	fbb2 fcf4 	udiv	ip, r2, r4
 800b5ec:	fb04 221c 	mls	r2, r4, ip, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b5f0:	b172      	cbz	r2, 800b610 <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b5f8:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800b5fc:	6914      	ldr	r4, [r2, #16]
 800b5fe:	b1ac      	cbz	r4, 800b62c <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b600:	460a      	mov	r2, r1
 800b602:	f503 7104 	add.w	r1, r3, #528	; 0x210
 800b606:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800b60a:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 800b60c:	2000      	movs	r0, #0
}
 800b60e:	bd10      	pop	{r4, pc}
    pdev->ep_in[epnum].total_length = 0U;
 800b610:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800b614:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b618:	2400      	movs	r4, #0
 800b61a:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b61c:	4623      	mov	r3, r4
 800b61e:	4622      	mov	r2, r4
 800b620:	f7fb f96c 	bl	80068fc <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800b624:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b626:	e7f2      	b.n	800b60e <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 800b628:	2003      	movs	r0, #3
 800b62a:	e7f0      	b.n	800b60e <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 800b62c:	2000      	movs	r0, #0
 800b62e:	e7ee      	b.n	800b60e <USBD_CDC_DataIn+0x48>

0800b630 <USBD_CDC_Setup>:
{
 800b630:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b632:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b634:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800b638:	2300      	movs	r3, #0
 800b63a:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800b63e:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 800b642:	2e00      	cmp	r6, #0
 800b644:	d06c      	beq.n	800b720 <USBD_CDC_Setup+0xf0>
 800b646:	4607      	mov	r7, r0
 800b648:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b64a:	780b      	ldrb	r3, [r1, #0]
 800b64c:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 800b650:	d02a      	beq.n	800b6a8 <USBD_CDC_Setup+0x78>
 800b652:	2d20      	cmp	r5, #32
 800b654:	d15e      	bne.n	800b714 <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 800b656:	88ca      	ldrh	r2, [r1, #6]
 800b658:	b1f2      	cbz	r2, 800b698 <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 800b65a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b65e:	d00f      	beq.n	800b680 <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b660:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	4631      	mov	r1, r6
 800b668:	7860      	ldrb	r0, [r4, #1]
 800b66a:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b66c:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b66e:	2a07      	cmp	r2, #7
 800b670:	bf28      	it	cs
 800b672:	2207      	movcs	r2, #7
 800b674:	4631      	mov	r1, r6
 800b676:	4638      	mov	r0, r7
 800b678:	f000 fdfa 	bl	800c270 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800b67c:	2500      	movs	r5, #0
 800b67e:	e04c      	b.n	800b71a <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 800b680:	784b      	ldrb	r3, [r1, #1]
 800b682:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b686:	798b      	ldrb	r3, [r1, #6]
 800b688:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b68c:	88ca      	ldrh	r2, [r1, #6]
 800b68e:	4631      	mov	r1, r6
 800b690:	f000 fe03 	bl	800c29a <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800b694:	2500      	movs	r5, #0
 800b696:	e040      	b.n	800b71a <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b698:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	7848      	ldrb	r0, [r1, #1]
 800b6a2:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 800b6a4:	2500      	movs	r5, #0
 800b6a6:	e038      	b.n	800b71a <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 800b6a8:	784e      	ldrb	r6, [r1, #1]
 800b6aa:	2e0b      	cmp	r6, #11
 800b6ac:	d82e      	bhi.n	800b70c <USBD_CDC_Setup+0xdc>
 800b6ae:	e8df f006 	tbb	[pc, r6]
 800b6b2:	3406      	.short	0x3406
 800b6b4:	2d2d2d2d 	.word	0x2d2d2d2d
 800b6b8:	2d2d2d2d 	.word	0x2d2d2d2d
 800b6bc:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6be:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	2b03      	cmp	r3, #3
 800b6c6:	d003      	beq.n	800b6d0 <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 800b6c8:	f000 faa9 	bl	800bc1e <USBD_CtlError>
            ret = USBD_FAIL;
 800b6cc:	2503      	movs	r5, #3
 800b6ce:	e024      	b.n	800b71a <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b6d0:	2202      	movs	r2, #2
 800b6d2:	a901      	add	r1, sp, #4
 800b6d4:	f000 fdcc 	bl	800c270 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800b6d8:	4635      	mov	r5, r6
 800b6da:	e01e      	b.n	800b71a <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6dc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	2b03      	cmp	r3, #3
 800b6e4:	d003      	beq.n	800b6ee <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 800b6e6:	f000 fa9a 	bl	800bc1e <USBD_CtlError>
            ret = USBD_FAIL;
 800b6ea:	2503      	movs	r5, #3
 800b6ec:	e015      	b.n	800b71a <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	f10d 0107 	add.w	r1, sp, #7
 800b6f4:	f000 fdbc 	bl	800c270 <USBD_CtlSendData>
 800b6f8:	e00f      	b.n	800b71a <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b6fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	2b03      	cmp	r3, #3
 800b702:	d00a      	beq.n	800b71a <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 800b704:	f000 fa8b 	bl	800bc1e <USBD_CtlError>
            ret = USBD_FAIL;
 800b708:	2503      	movs	r5, #3
 800b70a:	e006      	b.n	800b71a <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 800b70c:	f000 fa87 	bl	800bc1e <USBD_CtlError>
          ret = USBD_FAIL;
 800b710:	2503      	movs	r5, #3
          break;
 800b712:	e002      	b.n	800b71a <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 800b714:	f000 fa83 	bl	800bc1e <USBD_CtlError>
      ret = USBD_FAIL;
 800b718:	2503      	movs	r5, #3
}
 800b71a:	4628      	mov	r0, r5
 800b71c:	b003      	add	sp, #12
 800b71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800b720:	2503      	movs	r5, #3
 800b722:	e7fa      	b.n	800b71a <USBD_CDC_Setup+0xea>

0800b724 <USBD_CDC_DeInit>:
{
 800b724:	b538      	push	{r3, r4, r5, lr}
 800b726:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b728:	2181      	movs	r1, #129	; 0x81
 800b72a:	f7fb f8b4 	bl	8006896 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b72e:	2500      	movs	r5, #0
 800b730:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b732:	2101      	movs	r1, #1
 800b734:	4620      	mov	r0, r4
 800b736:	f7fb f8ae 	bl	8006896 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b73a:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b73e:	2182      	movs	r1, #130	; 0x82
 800b740:	4620      	mov	r0, r4
 800b742:	f7fb f8a8 	bl	8006896 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b746:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b74a:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 800b74e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800b752:	b14b      	cbz	r3, 800b768 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b754:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b75c:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800b760:	f002 f872 	bl	800d848 <free>
    pdev->pClassData = NULL;
 800b764:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800b768:	2000      	movs	r0, #0
 800b76a:	bd38      	pop	{r3, r4, r5, pc}

0800b76c <USBD_CDC_Init>:
{
 800b76c:	b570      	push	{r4, r5, r6, lr}
 800b76e:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b770:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b774:	f002 f860 	bl	800d838 <malloc>
  if (hcdc == NULL)
 800b778:	b3b8      	cbz	r0, 800b7ea <USBD_CDC_Init+0x7e>
 800b77a:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 800b77c:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b780:	7c23      	ldrb	r3, [r4, #16]
 800b782:	bbbb      	cbnz	r3, 800b7f4 <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b784:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b788:	2202      	movs	r2, #2
 800b78a:	2181      	movs	r1, #129	; 0x81
 800b78c:	4620      	mov	r0, r4
 800b78e:	f7fb f878 	bl	8006882 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b792:	2501      	movs	r5, #1
 800b794:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b79a:	2202      	movs	r2, #2
 800b79c:	4629      	mov	r1, r5
 800b79e:	4620      	mov	r0, r4
 800b7a0:	f7fb f86f 	bl	8006882 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b7a4:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b7a8:	2310      	movs	r3, #16
 800b7aa:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b7ae:	2308      	movs	r3, #8
 800b7b0:	2203      	movs	r2, #3
 800b7b2:	2182      	movs	r1, #130	; 0x82
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	f7fb f864 	bl	8006882 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b7c0:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4798      	blx	r3
  hcdc->TxState = 0U;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 800b7ce:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7d2:	7c25      	ldrb	r5, [r4, #16]
 800b7d4:	bb15      	cbnz	r5, 800b81c <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b7d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7da:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800b7de:	2101      	movs	r1, #1
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	f7fb f892 	bl	800690a <USBD_LL_PrepareReceive>
}
 800b7e6:	4628      	mov	r0, r5
 800b7e8:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b7f0:	2502      	movs	r5, #2
 800b7f2:	e7f8      	b.n	800b7e6 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b7f4:	2340      	movs	r3, #64	; 0x40
 800b7f6:	2202      	movs	r2, #2
 800b7f8:	2181      	movs	r1, #129	; 0x81
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	f7fb f841 	bl	8006882 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b800:	2501      	movs	r5, #1
 800b802:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b804:	2340      	movs	r3, #64	; 0x40
 800b806:	2202      	movs	r2, #2
 800b808:	4629      	mov	r1, r5
 800b80a:	4620      	mov	r0, r4
 800b80c:	f7fb f839 	bl	8006882 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b810:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b814:	2310      	movs	r3, #16
 800b816:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800b81a:	e7c8      	b.n	800b7ae <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b81c:	2340      	movs	r3, #64	; 0x40
 800b81e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800b822:	2101      	movs	r1, #1
 800b824:	4620      	mov	r0, r4
 800b826:	f7fb f870 	bl	800690a <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800b82a:	2500      	movs	r5, #0
 800b82c:	e7db      	b.n	800b7e6 <USBD_CDC_Init+0x7a>

0800b82e <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800b82e:	b119      	cbz	r1, 800b838 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800b830:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b834:	2000      	movs	r0, #0
 800b836:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800b838:	2003      	movs	r0, #3
}
 800b83a:	4770      	bx	lr

0800b83c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b83c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800b840:	b12b      	cbz	r3, 800b84e <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 800b842:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b846:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b84a:	2000      	movs	r0, #0
 800b84c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800b84e:	2003      	movs	r0, #3
}
 800b850:	4770      	bx	lr

0800b852 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b852:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800b856:	b11b      	cbz	r3, 800b860 <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800b858:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b85c:	2000      	movs	r0, #0
 800b85e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800b860:	2003      	movs	r0, #3
}
 800b862:	4770      	bx	lr

0800b864 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b864:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800b868:	b1a2      	cbz	r2, 800b894 <USBD_CDC_TransmitPacket+0x30>
{
 800b86a:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800b86c:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 800b870:	b10b      	cbz	r3, 800b876 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b872:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800b874:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 800b876:	2301      	movs	r3, #1
 800b878:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b87c:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800b880:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b882:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800b886:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800b88a:	2181      	movs	r1, #129	; 0x81
 800b88c:	f7fb f836 	bl	80068fc <USBD_LL_Transmit>
    ret = USBD_OK;
 800b890:	2000      	movs	r0, #0
 800b892:	e7ef      	b.n	800b874 <USBD_CDC_TransmitPacket+0x10>
    return (uint8_t)USBD_FAIL;
 800b894:	2003      	movs	r0, #3
}
 800b896:	4770      	bx	lr

0800b898 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b898:	b198      	cbz	r0, 800b8c2 <USBD_Init+0x2a>
{
 800b89a:	b508      	push	{r3, lr}
 800b89c:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b89e:	2000      	movs	r0, #0
 800b8a0:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b8a4:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b8a8:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b8ac:	b109      	cbz	r1, 800b8b2 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 800b8ae:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8b2:	2101      	movs	r1, #1
 800b8b4:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 800b8b8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7fa ffac 	bl	8006818 <USBD_LL_Init>

  return ret;
}
 800b8c0:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800b8c2:	2003      	movs	r0, #3
}
 800b8c4:	4770      	bx	lr

0800b8c6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b8c6:	b510      	push	{r4, lr}
 800b8c8:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800b8d0:	b161      	cbz	r1, 800b8ec <USBD_RegisterClass+0x26>
 800b8d2:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b8d4:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b8d8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800b8da:	b14b      	cbz	r3, 800b8f0 <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b8dc:	f10d 0006 	add.w	r0, sp, #6
 800b8e0:	4798      	blx	r3
 800b8e2:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b8e6:	2000      	movs	r0, #0
}
 800b8e8:	b002      	add	sp, #8
 800b8ea:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800b8ec:	2003      	movs	r0, #3
 800b8ee:	e7fb      	b.n	800b8e8 <USBD_RegisterClass+0x22>
  return USBD_OK;
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	e7f9      	b.n	800b8e8 <USBD_RegisterClass+0x22>

0800b8f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b8f4:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b8f6:	f7fa ffbd 	bl	8006874 <USBD_LL_Start>
}
 800b8fa:	bd08      	pop	{r3, pc}

0800b8fc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8fc:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800b8fe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b902:	b113      	cbz	r3, 800b90a <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4798      	blx	r3
  }

  return ret;
}
 800b908:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b90a:	2003      	movs	r0, #3
 800b90c:	e7fc      	b.n	800b908 <USBD_SetClassConfig+0xc>

0800b90e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b90e:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b910:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b914:	b10b      	cbz	r3, 800b91a <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	4798      	blx	r3
  }

  return USBD_OK;
}
 800b91a:	2000      	movs	r0, #0
 800b91c:	bd08      	pop	{r3, pc}

0800b91e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b91e:	b538      	push	{r3, r4, r5, lr}
 800b920:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b922:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800b926:	4628      	mov	r0, r5
 800b928:	f000 f965 	bl	800bbf6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b92c:	2301      	movs	r3, #1
 800b92e:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b932:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800b936:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b93a:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 800b93e:	f001 031f 	and.w	r3, r1, #31
 800b942:	2b01      	cmp	r3, #1
 800b944:	d00d      	beq.n	800b962 <USBD_LL_SetupStage+0x44>
 800b946:	2b02      	cmp	r3, #2
 800b948:	d010      	beq.n	800b96c <USBD_LL_SetupStage+0x4e>
 800b94a:	b12b      	cbz	r3, 800b958 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b94c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800b950:	4620      	mov	r0, r4
 800b952:	f7fa ffa7 	bl	80068a4 <USBD_LL_StallEP>
      break;
 800b956:	e003      	b.n	800b960 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b958:	4629      	mov	r1, r5
 800b95a:	4620      	mov	r0, r4
 800b95c:	f000 fb09 	bl	800bf72 <USBD_StdDevReq>
  }

  return ret;
}
 800b960:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b962:	4629      	mov	r1, r5
 800b964:	4620      	mov	r0, r4
 800b966:	f000 fb3c 	bl	800bfe2 <USBD_StdItfReq>
      break;
 800b96a:	e7f9      	b.n	800b960 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b96c:	4629      	mov	r1, r5
 800b96e:	4620      	mov	r0, r4
 800b970:	f000 fb6b 	bl	800c04a <USBD_StdEPReq>
      break;
 800b974:	e7f4      	b.n	800b960 <USBD_LL_SetupStage+0x42>

0800b976 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b976:	b538      	push	{r3, r4, r5, lr}
 800b978:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b97a:	460d      	mov	r5, r1
 800b97c:	bb41      	cbnz	r1, 800b9d0 <USBD_LL_DataOutStage+0x5a>
 800b97e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b980:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800b984:	2a03      	cmp	r2, #3
 800b986:	d001      	beq.n	800b98c <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 800b988:	4608      	mov	r0, r1
}
 800b98a:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800b98c:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 800b990:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800b994:	4291      	cmp	r1, r2
 800b996:	d809      	bhi.n	800b9ac <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b998:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	2b03      	cmp	r3, #3
 800b9a0:	d00f      	beq.n	800b9c2 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	f000 fc90 	bl	800c2c8 <USBD_CtlSendStatus>
  return USBD_OK;
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	e7ee      	b.n	800b98a <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800b9ac:	1a89      	subs	r1, r1, r2
 800b9ae:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b9b2:	428a      	cmp	r2, r1
 800b9b4:	bf28      	it	cs
 800b9b6:	460a      	movcs	r2, r1
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	f000 fc7d 	bl	800c2b8 <USBD_CtlContinueRx>
  return USBD_OK;
 800b9be:	4628      	mov	r0, r5
 800b9c0:	e7e3      	b.n	800b98a <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 800b9c2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b9c6:	691b      	ldr	r3, [r3, #16]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d0ea      	beq.n	800b9a2 <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 800b9cc:	4798      	blx	r3
 800b9ce:	e7e8      	b.n	800b9a2 <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9d0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	2b03      	cmp	r3, #3
 800b9d8:	d001      	beq.n	800b9de <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 800b9da:	2000      	movs	r0, #0
 800b9dc:	e7d5      	b.n	800b98a <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 800b9de:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b9e2:	699b      	ldr	r3, [r3, #24]
 800b9e4:	b10b      	cbz	r3, 800b9ea <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b9e6:	4798      	blx	r3
        if (ret != USBD_OK)
 800b9e8:	e7cf      	b.n	800b98a <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 800b9ea:	2000      	movs	r0, #0
 800b9ec:	e7cd      	b.n	800b98a <USBD_LL_DataOutStage+0x14>

0800b9ee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b9ee:	b538      	push	{r3, r4, r5, lr}
 800b9f0:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b9f2:	460d      	mov	r5, r1
 800b9f4:	2900      	cmp	r1, #0
 800b9f6:	d14a      	bne.n	800ba8e <USBD_LL_DataInStage+0xa0>
 800b9f8:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b9fa:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800b9fe:	2a02      	cmp	r2, #2
 800ba00:	d005      	beq.n	800ba0e <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ba02:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d03c      	beq.n	800ba84 <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 800ba0a:	4628      	mov	r0, r5
}
 800ba0c:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800ba0e:	69c2      	ldr	r2, [r0, #28]
 800ba10:	6a01      	ldr	r1, [r0, #32]
 800ba12:	428a      	cmp	r2, r1
 800ba14:	d80e      	bhi.n	800ba34 <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 800ba16:	428a      	cmp	r2, r1
 800ba18:	d018      	beq.n	800ba4c <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba1a:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	2b03      	cmp	r3, #3
 800ba22:	d027      	beq.n	800ba74 <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba24:	2180      	movs	r1, #128	; 0x80
 800ba26:	4620      	mov	r0, r4
 800ba28:	f7fa ff3c 	bl	80068a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f000 fc56 	bl	800c2de <USBD_CtlReceiveStatus>
 800ba32:	e7e6      	b.n	800ba02 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800ba34:	1a52      	subs	r2, r2, r1
 800ba36:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ba38:	4619      	mov	r1, r3
 800ba3a:	f000 fc26 	bl	800c28a <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba3e:	2300      	movs	r3, #0
 800ba40:	461a      	mov	r2, r3
 800ba42:	4619      	mov	r1, r3
 800ba44:	4620      	mov	r0, r4
 800ba46:	f7fa ff60 	bl	800690a <USBD_LL_PrepareReceive>
 800ba4a:	e7da      	b.n	800ba02 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800ba4c:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800ba4e:	4299      	cmp	r1, r3
 800ba50:	d8e3      	bhi.n	800ba1a <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 800ba52:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d2df      	bcs.n	800ba1a <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	4611      	mov	r1, r2
 800ba5e:	f000 fc14 	bl	800c28a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ba62:	2100      	movs	r1, #0
 800ba64:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba68:	460b      	mov	r3, r1
 800ba6a:	460a      	mov	r2, r1
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	f7fa ff4c 	bl	800690a <USBD_LL_PrepareReceive>
 800ba72:	e7c6      	b.n	800ba02 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 800ba74:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800ba78:	68db      	ldr	r3, [r3, #12]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d0d2      	beq.n	800ba24 <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 800ba7e:	4620      	mov	r0, r4
 800ba80:	4798      	blx	r3
 800ba82:	e7cf      	b.n	800ba24 <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 800ba84:	2300      	movs	r3, #0
 800ba86:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 800ba8a:	4628      	mov	r0, r5
 800ba8c:	e7be      	b.n	800ba0c <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba8e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	2b03      	cmp	r3, #3
 800ba96:	d001      	beq.n	800ba9c <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 800ba98:	2000      	movs	r0, #0
 800ba9a:	e7b7      	b.n	800ba0c <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 800ba9c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800baa0:	695b      	ldr	r3, [r3, #20]
 800baa2:	b10b      	cbz	r3, 800baa8 <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800baa4:	4798      	blx	r3
        if (ret != USBD_OK)
 800baa6:	e7b1      	b.n	800ba0c <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 800baa8:	2000      	movs	r0, #0
 800baaa:	e7af      	b.n	800ba0c <USBD_LL_DataInStage+0x1e>

0800baac <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800baac:	2301      	movs	r3, #1
 800baae:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bab2:	2300      	movs	r3, #0
 800bab4:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800bab8:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800baba:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800babe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800bac2:	b1f3      	cbz	r3, 800bb02 <USBD_LL_Reset+0x56>
{
 800bac4:	b570      	push	{r4, r5, r6, lr}
 800bac6:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800bac8:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800bacc:	b11a      	cbz	r2, 800bad6 <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	b10b      	cbz	r3, 800bad6 <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bad2:	2100      	movs	r1, #0
 800bad4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bad6:	2340      	movs	r3, #64	; 0x40
 800bad8:	2200      	movs	r2, #0
 800bada:	4611      	mov	r1, r2
 800badc:	4620      	mov	r0, r4
 800bade:	f7fa fed0 	bl	8006882 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bae2:	2601      	movs	r6, #1
 800bae4:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bae8:	2540      	movs	r5, #64	; 0x40
 800baea:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800baee:	462b      	mov	r3, r5
 800baf0:	2200      	movs	r2, #0
 800baf2:	2180      	movs	r1, #128	; 0x80
 800baf4:	4620      	mov	r0, r4
 800baf6:	f7fa fec4 	bl	8006882 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bafa:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bafc:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 800bafe:	2000      	movs	r0, #0
}
 800bb00:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800bb02:	2003      	movs	r0, #3
}
 800bb04:	4770      	bx	lr

0800bb06 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800bb06:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800bb08:	2000      	movs	r0, #0
 800bb0a:	4770      	bx	lr

0800bb0c <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800bb0c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bb16:	2304      	movs	r3, #4
 800bb18:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	4770      	bx	lr

0800bb20 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb20:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	2b04      	cmp	r3, #4
 800bb28:	d001      	beq.n	800bb2e <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800bb2a:	2000      	movs	r0, #0
 800bb2c:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800bb2e:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800bb38:	e7f7      	b.n	800bb2a <USBD_LL_Resume+0xa>

0800bb3a <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800bb3a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800bb3e:	b162      	cbz	r2, 800bb5a <USBD_LL_SOF+0x20>
{
 800bb40:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb42:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	2b03      	cmp	r3, #3
 800bb4a:	d001      	beq.n	800bb50 <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800bb4c:	2000      	movs	r0, #0
}
 800bb4e:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800bb50:	69d3      	ldr	r3, [r2, #28]
 800bb52:	b123      	cbz	r3, 800bb5e <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 800bb54:	4798      	blx	r3
  return USBD_OK;
 800bb56:	2000      	movs	r0, #0
 800bb58:	e7f9      	b.n	800bb4e <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 800bb5a:	2003      	movs	r0, #3
}
 800bb5c:	4770      	bx	lr
  return USBD_OK;
 800bb5e:	2000      	movs	r0, #0
 800bb60:	e7f5      	b.n	800bb4e <USBD_LL_SOF+0x14>

0800bb62 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800bb62:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800bb66:	b162      	cbz	r2, 800bb82 <USBD_LL_IsoINIncomplete+0x20>
{
 800bb68:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb6a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	2b03      	cmp	r3, #3
 800bb72:	d001      	beq.n	800bb78 <USBD_LL_IsoINIncomplete+0x16>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800bb74:	2000      	movs	r0, #0
}
 800bb76:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 800bb78:	6a13      	ldr	r3, [r2, #32]
 800bb7a:	b123      	cbz	r3, 800bb86 <USBD_LL_IsoINIncomplete+0x24>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800bb7c:	4798      	blx	r3
  return USBD_OK;
 800bb7e:	2000      	movs	r0, #0
 800bb80:	e7f9      	b.n	800bb76 <USBD_LL_IsoINIncomplete+0x14>
    return USBD_FAIL;
 800bb82:	2003      	movs	r0, #3
}
 800bb84:	4770      	bx	lr
  return USBD_OK;
 800bb86:	2000      	movs	r0, #0
 800bb88:	e7f5      	b.n	800bb76 <USBD_LL_IsoINIncomplete+0x14>

0800bb8a <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800bb8a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800bb8e:	b162      	cbz	r2, 800bbaa <USBD_LL_IsoOUTIncomplete+0x20>
{
 800bb90:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb92:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	2b03      	cmp	r3, #3
 800bb9a:	d001      	beq.n	800bba0 <USBD_LL_IsoOUTIncomplete+0x16>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800bb9c:	2000      	movs	r0, #0
}
 800bb9e:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800bba0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800bba2:	b123      	cbz	r3, 800bbae <USBD_LL_IsoOUTIncomplete+0x24>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800bba4:	4798      	blx	r3
  return USBD_OK;
 800bba6:	2000      	movs	r0, #0
 800bba8:	e7f9      	b.n	800bb9e <USBD_LL_IsoOUTIncomplete+0x14>
    return USBD_FAIL;
 800bbaa:	2003      	movs	r0, #3
}
 800bbac:	4770      	bx	lr
  return USBD_OK;
 800bbae:	2000      	movs	r0, #0
 800bbb0:	e7f5      	b.n	800bb9e <USBD_LL_IsoOUTIncomplete+0x14>

0800bbb2 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	4770      	bx	lr

0800bbb6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bbb6:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800bbbe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800bbc2:	b113      	cbz	r3, 800bbca <USBD_LL_DevDisconnected+0x14>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	7901      	ldrb	r1, [r0, #4]
 800bbc8:	4798      	blx	r3
  }

  return USBD_OK;
}
 800bbca:	2000      	movs	r0, #0
 800bbcc:	bd08      	pop	{r3, pc}

0800bbce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bbce:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 800bbd0:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800bbd2:	e002      	b.n	800bbda <USBD_GetLen+0xc>
  {
    len++;
 800bbd4:	3001      	adds	r0, #1
 800bbd6:	b2c0      	uxtb	r0, r0
    pbuff++;
 800bbd8:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800bbda:	781a      	ldrb	r2, [r3, #0]
 800bbdc:	2a00      	cmp	r2, #0
 800bbde:	d1f9      	bne.n	800bbd4 <USBD_GetLen+0x6>
  }

  return len;
}
 800bbe0:	4770      	bx	lr

0800bbe2 <USBD_SetFeature>:
{
 800bbe2:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bbe4:	884b      	ldrh	r3, [r1, #2]
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d000      	beq.n	800bbec <USBD_SetFeature+0xa>
}
 800bbea:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800bbec:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bbf0:	f000 fb6a 	bl	800c2c8 <USBD_CtlSendStatus>
}
 800bbf4:	e7f9      	b.n	800bbea <USBD_SetFeature+0x8>

0800bbf6 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800bbf6:	780b      	ldrb	r3, [r1, #0]
 800bbf8:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800bbfa:	784b      	ldrb	r3, [r1, #1]
 800bbfc:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800bbfe:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800bc00:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bc02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800bc06:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800bc08:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800bc0a:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bc0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800bc10:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800bc12:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800bc14:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bc16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800bc1a:	80c3      	strh	r3, [r0, #6]
}
 800bc1c:	4770      	bx	lr

0800bc1e <USBD_CtlError>:
{
 800bc1e:	b510      	push	{r4, lr}
 800bc20:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc22:	2180      	movs	r1, #128	; 0x80
 800bc24:	f7fa fe3e 	bl	80068a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bc28:	2100      	movs	r1, #0
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	f7fa fe3a 	bl	80068a4 <USBD_LL_StallEP>
}
 800bc30:	bd10      	pop	{r4, pc}

0800bc32 <USBD_GetDescriptor>:
{
 800bc32:	b530      	push	{r4, r5, lr}
 800bc34:	b083      	sub	sp, #12
 800bc36:	4604      	mov	r4, r0
 800bc38:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800bc40:	884a      	ldrh	r2, [r1, #2]
 800bc42:	0a13      	lsrs	r3, r2, #8
 800bc44:	3b01      	subs	r3, #1
 800bc46:	2b06      	cmp	r3, #6
 800bc48:	f200 80ab 	bhi.w	800bda2 <USBD_GetDescriptor+0x170>
 800bc4c:	e8df f003 	tbb	[pc, r3]
 800bc50:	a9331f04 	.word	0xa9331f04
 800bc54:	8da9      	.short	0x8da9
 800bc56:	9a          	.byte	0x9a
 800bc57:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bc58:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f10d 0106 	add.w	r1, sp, #6
 800bc62:	7c00      	ldrb	r0, [r0, #16]
 800bc64:	4798      	blx	r3
  if (req->wLength != 0U)
 800bc66:	88ea      	ldrh	r2, [r5, #6]
 800bc68:	2a00      	cmp	r2, #0
 800bc6a:	f000 80a3 	beq.w	800bdb4 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 800bc6e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	f000 8099 	beq.w	800bdaa <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	bf28      	it	cs
 800bc7c:	461a      	movcs	r2, r3
 800bc7e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bc82:	4601      	mov	r1, r0
 800bc84:	4620      	mov	r0, r4
 800bc86:	f000 faf3 	bl	800c270 <USBD_CtlSendData>
}
 800bc8a:	b003      	add	sp, #12
 800bc8c:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc8e:	7c03      	ldrb	r3, [r0, #16]
 800bc90:	b943      	cbnz	r3, 800bca4 <USBD_GetDescriptor+0x72>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bc92:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800bc96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc98:	f10d 0006 	add.w	r0, sp, #6
 800bc9c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc9e:	2302      	movs	r3, #2
 800bca0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800bca2:	e7e0      	b.n	800bc66 <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bca4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800bca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcaa:	f10d 0006 	add.w	r0, sp, #6
 800bcae:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bcb0:	2302      	movs	r3, #2
 800bcb2:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800bcb4:	e7d7      	b.n	800bc66 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 800bcb6:	b2d2      	uxtb	r2, r2
 800bcb8:	2a05      	cmp	r2, #5
 800bcba:	d852      	bhi.n	800bd62 <USBD_GetDescriptor+0x130>
 800bcbc:	e8df f002 	tbb	[pc, r2]
 800bcc0:	2a1d1003 	.word	0x2a1d1003
 800bcc4:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bcc6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	b123      	cbz	r3, 800bcd8 <USBD_GetDescriptor+0xa6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bcce:	f10d 0106 	add.w	r1, sp, #6
 800bcd2:	7c00      	ldrb	r0, [r0, #16]
 800bcd4:	4798      	blx	r3
  if (err != 0U)
 800bcd6:	e7c6      	b.n	800bc66 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800bcd8:	4629      	mov	r1, r5
 800bcda:	f7ff ffa0 	bl	800bc1e <USBD_CtlError>
  if (err != 0U)
 800bcde:	e7d4      	b.n	800bc8a <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bce0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	b123      	cbz	r3, 800bcf2 <USBD_GetDescriptor+0xc0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bce8:	f10d 0106 	add.w	r1, sp, #6
 800bcec:	7c00      	ldrb	r0, [r0, #16]
 800bcee:	4798      	blx	r3
  if (err != 0U)
 800bcf0:	e7b9      	b.n	800bc66 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800bcf2:	4629      	mov	r1, r5
 800bcf4:	f7ff ff93 	bl	800bc1e <USBD_CtlError>
  if (err != 0U)
 800bcf8:	e7c7      	b.n	800bc8a <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bcfa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	b123      	cbz	r3, 800bd0c <USBD_GetDescriptor+0xda>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bd02:	f10d 0106 	add.w	r1, sp, #6
 800bd06:	7c00      	ldrb	r0, [r0, #16]
 800bd08:	4798      	blx	r3
  if (err != 0U)
 800bd0a:	e7ac      	b.n	800bc66 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	f7ff ff86 	bl	800bc1e <USBD_CtlError>
  if (err != 0U)
 800bd12:	e7ba      	b.n	800bc8a <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bd14:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800bd18:	691b      	ldr	r3, [r3, #16]
 800bd1a:	b123      	cbz	r3, 800bd26 <USBD_GetDescriptor+0xf4>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bd1c:	f10d 0106 	add.w	r1, sp, #6
 800bd20:	7c00      	ldrb	r0, [r0, #16]
 800bd22:	4798      	blx	r3
  if (err != 0U)
 800bd24:	e79f      	b.n	800bc66 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800bd26:	4629      	mov	r1, r5
 800bd28:	f7ff ff79 	bl	800bc1e <USBD_CtlError>
  if (err != 0U)
 800bd2c:	e7ad      	b.n	800bc8a <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bd2e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800bd32:	695b      	ldr	r3, [r3, #20]
 800bd34:	b123      	cbz	r3, 800bd40 <USBD_GetDescriptor+0x10e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bd36:	f10d 0106 	add.w	r1, sp, #6
 800bd3a:	7c00      	ldrb	r0, [r0, #16]
 800bd3c:	4798      	blx	r3
  if (err != 0U)
 800bd3e:	e792      	b.n	800bc66 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800bd40:	4629      	mov	r1, r5
 800bd42:	f7ff ff6c 	bl	800bc1e <USBD_CtlError>
  if (err != 0U)
 800bd46:	e7a0      	b.n	800bc8a <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bd48:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800bd4c:	699b      	ldr	r3, [r3, #24]
 800bd4e:	b123      	cbz	r3, 800bd5a <USBD_GetDescriptor+0x128>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bd50:	f10d 0106 	add.w	r1, sp, #6
 800bd54:	7c00      	ldrb	r0, [r0, #16]
 800bd56:	4798      	blx	r3
  if (err != 0U)
 800bd58:	e785      	b.n	800bc66 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800bd5a:	4629      	mov	r1, r5
 800bd5c:	f7ff ff5f 	bl	800bc1e <USBD_CtlError>
  if (err != 0U)
 800bd60:	e793      	b.n	800bc8a <USBD_GetDescriptor+0x58>
          USBD_CtlError(pdev, req);
 800bd62:	4629      	mov	r1, r5
 800bd64:	f7ff ff5b 	bl	800bc1e <USBD_CtlError>
  if (err != 0U)
 800bd68:	e78f      	b.n	800bc8a <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd6a:	7c03      	ldrb	r3, [r0, #16]
 800bd6c:	b933      	cbnz	r3, 800bd7c <USBD_GetDescriptor+0x14a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bd6e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800bd72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd74:	f10d 0006 	add.w	r0, sp, #6
 800bd78:	4798      	blx	r3
  if (err != 0U)
 800bd7a:	e774      	b.n	800bc66 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800bd7c:	4629      	mov	r1, r5
 800bd7e:	f7ff ff4e 	bl	800bc1e <USBD_CtlError>
  if (err != 0U)
 800bd82:	e782      	b.n	800bc8a <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd84:	7c03      	ldrb	r3, [r0, #16]
 800bd86:	b943      	cbnz	r3, 800bd9a <USBD_GetDescriptor+0x168>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bd88:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800bd8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd8e:	f10d 0006 	add.w	r0, sp, #6
 800bd92:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bd94:	2307      	movs	r3, #7
 800bd96:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800bd98:	e765      	b.n	800bc66 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800bd9a:	4629      	mov	r1, r5
 800bd9c:	f7ff ff3f 	bl	800bc1e <USBD_CtlError>
  if (err != 0U)
 800bda0:	e773      	b.n	800bc8a <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 800bda2:	4629      	mov	r1, r5
 800bda4:	f7ff ff3b 	bl	800bc1e <USBD_CtlError>
    return;
 800bda8:	e76f      	b.n	800bc8a <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 800bdaa:	4629      	mov	r1, r5
 800bdac:	4620      	mov	r0, r4
 800bdae:	f7ff ff36 	bl	800bc1e <USBD_CtlError>
 800bdb2:	e76a      	b.n	800bc8a <USBD_GetDescriptor+0x58>
    (void)USBD_CtlSendStatus(pdev);
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	f000 fa87 	bl	800c2c8 <USBD_CtlSendStatus>
 800bdba:	e766      	b.n	800bc8a <USBD_GetDescriptor+0x58>

0800bdbc <USBD_SetAddress>:
{
 800bdbc:	b538      	push	{r3, r4, r5, lr}
 800bdbe:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bdc0:	888b      	ldrh	r3, [r1, #4]
 800bdc2:	b9fb      	cbnz	r3, 800be04 <USBD_SetAddress+0x48>
 800bdc4:	88cb      	ldrh	r3, [r1, #6]
 800bdc6:	b9eb      	cbnz	r3, 800be04 <USBD_SetAddress+0x48>
 800bdc8:	884b      	ldrh	r3, [r1, #2]
 800bdca:	2b7f      	cmp	r3, #127	; 0x7f
 800bdcc:	d81a      	bhi.n	800be04 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bdce:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdd2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	2b03      	cmp	r3, #3
 800bdda:	d00c      	beq.n	800bdf6 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 800bddc:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bde0:	4629      	mov	r1, r5
 800bde2:	f7fa fd84 	bl	80068ee <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bde6:	4620      	mov	r0, r4
 800bde8:	f000 fa6e 	bl	800c2c8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800bdec:	b135      	cbz	r5, 800bdfc <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bdee:	2302      	movs	r3, #2
 800bdf0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800bdf4:	e009      	b.n	800be0a <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 800bdf6:	f7ff ff12 	bl	800bc1e <USBD_CtlError>
 800bdfa:	e006      	b.n	800be0a <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800be02:	e002      	b.n	800be0a <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 800be04:	4620      	mov	r0, r4
 800be06:	f7ff ff0a 	bl	800bc1e <USBD_CtlError>
}
 800be0a:	bd38      	pop	{r3, r4, r5, pc}

0800be0c <USBD_SetConfig>:
{
 800be0c:	b570      	push	{r4, r5, r6, lr}
 800be0e:	4604      	mov	r4, r0
 800be10:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800be12:	788d      	ldrb	r5, [r1, #2]
 800be14:	4b2e      	ldr	r3, [pc, #184]	; (800bed0 <USBD_SetConfig+0xc4>)
 800be16:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be18:	2d01      	cmp	r5, #1
 800be1a:	d810      	bhi.n	800be3e <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 800be1c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800be20:	b2db      	uxtb	r3, r3
 800be22:	2b02      	cmp	r3, #2
 800be24:	d00f      	beq.n	800be46 <USBD_SetConfig+0x3a>
 800be26:	2b03      	cmp	r3, #3
 800be28:	d023      	beq.n	800be72 <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 800be2a:	f7ff fef8 	bl	800bc1e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800be2e:	4b28      	ldr	r3, [pc, #160]	; (800bed0 <USBD_SetConfig+0xc4>)
 800be30:	7819      	ldrb	r1, [r3, #0]
 800be32:	4620      	mov	r0, r4
 800be34:	f7ff fd6b 	bl	800b90e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800be38:	2503      	movs	r5, #3
}
 800be3a:	4628      	mov	r0, r5
 800be3c:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800be3e:	f7ff feee 	bl	800bc1e <USBD_CtlError>
    return USBD_FAIL;
 800be42:	2503      	movs	r5, #3
 800be44:	e7f9      	b.n	800be3a <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800be46:	b18d      	cbz	r5, 800be6c <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 800be48:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800be4a:	4629      	mov	r1, r5
 800be4c:	f7ff fd56 	bl	800b8fc <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800be50:	4605      	mov	r5, r0
 800be52:	b120      	cbz	r0, 800be5e <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 800be54:	4631      	mov	r1, r6
 800be56:	4620      	mov	r0, r4
 800be58:	f7ff fee1 	bl	800bc1e <USBD_CtlError>
 800be5c:	e7ed      	b.n	800be3a <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800be5e:	4620      	mov	r0, r4
 800be60:	f000 fa32 	bl	800c2c8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800be64:	2303      	movs	r3, #3
 800be66:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800be6a:	e7e6      	b.n	800be3a <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800be6c:	f000 fa2c 	bl	800c2c8 <USBD_CtlSendStatus>
 800be70:	e7e3      	b.n	800be3a <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 800be72:	b1cd      	cbz	r5, 800bea8 <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 800be74:	6841      	ldr	r1, [r0, #4]
 800be76:	428d      	cmp	r5, r1
 800be78:	d025      	beq.n	800bec6 <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800be7a:	b2c9      	uxtb	r1, r1
 800be7c:	f7ff fd47 	bl	800b90e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800be80:	4b13      	ldr	r3, [pc, #76]	; (800bed0 <USBD_SetConfig+0xc4>)
 800be82:	7819      	ldrb	r1, [r3, #0]
 800be84:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800be86:	4620      	mov	r0, r4
 800be88:	f7ff fd38 	bl	800b8fc <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800be8c:	4605      	mov	r5, r0
 800be8e:	b1b0      	cbz	r0, 800bebe <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 800be90:	4631      	mov	r1, r6
 800be92:	4620      	mov	r0, r4
 800be94:	f7ff fec3 	bl	800bc1e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800be98:	7921      	ldrb	r1, [r4, #4]
 800be9a:	4620      	mov	r0, r4
 800be9c:	f7ff fd37 	bl	800b90e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bea0:	2302      	movs	r3, #2
 800bea2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800bea6:	e7c8      	b.n	800be3a <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bea8:	2302      	movs	r3, #2
 800beaa:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800beae:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800beb0:	4629      	mov	r1, r5
 800beb2:	f7ff fd2c 	bl	800b90e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800beb6:	4620      	mov	r0, r4
 800beb8:	f000 fa06 	bl	800c2c8 <USBD_CtlSendStatus>
 800bebc:	e7bd      	b.n	800be3a <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800bebe:	4620      	mov	r0, r4
 800bec0:	f000 fa02 	bl	800c2c8 <USBD_CtlSendStatus>
 800bec4:	e7b9      	b.n	800be3a <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800bec6:	f000 f9ff 	bl	800c2c8 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800beca:	2500      	movs	r5, #0
 800becc:	e7b5      	b.n	800be3a <USBD_SetConfig+0x2e>
 800bece:	bf00      	nop
 800bed0:	20002940 	.word	0x20002940

0800bed4 <USBD_GetConfig>:
{
 800bed4:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800bed6:	88cb      	ldrh	r3, [r1, #6]
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d10b      	bne.n	800bef4 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 800bedc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	2b02      	cmp	r3, #2
 800bee4:	d909      	bls.n	800befa <USBD_GetConfig+0x26>
 800bee6:	2b03      	cmp	r3, #3
 800bee8:	d109      	bne.n	800befe <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800beea:	2201      	movs	r2, #1
 800beec:	1d01      	adds	r1, r0, #4
 800beee:	f000 f9bf 	bl	800c270 <USBD_CtlSendData>
        break;
 800bef2:	e001      	b.n	800bef8 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800bef4:	f7ff fe93 	bl	800bc1e <USBD_CtlError>
}
 800bef8:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800befa:	b25b      	sxtb	r3, r3
 800befc:	b913      	cbnz	r3, 800bf04 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 800befe:	f7ff fe8e 	bl	800bc1e <USBD_CtlError>
}
 800bf02:	e7f9      	b.n	800bef8 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 800bf04:	4601      	mov	r1, r0
 800bf06:	2300      	movs	r3, #0
 800bf08:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	f000 f9af 	bl	800c270 <USBD_CtlSendData>
        break;
 800bf12:	e7f1      	b.n	800bef8 <USBD_GetConfig+0x24>

0800bf14 <USBD_GetStatus>:
{
 800bf14:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800bf16:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800bf1a:	3b01      	subs	r3, #1
 800bf1c:	2b02      	cmp	r3, #2
 800bf1e:	d812      	bhi.n	800bf46 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 800bf20:	88cb      	ldrh	r3, [r1, #6]
 800bf22:	2b02      	cmp	r3, #2
 800bf24:	d10c      	bne.n	800bf40 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bf26:	2301      	movs	r3, #1
 800bf28:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800bf2a:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800bf2e:	b10b      	cbz	r3, 800bf34 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bf30:	2303      	movs	r3, #3
 800bf32:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bf34:	2202      	movs	r2, #2
 800bf36:	f100 010c 	add.w	r1, r0, #12
 800bf3a:	f000 f999 	bl	800c270 <USBD_CtlSendData>
}
 800bf3e:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 800bf40:	f7ff fe6d 	bl	800bc1e <USBD_CtlError>
        break;
 800bf44:	e7fb      	b.n	800bf3e <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800bf46:	f7ff fe6a 	bl	800bc1e <USBD_CtlError>
}
 800bf4a:	e7f8      	b.n	800bf3e <USBD_GetStatus+0x2a>

0800bf4c <USBD_ClrFeature>:
{
 800bf4c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800bf4e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800bf52:	3b01      	subs	r3, #1
 800bf54:	2b02      	cmp	r3, #2
 800bf56:	d809      	bhi.n	800bf6c <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bf58:	884b      	ldrh	r3, [r1, #2]
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d000      	beq.n	800bf60 <USBD_ClrFeature+0x14>
}
 800bf5e:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800bf60:	2300      	movs	r3, #0
 800bf62:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bf66:	f000 f9af 	bl	800c2c8 <USBD_CtlSendStatus>
 800bf6a:	e7f8      	b.n	800bf5e <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800bf6c:	f7ff fe57 	bl	800bc1e <USBD_CtlError>
}
 800bf70:	e7f5      	b.n	800bf5e <USBD_ClrFeature+0x12>

0800bf72 <USBD_StdDevReq>:
{
 800bf72:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf74:	780c      	ldrb	r4, [r1, #0]
 800bf76:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800bf7a:	2c20      	cmp	r4, #32
 800bf7c:	d006      	beq.n	800bf8c <USBD_StdDevReq+0x1a>
 800bf7e:	2c40      	cmp	r4, #64	; 0x40
 800bf80:	d004      	beq.n	800bf8c <USBD_StdDevReq+0x1a>
 800bf82:	b154      	cbz	r4, 800bf9a <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 800bf84:	f7ff fe4b 	bl	800bc1e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800bf88:	2400      	movs	r4, #0
      break;
 800bf8a:	e004      	b.n	800bf96 <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf8c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800bf90:	689b      	ldr	r3, [r3, #8]
 800bf92:	4798      	blx	r3
 800bf94:	4604      	mov	r4, r0
}
 800bf96:	4620      	mov	r0, r4
 800bf98:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800bf9a:	784d      	ldrb	r5, [r1, #1]
 800bf9c:	2d09      	cmp	r5, #9
 800bf9e:	d81d      	bhi.n	800bfdc <USBD_StdDevReq+0x6a>
 800bfa0:	e8df f005 	tbb	[pc, r5]
 800bfa4:	161c1912 	.word	0x161c1912
 800bfa8:	1c05081c 	.word	0x1c05081c
 800bfac:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800bfae:	f7ff fe40 	bl	800bc32 <USBD_GetDescriptor>
          break;
 800bfb2:	e7f0      	b.n	800bf96 <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 800bfb4:	f7ff ff02 	bl	800bdbc <USBD_SetAddress>
          break;
 800bfb8:	e7ed      	b.n	800bf96 <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 800bfba:	f7ff ff27 	bl	800be0c <USBD_SetConfig>
 800bfbe:	4604      	mov	r4, r0
          break;
 800bfc0:	e7e9      	b.n	800bf96 <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 800bfc2:	f7ff ff87 	bl	800bed4 <USBD_GetConfig>
          break;
 800bfc6:	e7e6      	b.n	800bf96 <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 800bfc8:	f7ff ffa4 	bl	800bf14 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800bfcc:	462c      	mov	r4, r5
          break;
 800bfce:	e7e2      	b.n	800bf96 <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 800bfd0:	f7ff fe07 	bl	800bbe2 <USBD_SetFeature>
          break;
 800bfd4:	e7df      	b.n	800bf96 <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 800bfd6:	f7ff ffb9 	bl	800bf4c <USBD_ClrFeature>
          break;
 800bfda:	e7dc      	b.n	800bf96 <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 800bfdc:	f7ff fe1f 	bl	800bc1e <USBD_CtlError>
          break;
 800bfe0:	e7d9      	b.n	800bf96 <USBD_StdDevReq+0x24>

0800bfe2 <USBD_StdItfReq>:
{
 800bfe2:	b570      	push	{r4, r5, r6, lr}
 800bfe4:	4605      	mov	r5, r0
 800bfe6:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfe8:	780b      	ldrb	r3, [r1, #0]
 800bfea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfee:	2b20      	cmp	r3, #32
 800bff0:	d007      	beq.n	800c002 <USBD_StdItfReq+0x20>
 800bff2:	2b40      	cmp	r3, #64	; 0x40
 800bff4:	d005      	beq.n	800c002 <USBD_StdItfReq+0x20>
 800bff6:	b123      	cbz	r3, 800c002 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800bff8:	f7ff fe11 	bl	800bc1e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800bffc:	2600      	movs	r6, #0
}
 800bffe:	4630      	mov	r0, r6
 800c000:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800c002:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800c006:	3b01      	subs	r3, #1
 800c008:	2b02      	cmp	r3, #2
 800c00a:	d818      	bhi.n	800c03e <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c00c:	7923      	ldrb	r3, [r4, #4]
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d80f      	bhi.n	800c032 <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c012:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	4621      	mov	r1, r4
 800c01a:	4628      	mov	r0, r5
 800c01c:	4798      	blx	r3
 800c01e:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c020:	88e3      	ldrh	r3, [r4, #6]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d1eb      	bne.n	800bffe <USBD_StdItfReq+0x1c>
 800c026:	2800      	cmp	r0, #0
 800c028:	d1e9      	bne.n	800bffe <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800c02a:	4628      	mov	r0, r5
 800c02c:	f000 f94c 	bl	800c2c8 <USBD_CtlSendStatus>
 800c030:	e7e5      	b.n	800bffe <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 800c032:	4621      	mov	r1, r4
 800c034:	4628      	mov	r0, r5
 800c036:	f7ff fdf2 	bl	800bc1e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c03a:	2600      	movs	r6, #0
 800c03c:	e7df      	b.n	800bffe <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 800c03e:	4621      	mov	r1, r4
 800c040:	4628      	mov	r0, r5
 800c042:	f7ff fdec 	bl	800bc1e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c046:	2600      	movs	r6, #0
          break;
 800c048:	e7d9      	b.n	800bffe <USBD_StdItfReq+0x1c>

0800c04a <USBD_StdEPReq>:
{
 800c04a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c04c:	4606      	mov	r6, r0
 800c04e:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800c050:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c052:	780c      	ldrb	r4, [r1, #0]
 800c054:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800c058:	2c20      	cmp	r4, #32
 800c05a:	d008      	beq.n	800c06e <USBD_StdEPReq+0x24>
 800c05c:	b2d9      	uxtb	r1, r3
 800c05e:	2c40      	cmp	r4, #64	; 0x40
 800c060:	d005      	beq.n	800c06e <USBD_StdEPReq+0x24>
 800c062:	b16c      	cbz	r4, 800c080 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 800c064:	4629      	mov	r1, r5
 800c066:	f7ff fdda 	bl	800bc1e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c06a:	2400      	movs	r4, #0
      break;
 800c06c:	e006      	b.n	800c07c <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c06e:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800c072:	689b      	ldr	r3, [r3, #8]
 800c074:	4629      	mov	r1, r5
 800c076:	4630      	mov	r0, r6
 800c078:	4798      	blx	r3
 800c07a:	4604      	mov	r4, r0
}
 800c07c:	4620      	mov	r0, r4
 800c07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 800c080:	786f      	ldrb	r7, [r5, #1]
 800c082:	2f01      	cmp	r7, #1
 800c084:	d02f      	beq.n	800c0e6 <USBD_StdEPReq+0x9c>
 800c086:	2f03      	cmp	r7, #3
 800c088:	d005      	beq.n	800c096 <USBD_StdEPReq+0x4c>
 800c08a:	2f00      	cmp	r7, #0
 800c08c:	d059      	beq.n	800c142 <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 800c08e:	4629      	mov	r1, r5
 800c090:	f7ff fdc5 	bl	800bc1e <USBD_CtlError>
          break;
 800c094:	e7f2      	b.n	800c07c <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 800c096:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	d005      	beq.n	800c0ac <USBD_StdEPReq+0x62>
 800c0a0:	2b03      	cmp	r3, #3
 800c0a2:	d012      	beq.n	800c0ca <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 800c0a4:	4629      	mov	r1, r5
 800c0a6:	f7ff fdba 	bl	800bc1e <USBD_CtlError>
              break;
 800c0aa:	e7e7      	b.n	800c07c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0ac:	b109      	cbz	r1, 800c0b2 <USBD_StdEPReq+0x68>
 800c0ae:	2980      	cmp	r1, #128	; 0x80
 800c0b0:	d104      	bne.n	800c0bc <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 800c0b2:	4629      	mov	r1, r5
 800c0b4:	4630      	mov	r0, r6
 800c0b6:	f7ff fdb2 	bl	800bc1e <USBD_CtlError>
 800c0ba:	e7df      	b.n	800c07c <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0bc:	f7fa fbf2 	bl	80068a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0c0:	2180      	movs	r1, #128	; 0x80
 800c0c2:	4630      	mov	r0, r6
 800c0c4:	f7fa fbee 	bl	80068a4 <USBD_LL_StallEP>
 800c0c8:	e7d8      	b.n	800c07c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0ca:	886b      	ldrh	r3, [r5, #2]
 800c0cc:	b923      	cbnz	r3, 800c0d8 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c0ce:	b119      	cbz	r1, 800c0d8 <USBD_StdEPReq+0x8e>
 800c0d0:	2980      	cmp	r1, #128	; 0x80
 800c0d2:	d001      	beq.n	800c0d8 <USBD_StdEPReq+0x8e>
 800c0d4:	88eb      	ldrh	r3, [r5, #6]
 800c0d6:	b11b      	cbz	r3, 800c0e0 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 800c0d8:	4630      	mov	r0, r6
 800c0da:	f000 f8f5 	bl	800c2c8 <USBD_CtlSendStatus>
              break;
 800c0de:	e7cd      	b.n	800c07c <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0e0:	f7fa fbe0 	bl	80068a4 <USBD_LL_StallEP>
 800c0e4:	e7f8      	b.n	800c0d8 <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 800c0e6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	2b02      	cmp	r3, #2
 800c0ee:	d005      	beq.n	800c0fc <USBD_StdEPReq+0xb2>
 800c0f0:	2b03      	cmp	r3, #3
 800c0f2:	d012      	beq.n	800c11a <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 800c0f4:	4629      	mov	r1, r5
 800c0f6:	f7ff fd92 	bl	800bc1e <USBD_CtlError>
              break;
 800c0fa:	e7bf      	b.n	800c07c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0fc:	b109      	cbz	r1, 800c102 <USBD_StdEPReq+0xb8>
 800c0fe:	2980      	cmp	r1, #128	; 0x80
 800c100:	d104      	bne.n	800c10c <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 800c102:	4629      	mov	r1, r5
 800c104:	4630      	mov	r0, r6
 800c106:	f7ff fd8a 	bl	800bc1e <USBD_CtlError>
 800c10a:	e7b7      	b.n	800c07c <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c10c:	f7fa fbca 	bl	80068a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c110:	2180      	movs	r1, #128	; 0x80
 800c112:	4630      	mov	r0, r6
 800c114:	f7fa fbc6 	bl	80068a4 <USBD_LL_StallEP>
 800c118:	e7b0      	b.n	800c07c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c11a:	886b      	ldrh	r3, [r5, #2]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d1ad      	bne.n	800c07c <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 800c120:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800c124:	d10a      	bne.n	800c13c <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 800c126:	4630      	mov	r0, r6
 800c128:	f000 f8ce 	bl	800c2c8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c12c:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	4629      	mov	r1, r5
 800c134:	4630      	mov	r0, r6
 800c136:	4798      	blx	r3
 800c138:	4604      	mov	r4, r0
 800c13a:	e79f      	b.n	800c07c <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c13c:	f7fa fbb9 	bl	80068b2 <USBD_LL_ClearStallEP>
 800c140:	e7f1      	b.n	800c126 <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 800c142:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800c146:	b2d2      	uxtb	r2, r2
 800c148:	2a02      	cmp	r2, #2
 800c14a:	d006      	beq.n	800c15a <USBD_StdEPReq+0x110>
 800c14c:	2a03      	cmp	r2, #3
 800c14e:	d029      	beq.n	800c1a4 <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 800c150:	4629      	mov	r1, r5
 800c152:	f7ff fd64 	bl	800bc1e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c156:	463c      	mov	r4, r7
              break;
 800c158:	e790      	b.n	800c07c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c15a:	b109      	cbz	r1, 800c160 <USBD_StdEPReq+0x116>
 800c15c:	2980      	cmp	r1, #128	; 0x80
 800c15e:	d113      	bne.n	800c188 <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c160:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c164:	d115      	bne.n	800c192 <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c166:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c16a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c16e:	0089      	lsls	r1, r1, #2
 800c170:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 800c174:	4431      	add	r1, r6
 800c176:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800c178:	2300      	movs	r3, #0
 800c17a:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c17c:	2202      	movs	r2, #2
 800c17e:	4630      	mov	r0, r6
 800c180:	f000 f876 	bl	800c270 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800c184:	463c      	mov	r4, r7
              break;
 800c186:	e779      	b.n	800c07c <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 800c188:	4629      	mov	r1, r5
 800c18a:	f7ff fd48 	bl	800bc1e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c18e:	463c      	mov	r4, r7
                break;
 800c190:	e774      	b.n	800c07c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c192:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800c196:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c19a:	0089      	lsls	r1, r1, #2
 800c19c:	3110      	adds	r1, #16
 800c19e:	4431      	add	r1, r6
 800c1a0:	3104      	adds	r1, #4
 800c1a2:	e7e9      	b.n	800c178 <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 800c1a4:	b25b      	sxtb	r3, r3
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	db1f      	blt.n	800c1ea <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c1aa:	f001 020f 	and.w	r2, r1, #15
 800c1ae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800c1b2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c1b6:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800c1ba:	b322      	cbz	r2, 800c206 <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	db27      	blt.n	800c210 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1c0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c1c8:	009c      	lsls	r4, r3, #2
 800c1ca:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 800c1ce:	4434      	add	r4, r6
 800c1d0:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c1d2:	b109      	cbz	r1, 800c1d8 <USBD_StdEPReq+0x18e>
 800c1d4:	2980      	cmp	r1, #128	; 0x80
 800c1d6:	d124      	bne.n	800c222 <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1dc:	2202      	movs	r2, #2
 800c1de:	4621      	mov	r1, r4
 800c1e0:	4630      	mov	r0, r6
 800c1e2:	f000 f845 	bl	800c270 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800c1e6:	463c      	mov	r4, r7
              break;
 800c1e8:	e748      	b.n	800c07c <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1ea:	f001 020f 	and.w	r2, r1, #15
 800c1ee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800c1f2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c1f6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800c1f8:	2a00      	cmp	r2, #0
 800c1fa:	d1df      	bne.n	800c1bc <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 800c1fc:	4629      	mov	r1, r5
 800c1fe:	f7ff fd0e 	bl	800bc1e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c202:	463c      	mov	r4, r7
                  break;
 800c204:	e73a      	b.n	800c07c <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 800c206:	4629      	mov	r1, r5
 800c208:	f7ff fd09 	bl	800bc1e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c20c:	463c      	mov	r4, r7
                  break;
 800c20e:	e735      	b.n	800c07c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c210:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800c214:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c218:	009c      	lsls	r4, r3, #2
 800c21a:	3410      	adds	r4, #16
 800c21c:	4434      	add	r4, r6
 800c21e:	3404      	adds	r4, #4
 800c220:	e7d7      	b.n	800c1d2 <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c222:	4630      	mov	r0, r6
 800c224:	f7fa fb4c 	bl	80068c0 <USBD_LL_IsStallEP>
 800c228:	b110      	cbz	r0, 800c230 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 800c22a:	2301      	movs	r3, #1
 800c22c:	6023      	str	r3, [r4, #0]
 800c22e:	e7d5      	b.n	800c1dc <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 800c230:	2300      	movs	r3, #0
 800c232:	6023      	str	r3, [r4, #0]
 800c234:	e7d2      	b.n	800c1dc <USBD_StdEPReq+0x192>

0800c236 <USBD_GetString>:
  if (desc == NULL)
 800c236:	b1d0      	cbz	r0, 800c26e <USBD_GetString+0x38>
{
 800c238:	b570      	push	{r4, r5, r6, lr}
 800c23a:	460d      	mov	r5, r1
 800c23c:	4616      	mov	r6, r2
 800c23e:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c240:	f7ff fcc5 	bl	800bbce <USBD_GetLen>
 800c244:	1c43      	adds	r3, r0, #1
 800c246:	005b      	lsls	r3, r3, #1
 800c248:	b29b      	uxth	r3, r3
 800c24a:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800c24c:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c24e:	2303      	movs	r3, #3
 800c250:	706b      	strb	r3, [r5, #1]
  idx++;
 800c252:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800c254:	e007      	b.n	800c266 <USBD_GetString+0x30>
    unicode[idx] = *pdesc;
 800c256:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800c258:	3401      	adds	r4, #1
    idx++;
 800c25a:	1c5a      	adds	r2, r3, #1
 800c25c:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800c25e:	2100      	movs	r1, #0
 800c260:	54a9      	strb	r1, [r5, r2]
    idx++;
 800c262:	3302      	adds	r3, #2
 800c264:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800c266:	7822      	ldrb	r2, [r4, #0]
 800c268:	2a00      	cmp	r2, #0
 800c26a:	d1f4      	bne.n	800c256 <USBD_GetString+0x20>
}
 800c26c:	bd70      	pop	{r4, r5, r6, pc}
 800c26e:	4770      	bx	lr

0800c270 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c270:	b508      	push	{r3, lr}
 800c272:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c274:	2202      	movs	r2, #2
 800c276:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c27a:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c27c:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c27e:	460a      	mov	r2, r1
 800c280:	2100      	movs	r1, #0
 800c282:	f7fa fb3b 	bl	80068fc <USBD_LL_Transmit>

  return USBD_OK;
}
 800c286:	2000      	movs	r0, #0
 800c288:	bd08      	pop	{r3, pc}

0800c28a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c28a:	b508      	push	{r3, lr}
 800c28c:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c28e:	460a      	mov	r2, r1
 800c290:	2100      	movs	r1, #0
 800c292:	f7fa fb33 	bl	80068fc <USBD_LL_Transmit>

  return USBD_OK;
}
 800c296:	2000      	movs	r0, #0
 800c298:	bd08      	pop	{r3, pc}

0800c29a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c29a:	b508      	push	{r3, lr}
 800c29c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c29e:	2203      	movs	r2, #3
 800c2a0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c2a4:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c2a8:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2ac:	460a      	mov	r2, r1
 800c2ae:	2100      	movs	r1, #0
 800c2b0:	f7fa fb2b 	bl	800690a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	bd08      	pop	{r3, pc}

0800c2b8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c2b8:	b508      	push	{r3, lr}
 800c2ba:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2bc:	460a      	mov	r2, r1
 800c2be:	2100      	movs	r1, #0
 800c2c0:	f7fa fb23 	bl	800690a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c2c4:	2000      	movs	r0, #0
 800c2c6:	bd08      	pop	{r3, pc}

0800c2c8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c2c8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c2ca:	2204      	movs	r2, #4
 800c2cc:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	f7fa fb11 	bl	80068fc <USBD_LL_Transmit>

  return USBD_OK;
}
 800c2da:	2000      	movs	r0, #0
 800c2dc:	bd08      	pop	{r3, pc}

0800c2de <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c2de:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c2e0:	2205      	movs	r2, #5
 800c2e2:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	f7fa fb0d 	bl	800690a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c2f0:	2000      	movs	r0, #0
 800c2f2:	bd08      	pop	{r3, pc}

0800c2f4 <atan2>:
 800c2f4:	f000 ba04 	b.w	800c700 <__ieee754_atan2>

0800c2f8 <cos>:
 800c2f8:	b530      	push	{r4, r5, lr}
 800c2fa:	4d20      	ldr	r5, [pc, #128]	; (800c37c <cos+0x84>)
 800c2fc:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800c300:	42ac      	cmp	r4, r5
 800c302:	b087      	sub	sp, #28
 800c304:	4602      	mov	r2, r0
 800c306:	460b      	mov	r3, r1
 800c308:	dc06      	bgt.n	800c318 <cos+0x20>
 800c30a:	2200      	movs	r2, #0
 800c30c:	2300      	movs	r3, #0
 800c30e:	b007      	add	sp, #28
 800c310:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c314:	f000 b87c 	b.w	800c410 <__kernel_cos>
 800c318:	4d19      	ldr	r5, [pc, #100]	; (800c380 <cos+0x88>)
 800c31a:	42ac      	cmp	r4, r5
 800c31c:	dd03      	ble.n	800c326 <cos+0x2e>
 800c31e:	f7f7 ffab 	bl	8004278 <__aeabi_dsub>
 800c322:	b007      	add	sp, #28
 800c324:	bd30      	pop	{r4, r5, pc}
 800c326:	aa02      	add	r2, sp, #8
 800c328:	f000 faba 	bl	800c8a0 <__ieee754_rem_pio2>
 800c32c:	f000 0003 	and.w	r0, r0, #3
 800c330:	2801      	cmp	r0, #1
 800c332:	d009      	beq.n	800c348 <cos+0x50>
 800c334:	2802      	cmp	r0, #2
 800c336:	d011      	beq.n	800c35c <cos+0x64>
 800c338:	b9b8      	cbnz	r0, 800c36a <cos+0x72>
 800c33a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c33e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c342:	f000 f865 	bl	800c410 <__kernel_cos>
 800c346:	e7ec      	b.n	800c322 <cos+0x2a>
 800c348:	9000      	str	r0, [sp, #0]
 800c34a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c34e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c352:	f000 f91d 	bl	800c590 <__kernel_sin>
 800c356:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c35a:	e7e2      	b.n	800c322 <cos+0x2a>
 800c35c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c360:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c364:	f000 f854 	bl	800c410 <__kernel_cos>
 800c368:	e7f5      	b.n	800c356 <cos+0x5e>
 800c36a:	2301      	movs	r3, #1
 800c36c:	9300      	str	r3, [sp, #0]
 800c36e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c372:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c376:	f000 f90b 	bl	800c590 <__kernel_sin>
 800c37a:	e7d2      	b.n	800c322 <cos+0x2a>
 800c37c:	3fe921fb 	.word	0x3fe921fb
 800c380:	7fefffff 	.word	0x7fefffff

0800c384 <sin>:
 800c384:	b530      	push	{r4, r5, lr}
 800c386:	4d20      	ldr	r5, [pc, #128]	; (800c408 <sin+0x84>)
 800c388:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800c38c:	42ac      	cmp	r4, r5
 800c38e:	b087      	sub	sp, #28
 800c390:	4602      	mov	r2, r0
 800c392:	460b      	mov	r3, r1
 800c394:	dc06      	bgt.n	800c3a4 <sin+0x20>
 800c396:	2300      	movs	r3, #0
 800c398:	9300      	str	r3, [sp, #0]
 800c39a:	2200      	movs	r2, #0
 800c39c:	2300      	movs	r3, #0
 800c39e:	f000 f8f7 	bl	800c590 <__kernel_sin>
 800c3a2:	e004      	b.n	800c3ae <sin+0x2a>
 800c3a4:	4d19      	ldr	r5, [pc, #100]	; (800c40c <sin+0x88>)
 800c3a6:	42ac      	cmp	r4, r5
 800c3a8:	dd03      	ble.n	800c3b2 <sin+0x2e>
 800c3aa:	f7f7 ff65 	bl	8004278 <__aeabi_dsub>
 800c3ae:	b007      	add	sp, #28
 800c3b0:	bd30      	pop	{r4, r5, pc}
 800c3b2:	aa02      	add	r2, sp, #8
 800c3b4:	f000 fa74 	bl	800c8a0 <__ieee754_rem_pio2>
 800c3b8:	f000 0003 	and.w	r0, r0, #3
 800c3bc:	2801      	cmp	r0, #1
 800c3be:	d009      	beq.n	800c3d4 <sin+0x50>
 800c3c0:	2802      	cmp	r0, #2
 800c3c2:	d00e      	beq.n	800c3e2 <sin+0x5e>
 800c3c4:	b9c0      	cbnz	r0, 800c3f8 <sin+0x74>
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	9300      	str	r3, [sp, #0]
 800c3ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3d2:	e7e4      	b.n	800c39e <sin+0x1a>
 800c3d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3dc:	f000 f818 	bl	800c410 <__kernel_cos>
 800c3e0:	e7e5      	b.n	800c3ae <sin+0x2a>
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	9300      	str	r3, [sp, #0]
 800c3e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3ee:	f000 f8cf 	bl	800c590 <__kernel_sin>
 800c3f2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c3f6:	e7da      	b.n	800c3ae <sin+0x2a>
 800c3f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c400:	f000 f806 	bl	800c410 <__kernel_cos>
 800c404:	e7f5      	b.n	800c3f2 <sin+0x6e>
 800c406:	bf00      	nop
 800c408:	3fe921fb 	.word	0x3fe921fb
 800c40c:	7fefffff 	.word	0x7fefffff

0800c410 <__kernel_cos>:
 800c410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c414:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c418:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c41c:	ed2d 8b02 	vpush	{d8}
 800c420:	4680      	mov	r8, r0
 800c422:	ec43 2b18 	vmov	d8, r2, r3
 800c426:	4689      	mov	r9, r1
 800c428:	da04      	bge.n	800c434 <__kernel_cos+0x24>
 800c42a:	f7f8 fb77 	bl	8004b1c <__aeabi_d2iz>
 800c42e:	2800      	cmp	r0, #0
 800c430:	f000 8087 	beq.w	800c542 <__kernel_cos+0x132>
 800c434:	4642      	mov	r2, r8
 800c436:	464b      	mov	r3, r9
 800c438:	4640      	mov	r0, r8
 800c43a:	4649      	mov	r1, r9
 800c43c:	f7f8 f8d4 	bl	80045e8 <__aeabi_dmul>
 800c440:	4b4d      	ldr	r3, [pc, #308]	; (800c578 <__kernel_cos+0x168>)
 800c442:	2200      	movs	r2, #0
 800c444:	4604      	mov	r4, r0
 800c446:	460d      	mov	r5, r1
 800c448:	f7f8 f8ce 	bl	80045e8 <__aeabi_dmul>
 800c44c:	a33e      	add	r3, pc, #248	; (adr r3, 800c548 <__kernel_cos+0x138>)
 800c44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c452:	4682      	mov	sl, r0
 800c454:	468b      	mov	fp, r1
 800c456:	4620      	mov	r0, r4
 800c458:	4629      	mov	r1, r5
 800c45a:	f7f8 f8c5 	bl	80045e8 <__aeabi_dmul>
 800c45e:	a33c      	add	r3, pc, #240	; (adr r3, 800c550 <__kernel_cos+0x140>)
 800c460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c464:	f7f7 ff0a 	bl	800427c <__adddf3>
 800c468:	4622      	mov	r2, r4
 800c46a:	462b      	mov	r3, r5
 800c46c:	f7f8 f8bc 	bl	80045e8 <__aeabi_dmul>
 800c470:	a339      	add	r3, pc, #228	; (adr r3, 800c558 <__kernel_cos+0x148>)
 800c472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c476:	f7f7 feff 	bl	8004278 <__aeabi_dsub>
 800c47a:	4622      	mov	r2, r4
 800c47c:	462b      	mov	r3, r5
 800c47e:	f7f8 f8b3 	bl	80045e8 <__aeabi_dmul>
 800c482:	a337      	add	r3, pc, #220	; (adr r3, 800c560 <__kernel_cos+0x150>)
 800c484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c488:	f7f7 fef8 	bl	800427c <__adddf3>
 800c48c:	4622      	mov	r2, r4
 800c48e:	462b      	mov	r3, r5
 800c490:	f7f8 f8aa 	bl	80045e8 <__aeabi_dmul>
 800c494:	a334      	add	r3, pc, #208	; (adr r3, 800c568 <__kernel_cos+0x158>)
 800c496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49a:	f7f7 feed 	bl	8004278 <__aeabi_dsub>
 800c49e:	4622      	mov	r2, r4
 800c4a0:	462b      	mov	r3, r5
 800c4a2:	f7f8 f8a1 	bl	80045e8 <__aeabi_dmul>
 800c4a6:	a332      	add	r3, pc, #200	; (adr r3, 800c570 <__kernel_cos+0x160>)
 800c4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ac:	f7f7 fee6 	bl	800427c <__adddf3>
 800c4b0:	4622      	mov	r2, r4
 800c4b2:	462b      	mov	r3, r5
 800c4b4:	f7f8 f898 	bl	80045e8 <__aeabi_dmul>
 800c4b8:	4622      	mov	r2, r4
 800c4ba:	462b      	mov	r3, r5
 800c4bc:	f7f8 f894 	bl	80045e8 <__aeabi_dmul>
 800c4c0:	ec53 2b18 	vmov	r2, r3, d8
 800c4c4:	4604      	mov	r4, r0
 800c4c6:	460d      	mov	r5, r1
 800c4c8:	4640      	mov	r0, r8
 800c4ca:	4649      	mov	r1, r9
 800c4cc:	f7f8 f88c 	bl	80045e8 <__aeabi_dmul>
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	4629      	mov	r1, r5
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	f7f7 fece 	bl	8004278 <__aeabi_dsub>
 800c4dc:	4b27      	ldr	r3, [pc, #156]	; (800c57c <__kernel_cos+0x16c>)
 800c4de:	429e      	cmp	r6, r3
 800c4e0:	4680      	mov	r8, r0
 800c4e2:	4689      	mov	r9, r1
 800c4e4:	dc0f      	bgt.n	800c506 <__kernel_cos+0xf6>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	4650      	mov	r0, sl
 800c4ec:	4659      	mov	r1, fp
 800c4ee:	f7f7 fec3 	bl	8004278 <__aeabi_dsub>
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	4922      	ldr	r1, [pc, #136]	; (800c580 <__kernel_cos+0x170>)
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	2000      	movs	r0, #0
 800c4fa:	f7f7 febd 	bl	8004278 <__aeabi_dsub>
 800c4fe:	ecbd 8b02 	vpop	{d8}
 800c502:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c506:	4b1f      	ldr	r3, [pc, #124]	; (800c584 <__kernel_cos+0x174>)
 800c508:	491d      	ldr	r1, [pc, #116]	; (800c580 <__kernel_cos+0x170>)
 800c50a:	429e      	cmp	r6, r3
 800c50c:	bfcc      	ite	gt
 800c50e:	4d1e      	ldrgt	r5, [pc, #120]	; (800c588 <__kernel_cos+0x178>)
 800c510:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c514:	2400      	movs	r4, #0
 800c516:	4622      	mov	r2, r4
 800c518:	462b      	mov	r3, r5
 800c51a:	2000      	movs	r0, #0
 800c51c:	f7f7 feac 	bl	8004278 <__aeabi_dsub>
 800c520:	4622      	mov	r2, r4
 800c522:	4606      	mov	r6, r0
 800c524:	460f      	mov	r7, r1
 800c526:	462b      	mov	r3, r5
 800c528:	4650      	mov	r0, sl
 800c52a:	4659      	mov	r1, fp
 800c52c:	f7f7 fea4 	bl	8004278 <__aeabi_dsub>
 800c530:	4642      	mov	r2, r8
 800c532:	464b      	mov	r3, r9
 800c534:	f7f7 fea0 	bl	8004278 <__aeabi_dsub>
 800c538:	4602      	mov	r2, r0
 800c53a:	460b      	mov	r3, r1
 800c53c:	4630      	mov	r0, r6
 800c53e:	4639      	mov	r1, r7
 800c540:	e7db      	b.n	800c4fa <__kernel_cos+0xea>
 800c542:	490f      	ldr	r1, [pc, #60]	; (800c580 <__kernel_cos+0x170>)
 800c544:	2000      	movs	r0, #0
 800c546:	e7da      	b.n	800c4fe <__kernel_cos+0xee>
 800c548:	be8838d4 	.word	0xbe8838d4
 800c54c:	bda8fae9 	.word	0xbda8fae9
 800c550:	bdb4b1c4 	.word	0xbdb4b1c4
 800c554:	3e21ee9e 	.word	0x3e21ee9e
 800c558:	809c52ad 	.word	0x809c52ad
 800c55c:	3e927e4f 	.word	0x3e927e4f
 800c560:	19cb1590 	.word	0x19cb1590
 800c564:	3efa01a0 	.word	0x3efa01a0
 800c568:	16c15177 	.word	0x16c15177
 800c56c:	3f56c16c 	.word	0x3f56c16c
 800c570:	5555554c 	.word	0x5555554c
 800c574:	3fa55555 	.word	0x3fa55555
 800c578:	3fe00000 	.word	0x3fe00000
 800c57c:	3fd33332 	.word	0x3fd33332
 800c580:	3ff00000 	.word	0x3ff00000
 800c584:	3fe90000 	.word	0x3fe90000
 800c588:	3fd20000 	.word	0x3fd20000
 800c58c:	00000000 	.word	0x00000000

0800c590 <__kernel_sin>:
 800c590:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c594:	461f      	mov	r7, r3
 800c596:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c59a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c59e:	ed2d 8b04 	vpush	{d8-d9}
 800c5a2:	4604      	mov	r4, r0
 800c5a4:	460d      	mov	r5, r1
 800c5a6:	4616      	mov	r6, r2
 800c5a8:	da03      	bge.n	800c5b2 <__kernel_sin+0x22>
 800c5aa:	f7f8 fab7 	bl	8004b1c <__aeabi_d2iz>
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	d051      	beq.n	800c656 <__kernel_sin+0xc6>
 800c5b2:	4622      	mov	r2, r4
 800c5b4:	462b      	mov	r3, r5
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	4629      	mov	r1, r5
 800c5ba:	f7f8 f815 	bl	80045e8 <__aeabi_dmul>
 800c5be:	4682      	mov	sl, r0
 800c5c0:	468b      	mov	fp, r1
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	4629      	mov	r1, r5
 800c5ca:	f7f8 f80d 	bl	80045e8 <__aeabi_dmul>
 800c5ce:	a341      	add	r3, pc, #260	; (adr r3, 800c6d4 <__kernel_sin+0x144>)
 800c5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d4:	4680      	mov	r8, r0
 800c5d6:	4689      	mov	r9, r1
 800c5d8:	4650      	mov	r0, sl
 800c5da:	4659      	mov	r1, fp
 800c5dc:	f7f8 f804 	bl	80045e8 <__aeabi_dmul>
 800c5e0:	a33e      	add	r3, pc, #248	; (adr r3, 800c6dc <__kernel_sin+0x14c>)
 800c5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e6:	f7f7 fe47 	bl	8004278 <__aeabi_dsub>
 800c5ea:	4652      	mov	r2, sl
 800c5ec:	465b      	mov	r3, fp
 800c5ee:	f7f7 fffb 	bl	80045e8 <__aeabi_dmul>
 800c5f2:	a33c      	add	r3, pc, #240	; (adr r3, 800c6e4 <__kernel_sin+0x154>)
 800c5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f8:	f7f7 fe40 	bl	800427c <__adddf3>
 800c5fc:	4652      	mov	r2, sl
 800c5fe:	465b      	mov	r3, fp
 800c600:	f7f7 fff2 	bl	80045e8 <__aeabi_dmul>
 800c604:	a339      	add	r3, pc, #228	; (adr r3, 800c6ec <__kernel_sin+0x15c>)
 800c606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60a:	f7f7 fe35 	bl	8004278 <__aeabi_dsub>
 800c60e:	4652      	mov	r2, sl
 800c610:	465b      	mov	r3, fp
 800c612:	f7f7 ffe9 	bl	80045e8 <__aeabi_dmul>
 800c616:	a337      	add	r3, pc, #220	; (adr r3, 800c6f4 <__kernel_sin+0x164>)
 800c618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61c:	f7f7 fe2e 	bl	800427c <__adddf3>
 800c620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c622:	ec41 0b18 	vmov	d8, r0, r1
 800c626:	b9e3      	cbnz	r3, 800c662 <__kernel_sin+0xd2>
 800c628:	4602      	mov	r2, r0
 800c62a:	460b      	mov	r3, r1
 800c62c:	4650      	mov	r0, sl
 800c62e:	4659      	mov	r1, fp
 800c630:	f7f7 ffda 	bl	80045e8 <__aeabi_dmul>
 800c634:	a324      	add	r3, pc, #144	; (adr r3, 800c6c8 <__kernel_sin+0x138>)
 800c636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63a:	f7f7 fe1d 	bl	8004278 <__aeabi_dsub>
 800c63e:	4642      	mov	r2, r8
 800c640:	464b      	mov	r3, r9
 800c642:	f7f7 ffd1 	bl	80045e8 <__aeabi_dmul>
 800c646:	4602      	mov	r2, r0
 800c648:	460b      	mov	r3, r1
 800c64a:	4620      	mov	r0, r4
 800c64c:	4629      	mov	r1, r5
 800c64e:	f7f7 fe15 	bl	800427c <__adddf3>
 800c652:	4604      	mov	r4, r0
 800c654:	460d      	mov	r5, r1
 800c656:	ecbd 8b04 	vpop	{d8-d9}
 800c65a:	4620      	mov	r0, r4
 800c65c:	4629      	mov	r1, r5
 800c65e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c662:	4b1b      	ldr	r3, [pc, #108]	; (800c6d0 <__kernel_sin+0x140>)
 800c664:	2200      	movs	r2, #0
 800c666:	4630      	mov	r0, r6
 800c668:	4639      	mov	r1, r7
 800c66a:	f7f7 ffbd 	bl	80045e8 <__aeabi_dmul>
 800c66e:	ec53 2b18 	vmov	r2, r3, d8
 800c672:	ec41 0b19 	vmov	d9, r0, r1
 800c676:	4640      	mov	r0, r8
 800c678:	4649      	mov	r1, r9
 800c67a:	f7f7 ffb5 	bl	80045e8 <__aeabi_dmul>
 800c67e:	4602      	mov	r2, r0
 800c680:	460b      	mov	r3, r1
 800c682:	ec51 0b19 	vmov	r0, r1, d9
 800c686:	f7f7 fdf7 	bl	8004278 <__aeabi_dsub>
 800c68a:	4652      	mov	r2, sl
 800c68c:	465b      	mov	r3, fp
 800c68e:	f7f7 ffab 	bl	80045e8 <__aeabi_dmul>
 800c692:	4632      	mov	r2, r6
 800c694:	463b      	mov	r3, r7
 800c696:	f7f7 fdef 	bl	8004278 <__aeabi_dsub>
 800c69a:	a30b      	add	r3, pc, #44	; (adr r3, 800c6c8 <__kernel_sin+0x138>)
 800c69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a0:	4606      	mov	r6, r0
 800c6a2:	460f      	mov	r7, r1
 800c6a4:	4640      	mov	r0, r8
 800c6a6:	4649      	mov	r1, r9
 800c6a8:	f7f7 ff9e 	bl	80045e8 <__aeabi_dmul>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	460b      	mov	r3, r1
 800c6b0:	4630      	mov	r0, r6
 800c6b2:	4639      	mov	r1, r7
 800c6b4:	f7f7 fde2 	bl	800427c <__adddf3>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	4620      	mov	r0, r4
 800c6be:	4629      	mov	r1, r5
 800c6c0:	f7f7 fdda 	bl	8004278 <__aeabi_dsub>
 800c6c4:	e7c5      	b.n	800c652 <__kernel_sin+0xc2>
 800c6c6:	bf00      	nop
 800c6c8:	55555549 	.word	0x55555549
 800c6cc:	3fc55555 	.word	0x3fc55555
 800c6d0:	3fe00000 	.word	0x3fe00000
 800c6d4:	5acfd57c 	.word	0x5acfd57c
 800c6d8:	3de5d93a 	.word	0x3de5d93a
 800c6dc:	8a2b9ceb 	.word	0x8a2b9ceb
 800c6e0:	3e5ae5e6 	.word	0x3e5ae5e6
 800c6e4:	57b1fe7d 	.word	0x57b1fe7d
 800c6e8:	3ec71de3 	.word	0x3ec71de3
 800c6ec:	19c161d5 	.word	0x19c161d5
 800c6f0:	3f2a01a0 	.word	0x3f2a01a0
 800c6f4:	1110f8a6 	.word	0x1110f8a6
 800c6f8:	3f811111 	.word	0x3f811111
 800c6fc:	00000000 	.word	0x00000000

0800c700 <__ieee754_atan2>:
 800c700:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c704:	4617      	mov	r7, r2
 800c706:	4690      	mov	r8, r2
 800c708:	4699      	mov	r9, r3
 800c70a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c70e:	427b      	negs	r3, r7
 800c710:	f8df a184 	ldr.w	sl, [pc, #388]	; 800c898 <__ieee754_atan2+0x198>
 800c714:	433b      	orrs	r3, r7
 800c716:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c71a:	4553      	cmp	r3, sl
 800c71c:	4604      	mov	r4, r0
 800c71e:	460d      	mov	r5, r1
 800c720:	d809      	bhi.n	800c736 <__ieee754_atan2+0x36>
 800c722:	4246      	negs	r6, r0
 800c724:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c728:	4306      	orrs	r6, r0
 800c72a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800c72e:	4556      	cmp	r6, sl
 800c730:	468e      	mov	lr, r1
 800c732:	4683      	mov	fp, r0
 800c734:	d908      	bls.n	800c748 <__ieee754_atan2+0x48>
 800c736:	4642      	mov	r2, r8
 800c738:	464b      	mov	r3, r9
 800c73a:	4620      	mov	r0, r4
 800c73c:	4629      	mov	r1, r5
 800c73e:	f7f7 fd9d 	bl	800427c <__adddf3>
 800c742:	4604      	mov	r4, r0
 800c744:	460d      	mov	r5, r1
 800c746:	e019      	b.n	800c77c <__ieee754_atan2+0x7c>
 800c748:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800c74c:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800c750:	433e      	orrs	r6, r7
 800c752:	d103      	bne.n	800c75c <__ieee754_atan2+0x5c>
 800c754:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c758:	f000 ba9e 	b.w	800cc98 <atan>
 800c75c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800c760:	f006 0602 	and.w	r6, r6, #2
 800c764:	ea53 0b0b 	orrs.w	fp, r3, fp
 800c768:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800c76c:	d10a      	bne.n	800c784 <__ieee754_atan2+0x84>
 800c76e:	2e02      	cmp	r6, #2
 800c770:	d067      	beq.n	800c842 <__ieee754_atan2+0x142>
 800c772:	2e03      	cmp	r6, #3
 800c774:	d102      	bne.n	800c77c <__ieee754_atan2+0x7c>
 800c776:	a544      	add	r5, pc, #272	; (adr r5, 800c888 <__ieee754_atan2+0x188>)
 800c778:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c77c:	4620      	mov	r0, r4
 800c77e:	4629      	mov	r1, r5
 800c780:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c784:	4317      	orrs	r7, r2
 800c786:	d106      	bne.n	800c796 <__ieee754_atan2+0x96>
 800c788:	f1be 0f00 	cmp.w	lr, #0
 800c78c:	da64      	bge.n	800c858 <__ieee754_atan2+0x158>
 800c78e:	a540      	add	r5, pc, #256	; (adr r5, 800c890 <__ieee754_atan2+0x190>)
 800c790:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c794:	e7f2      	b.n	800c77c <__ieee754_atan2+0x7c>
 800c796:	4552      	cmp	r2, sl
 800c798:	d10f      	bne.n	800c7ba <__ieee754_atan2+0xba>
 800c79a:	4293      	cmp	r3, r2
 800c79c:	f106 36ff 	add.w	r6, r6, #4294967295
 800c7a0:	d107      	bne.n	800c7b2 <__ieee754_atan2+0xb2>
 800c7a2:	2e02      	cmp	r6, #2
 800c7a4:	d851      	bhi.n	800c84a <__ieee754_atan2+0x14a>
 800c7a6:	4b36      	ldr	r3, [pc, #216]	; (800c880 <__ieee754_atan2+0x180>)
 800c7a8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c7ac:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c7b0:	e7e4      	b.n	800c77c <__ieee754_atan2+0x7c>
 800c7b2:	2e02      	cmp	r6, #2
 800c7b4:	d84d      	bhi.n	800c852 <__ieee754_atan2+0x152>
 800c7b6:	4b33      	ldr	r3, [pc, #204]	; (800c884 <__ieee754_atan2+0x184>)
 800c7b8:	e7f6      	b.n	800c7a8 <__ieee754_atan2+0xa8>
 800c7ba:	4553      	cmp	r3, sl
 800c7bc:	d0e4      	beq.n	800c788 <__ieee754_atan2+0x88>
 800c7be:	1a9b      	subs	r3, r3, r2
 800c7c0:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c7c4:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c7c8:	da21      	bge.n	800c80e <__ieee754_atan2+0x10e>
 800c7ca:	f1b9 0f00 	cmp.w	r9, #0
 800c7ce:	da01      	bge.n	800c7d4 <__ieee754_atan2+0xd4>
 800c7d0:	323c      	adds	r2, #60	; 0x3c
 800c7d2:	db20      	blt.n	800c816 <__ieee754_atan2+0x116>
 800c7d4:	4642      	mov	r2, r8
 800c7d6:	464b      	mov	r3, r9
 800c7d8:	4620      	mov	r0, r4
 800c7da:	4629      	mov	r1, r5
 800c7dc:	f7f8 f82e 	bl	800483c <__aeabi_ddiv>
 800c7e0:	f000 fbea 	bl	800cfb8 <fabs>
 800c7e4:	f000 fa58 	bl	800cc98 <atan>
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	460d      	mov	r5, r1
 800c7ec:	2e01      	cmp	r6, #1
 800c7ee:	d015      	beq.n	800c81c <__ieee754_atan2+0x11c>
 800c7f0:	2e02      	cmp	r6, #2
 800c7f2:	d017      	beq.n	800c824 <__ieee754_atan2+0x124>
 800c7f4:	2e00      	cmp	r6, #0
 800c7f6:	d0c1      	beq.n	800c77c <__ieee754_atan2+0x7c>
 800c7f8:	a319      	add	r3, pc, #100	; (adr r3, 800c860 <__ieee754_atan2+0x160>)
 800c7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fe:	4620      	mov	r0, r4
 800c800:	4629      	mov	r1, r5
 800c802:	f7f7 fd39 	bl	8004278 <__aeabi_dsub>
 800c806:	a318      	add	r3, pc, #96	; (adr r3, 800c868 <__ieee754_atan2+0x168>)
 800c808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80c:	e016      	b.n	800c83c <__ieee754_atan2+0x13c>
 800c80e:	a518      	add	r5, pc, #96	; (adr r5, 800c870 <__ieee754_atan2+0x170>)
 800c810:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c814:	e7ea      	b.n	800c7ec <__ieee754_atan2+0xec>
 800c816:	2400      	movs	r4, #0
 800c818:	2500      	movs	r5, #0
 800c81a:	e7e7      	b.n	800c7ec <__ieee754_atan2+0xec>
 800c81c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c820:	461d      	mov	r5, r3
 800c822:	e7ab      	b.n	800c77c <__ieee754_atan2+0x7c>
 800c824:	a30e      	add	r3, pc, #56	; (adr r3, 800c860 <__ieee754_atan2+0x160>)
 800c826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82a:	4620      	mov	r0, r4
 800c82c:	4629      	mov	r1, r5
 800c82e:	f7f7 fd23 	bl	8004278 <__aeabi_dsub>
 800c832:	4602      	mov	r2, r0
 800c834:	460b      	mov	r3, r1
 800c836:	a10c      	add	r1, pc, #48	; (adr r1, 800c868 <__ieee754_atan2+0x168>)
 800c838:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c83c:	f7f7 fd1c 	bl	8004278 <__aeabi_dsub>
 800c840:	e77f      	b.n	800c742 <__ieee754_atan2+0x42>
 800c842:	a509      	add	r5, pc, #36	; (adr r5, 800c868 <__ieee754_atan2+0x168>)
 800c844:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c848:	e798      	b.n	800c77c <__ieee754_atan2+0x7c>
 800c84a:	a50b      	add	r5, pc, #44	; (adr r5, 800c878 <__ieee754_atan2+0x178>)
 800c84c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c850:	e794      	b.n	800c77c <__ieee754_atan2+0x7c>
 800c852:	2400      	movs	r4, #0
 800c854:	2500      	movs	r5, #0
 800c856:	e791      	b.n	800c77c <__ieee754_atan2+0x7c>
 800c858:	a505      	add	r5, pc, #20	; (adr r5, 800c870 <__ieee754_atan2+0x170>)
 800c85a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c85e:	e78d      	b.n	800c77c <__ieee754_atan2+0x7c>
 800c860:	33145c07 	.word	0x33145c07
 800c864:	3ca1a626 	.word	0x3ca1a626
 800c868:	54442d18 	.word	0x54442d18
 800c86c:	400921fb 	.word	0x400921fb
 800c870:	54442d18 	.word	0x54442d18
 800c874:	3ff921fb 	.word	0x3ff921fb
 800c878:	54442d18 	.word	0x54442d18
 800c87c:	3fe921fb 	.word	0x3fe921fb
 800c880:	0800e548 	.word	0x0800e548
 800c884:	0800e560 	.word	0x0800e560
 800c888:	54442d18 	.word	0x54442d18
 800c88c:	c00921fb 	.word	0xc00921fb
 800c890:	54442d18 	.word	0x54442d18
 800c894:	bff921fb 	.word	0xbff921fb
 800c898:	7ff00000 	.word	0x7ff00000
 800c89c:	00000000 	.word	0x00000000

0800c8a0 <__ieee754_rem_pio2>:
 800c8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a4:	ed2d 8b02 	vpush	{d8}
 800c8a8:	4bc7      	ldr	r3, [pc, #796]	; (800cbc8 <__ieee754_rem_pio2+0x328>)
 800c8aa:	b08b      	sub	sp, #44	; 0x2c
 800c8ac:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800c8b0:	4598      	cmp	r8, r3
 800c8b2:	4604      	mov	r4, r0
 800c8b4:	460d      	mov	r5, r1
 800c8b6:	4692      	mov	sl, r2
 800c8b8:	9102      	str	r1, [sp, #8]
 800c8ba:	dc08      	bgt.n	800c8ce <__ieee754_rem_pio2+0x2e>
 800c8bc:	e9c2 4500 	strd	r4, r5, [r2]
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800c8c8:	f04f 0b00 	mov.w	fp, #0
 800c8cc:	e025      	b.n	800c91a <__ieee754_rem_pio2+0x7a>
 800c8ce:	4bbf      	ldr	r3, [pc, #764]	; (800cbcc <__ieee754_rem_pio2+0x32c>)
 800c8d0:	4598      	cmp	r8, r3
 800c8d2:	dc75      	bgt.n	800c9c0 <__ieee754_rem_pio2+0x120>
 800c8d4:	9b02      	ldr	r3, [sp, #8]
 800c8d6:	4ebe      	ldr	r6, [pc, #760]	; (800cbd0 <__ieee754_rem_pio2+0x330>)
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	a3ad      	add	r3, pc, #692	; (adr r3, 800cb90 <__ieee754_rem_pio2+0x2f0>)
 800c8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e0:	dd39      	ble.n	800c956 <__ieee754_rem_pio2+0xb6>
 800c8e2:	f7f7 fcc9 	bl	8004278 <__aeabi_dsub>
 800c8e6:	45b0      	cmp	r8, r6
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	460d      	mov	r5, r1
 800c8ec:	d01b      	beq.n	800c926 <__ieee754_rem_pio2+0x86>
 800c8ee:	a3aa      	add	r3, pc, #680	; (adr r3, 800cb98 <__ieee754_rem_pio2+0x2f8>)
 800c8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f4:	f7f7 fcc0 	bl	8004278 <__aeabi_dsub>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	e9ca 2300 	strd	r2, r3, [sl]
 800c900:	4620      	mov	r0, r4
 800c902:	4629      	mov	r1, r5
 800c904:	f7f7 fcb8 	bl	8004278 <__aeabi_dsub>
 800c908:	a3a3      	add	r3, pc, #652	; (adr r3, 800cb98 <__ieee754_rem_pio2+0x2f8>)
 800c90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90e:	f7f7 fcb3 	bl	8004278 <__aeabi_dsub>
 800c912:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c916:	f04f 0b01 	mov.w	fp, #1
 800c91a:	4658      	mov	r0, fp
 800c91c:	b00b      	add	sp, #44	; 0x2c
 800c91e:	ecbd 8b02 	vpop	{d8}
 800c922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c926:	a39e      	add	r3, pc, #632	; (adr r3, 800cba0 <__ieee754_rem_pio2+0x300>)
 800c928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92c:	f7f7 fca4 	bl	8004278 <__aeabi_dsub>
 800c930:	a39d      	add	r3, pc, #628	; (adr r3, 800cba8 <__ieee754_rem_pio2+0x308>)
 800c932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c936:	4604      	mov	r4, r0
 800c938:	460d      	mov	r5, r1
 800c93a:	f7f7 fc9d 	bl	8004278 <__aeabi_dsub>
 800c93e:	4602      	mov	r2, r0
 800c940:	460b      	mov	r3, r1
 800c942:	e9ca 2300 	strd	r2, r3, [sl]
 800c946:	4620      	mov	r0, r4
 800c948:	4629      	mov	r1, r5
 800c94a:	f7f7 fc95 	bl	8004278 <__aeabi_dsub>
 800c94e:	a396      	add	r3, pc, #600	; (adr r3, 800cba8 <__ieee754_rem_pio2+0x308>)
 800c950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c954:	e7db      	b.n	800c90e <__ieee754_rem_pio2+0x6e>
 800c956:	f7f7 fc91 	bl	800427c <__adddf3>
 800c95a:	45b0      	cmp	r8, r6
 800c95c:	4604      	mov	r4, r0
 800c95e:	460d      	mov	r5, r1
 800c960:	d016      	beq.n	800c990 <__ieee754_rem_pio2+0xf0>
 800c962:	a38d      	add	r3, pc, #564	; (adr r3, 800cb98 <__ieee754_rem_pio2+0x2f8>)
 800c964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c968:	f7f7 fc88 	bl	800427c <__adddf3>
 800c96c:	4602      	mov	r2, r0
 800c96e:	460b      	mov	r3, r1
 800c970:	e9ca 2300 	strd	r2, r3, [sl]
 800c974:	4620      	mov	r0, r4
 800c976:	4629      	mov	r1, r5
 800c978:	f7f7 fc7e 	bl	8004278 <__aeabi_dsub>
 800c97c:	a386      	add	r3, pc, #536	; (adr r3, 800cb98 <__ieee754_rem_pio2+0x2f8>)
 800c97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c982:	f7f7 fc7b 	bl	800427c <__adddf3>
 800c986:	f04f 3bff 	mov.w	fp, #4294967295
 800c98a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c98e:	e7c4      	b.n	800c91a <__ieee754_rem_pio2+0x7a>
 800c990:	a383      	add	r3, pc, #524	; (adr r3, 800cba0 <__ieee754_rem_pio2+0x300>)
 800c992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c996:	f7f7 fc71 	bl	800427c <__adddf3>
 800c99a:	a383      	add	r3, pc, #524	; (adr r3, 800cba8 <__ieee754_rem_pio2+0x308>)
 800c99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	460d      	mov	r5, r1
 800c9a4:	f7f7 fc6a 	bl	800427c <__adddf3>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	e9ca 2300 	strd	r2, r3, [sl]
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	4629      	mov	r1, r5
 800c9b4:	f7f7 fc60 	bl	8004278 <__aeabi_dsub>
 800c9b8:	a37b      	add	r3, pc, #492	; (adr r3, 800cba8 <__ieee754_rem_pio2+0x308>)
 800c9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9be:	e7e0      	b.n	800c982 <__ieee754_rem_pio2+0xe2>
 800c9c0:	4b84      	ldr	r3, [pc, #528]	; (800cbd4 <__ieee754_rem_pio2+0x334>)
 800c9c2:	4598      	cmp	r8, r3
 800c9c4:	f300 80d5 	bgt.w	800cb72 <__ieee754_rem_pio2+0x2d2>
 800c9c8:	f000 faf6 	bl	800cfb8 <fabs>
 800c9cc:	a378      	add	r3, pc, #480	; (adr r3, 800cbb0 <__ieee754_rem_pio2+0x310>)
 800c9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d2:	4604      	mov	r4, r0
 800c9d4:	460d      	mov	r5, r1
 800c9d6:	f7f7 fe07 	bl	80045e8 <__aeabi_dmul>
 800c9da:	4b7f      	ldr	r3, [pc, #508]	; (800cbd8 <__ieee754_rem_pio2+0x338>)
 800c9dc:	2200      	movs	r2, #0
 800c9de:	f7f7 fc4d 	bl	800427c <__adddf3>
 800c9e2:	f7f8 f89b 	bl	8004b1c <__aeabi_d2iz>
 800c9e6:	4683      	mov	fp, r0
 800c9e8:	f7f7 fd94 	bl	8004514 <__aeabi_i2d>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	ec43 2b18 	vmov	d8, r2, r3
 800c9f4:	a366      	add	r3, pc, #408	; (adr r3, 800cb90 <__ieee754_rem_pio2+0x2f0>)
 800c9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fa:	f7f7 fdf5 	bl	80045e8 <__aeabi_dmul>
 800c9fe:	4602      	mov	r2, r0
 800ca00:	460b      	mov	r3, r1
 800ca02:	4620      	mov	r0, r4
 800ca04:	4629      	mov	r1, r5
 800ca06:	f7f7 fc37 	bl	8004278 <__aeabi_dsub>
 800ca0a:	a363      	add	r3, pc, #396	; (adr r3, 800cb98 <__ieee754_rem_pio2+0x2f8>)
 800ca0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca10:	4606      	mov	r6, r0
 800ca12:	460f      	mov	r7, r1
 800ca14:	ec51 0b18 	vmov	r0, r1, d8
 800ca18:	f7f7 fde6 	bl	80045e8 <__aeabi_dmul>
 800ca1c:	f1bb 0f1f 	cmp.w	fp, #31
 800ca20:	4604      	mov	r4, r0
 800ca22:	460d      	mov	r5, r1
 800ca24:	dc0d      	bgt.n	800ca42 <__ieee754_rem_pio2+0x1a2>
 800ca26:	4b6d      	ldr	r3, [pc, #436]	; (800cbdc <__ieee754_rem_pio2+0x33c>)
 800ca28:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ca2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca30:	4543      	cmp	r3, r8
 800ca32:	d006      	beq.n	800ca42 <__ieee754_rem_pio2+0x1a2>
 800ca34:	4622      	mov	r2, r4
 800ca36:	462b      	mov	r3, r5
 800ca38:	4630      	mov	r0, r6
 800ca3a:	4639      	mov	r1, r7
 800ca3c:	f7f7 fc1c 	bl	8004278 <__aeabi_dsub>
 800ca40:	e00e      	b.n	800ca60 <__ieee754_rem_pio2+0x1c0>
 800ca42:	462b      	mov	r3, r5
 800ca44:	4622      	mov	r2, r4
 800ca46:	4630      	mov	r0, r6
 800ca48:	4639      	mov	r1, r7
 800ca4a:	f7f7 fc15 	bl	8004278 <__aeabi_dsub>
 800ca4e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ca52:	9303      	str	r3, [sp, #12]
 800ca54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ca58:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ca5c:	2b10      	cmp	r3, #16
 800ca5e:	dc02      	bgt.n	800ca66 <__ieee754_rem_pio2+0x1c6>
 800ca60:	e9ca 0100 	strd	r0, r1, [sl]
 800ca64:	e039      	b.n	800cada <__ieee754_rem_pio2+0x23a>
 800ca66:	a34e      	add	r3, pc, #312	; (adr r3, 800cba0 <__ieee754_rem_pio2+0x300>)
 800ca68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6c:	ec51 0b18 	vmov	r0, r1, d8
 800ca70:	f7f7 fdba 	bl	80045e8 <__aeabi_dmul>
 800ca74:	4604      	mov	r4, r0
 800ca76:	460d      	mov	r5, r1
 800ca78:	4602      	mov	r2, r0
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	4630      	mov	r0, r6
 800ca7e:	4639      	mov	r1, r7
 800ca80:	f7f7 fbfa 	bl	8004278 <__aeabi_dsub>
 800ca84:	4602      	mov	r2, r0
 800ca86:	460b      	mov	r3, r1
 800ca88:	4680      	mov	r8, r0
 800ca8a:	4689      	mov	r9, r1
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	4639      	mov	r1, r7
 800ca90:	f7f7 fbf2 	bl	8004278 <__aeabi_dsub>
 800ca94:	4622      	mov	r2, r4
 800ca96:	462b      	mov	r3, r5
 800ca98:	f7f7 fbee 	bl	8004278 <__aeabi_dsub>
 800ca9c:	a342      	add	r3, pc, #264	; (adr r3, 800cba8 <__ieee754_rem_pio2+0x308>)
 800ca9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa2:	4604      	mov	r4, r0
 800caa4:	460d      	mov	r5, r1
 800caa6:	ec51 0b18 	vmov	r0, r1, d8
 800caaa:	f7f7 fd9d 	bl	80045e8 <__aeabi_dmul>
 800caae:	4622      	mov	r2, r4
 800cab0:	462b      	mov	r3, r5
 800cab2:	f7f7 fbe1 	bl	8004278 <__aeabi_dsub>
 800cab6:	4602      	mov	r2, r0
 800cab8:	460b      	mov	r3, r1
 800caba:	4604      	mov	r4, r0
 800cabc:	460d      	mov	r5, r1
 800cabe:	4640      	mov	r0, r8
 800cac0:	4649      	mov	r1, r9
 800cac2:	f7f7 fbd9 	bl	8004278 <__aeabi_dsub>
 800cac6:	9a03      	ldr	r2, [sp, #12]
 800cac8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cacc:	1ad3      	subs	r3, r2, r3
 800cace:	2b31      	cmp	r3, #49	; 0x31
 800cad0:	dc24      	bgt.n	800cb1c <__ieee754_rem_pio2+0x27c>
 800cad2:	e9ca 0100 	strd	r0, r1, [sl]
 800cad6:	4646      	mov	r6, r8
 800cad8:	464f      	mov	r7, r9
 800cada:	e9da 8900 	ldrd	r8, r9, [sl]
 800cade:	4630      	mov	r0, r6
 800cae0:	4642      	mov	r2, r8
 800cae2:	464b      	mov	r3, r9
 800cae4:	4639      	mov	r1, r7
 800cae6:	f7f7 fbc7 	bl	8004278 <__aeabi_dsub>
 800caea:	462b      	mov	r3, r5
 800caec:	4622      	mov	r2, r4
 800caee:	f7f7 fbc3 	bl	8004278 <__aeabi_dsub>
 800caf2:	9b02      	ldr	r3, [sp, #8]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cafa:	f6bf af0e 	bge.w	800c91a <__ieee754_rem_pio2+0x7a>
 800cafe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cb02:	f8ca 3004 	str.w	r3, [sl, #4]
 800cb06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb0a:	f8ca 8000 	str.w	r8, [sl]
 800cb0e:	f8ca 0008 	str.w	r0, [sl, #8]
 800cb12:	f8ca 300c 	str.w	r3, [sl, #12]
 800cb16:	f1cb 0b00 	rsb	fp, fp, #0
 800cb1a:	e6fe      	b.n	800c91a <__ieee754_rem_pio2+0x7a>
 800cb1c:	a326      	add	r3, pc, #152	; (adr r3, 800cbb8 <__ieee754_rem_pio2+0x318>)
 800cb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb22:	ec51 0b18 	vmov	r0, r1, d8
 800cb26:	f7f7 fd5f 	bl	80045e8 <__aeabi_dmul>
 800cb2a:	4604      	mov	r4, r0
 800cb2c:	460d      	mov	r5, r1
 800cb2e:	4602      	mov	r2, r0
 800cb30:	460b      	mov	r3, r1
 800cb32:	4640      	mov	r0, r8
 800cb34:	4649      	mov	r1, r9
 800cb36:	f7f7 fb9f 	bl	8004278 <__aeabi_dsub>
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	4606      	mov	r6, r0
 800cb40:	460f      	mov	r7, r1
 800cb42:	4640      	mov	r0, r8
 800cb44:	4649      	mov	r1, r9
 800cb46:	f7f7 fb97 	bl	8004278 <__aeabi_dsub>
 800cb4a:	4622      	mov	r2, r4
 800cb4c:	462b      	mov	r3, r5
 800cb4e:	f7f7 fb93 	bl	8004278 <__aeabi_dsub>
 800cb52:	a31b      	add	r3, pc, #108	; (adr r3, 800cbc0 <__ieee754_rem_pio2+0x320>)
 800cb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb58:	4604      	mov	r4, r0
 800cb5a:	460d      	mov	r5, r1
 800cb5c:	ec51 0b18 	vmov	r0, r1, d8
 800cb60:	f7f7 fd42 	bl	80045e8 <__aeabi_dmul>
 800cb64:	4622      	mov	r2, r4
 800cb66:	462b      	mov	r3, r5
 800cb68:	f7f7 fb86 	bl	8004278 <__aeabi_dsub>
 800cb6c:	4604      	mov	r4, r0
 800cb6e:	460d      	mov	r5, r1
 800cb70:	e760      	b.n	800ca34 <__ieee754_rem_pio2+0x194>
 800cb72:	4b1b      	ldr	r3, [pc, #108]	; (800cbe0 <__ieee754_rem_pio2+0x340>)
 800cb74:	4598      	cmp	r8, r3
 800cb76:	dd35      	ble.n	800cbe4 <__ieee754_rem_pio2+0x344>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	f7f7 fb7c 	bl	8004278 <__aeabi_dsub>
 800cb80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cb84:	e9ca 0100 	strd	r0, r1, [sl]
 800cb88:	e69e      	b.n	800c8c8 <__ieee754_rem_pio2+0x28>
 800cb8a:	bf00      	nop
 800cb8c:	f3af 8000 	nop.w
 800cb90:	54400000 	.word	0x54400000
 800cb94:	3ff921fb 	.word	0x3ff921fb
 800cb98:	1a626331 	.word	0x1a626331
 800cb9c:	3dd0b461 	.word	0x3dd0b461
 800cba0:	1a600000 	.word	0x1a600000
 800cba4:	3dd0b461 	.word	0x3dd0b461
 800cba8:	2e037073 	.word	0x2e037073
 800cbac:	3ba3198a 	.word	0x3ba3198a
 800cbb0:	6dc9c883 	.word	0x6dc9c883
 800cbb4:	3fe45f30 	.word	0x3fe45f30
 800cbb8:	2e000000 	.word	0x2e000000
 800cbbc:	3ba3198a 	.word	0x3ba3198a
 800cbc0:	252049c1 	.word	0x252049c1
 800cbc4:	397b839a 	.word	0x397b839a
 800cbc8:	3fe921fb 	.word	0x3fe921fb
 800cbcc:	4002d97b 	.word	0x4002d97b
 800cbd0:	3ff921fb 	.word	0x3ff921fb
 800cbd4:	413921fb 	.word	0x413921fb
 800cbd8:	3fe00000 	.word	0x3fe00000
 800cbdc:	0800e578 	.word	0x0800e578
 800cbe0:	7fefffff 	.word	0x7fefffff
 800cbe4:	ea4f 5628 	mov.w	r6, r8, asr #20
 800cbe8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800cbec:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800cbf0:	460d      	mov	r5, r1
 800cbf2:	f7f7 ff93 	bl	8004b1c <__aeabi_d2iz>
 800cbf6:	f7f7 fc8d 	bl	8004514 <__aeabi_i2d>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	4620      	mov	r0, r4
 800cc00:	4629      	mov	r1, r5
 800cc02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cc06:	f7f7 fb37 	bl	8004278 <__aeabi_dsub>
 800cc0a:	4b21      	ldr	r3, [pc, #132]	; (800cc90 <__ieee754_rem_pio2+0x3f0>)
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	f7f7 fceb 	bl	80045e8 <__aeabi_dmul>
 800cc12:	460d      	mov	r5, r1
 800cc14:	4604      	mov	r4, r0
 800cc16:	f7f7 ff81 	bl	8004b1c <__aeabi_d2iz>
 800cc1a:	f7f7 fc7b 	bl	8004514 <__aeabi_i2d>
 800cc1e:	4602      	mov	r2, r0
 800cc20:	460b      	mov	r3, r1
 800cc22:	4620      	mov	r0, r4
 800cc24:	4629      	mov	r1, r5
 800cc26:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cc2a:	f7f7 fb25 	bl	8004278 <__aeabi_dsub>
 800cc2e:	4b18      	ldr	r3, [pc, #96]	; (800cc90 <__ieee754_rem_pio2+0x3f0>)
 800cc30:	2200      	movs	r2, #0
 800cc32:	f7f7 fcd9 	bl	80045e8 <__aeabi_dmul>
 800cc36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cc3a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800cc3e:	2703      	movs	r7, #3
 800cc40:	2400      	movs	r4, #0
 800cc42:	2500      	movs	r5, #0
 800cc44:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800cc48:	4622      	mov	r2, r4
 800cc4a:	462b      	mov	r3, r5
 800cc4c:	46b9      	mov	r9, r7
 800cc4e:	3f01      	subs	r7, #1
 800cc50:	f7f7 ff32 	bl	8004ab8 <__aeabi_dcmpeq>
 800cc54:	2800      	cmp	r0, #0
 800cc56:	d1f5      	bne.n	800cc44 <__ieee754_rem_pio2+0x3a4>
 800cc58:	4b0e      	ldr	r3, [pc, #56]	; (800cc94 <__ieee754_rem_pio2+0x3f4>)
 800cc5a:	9301      	str	r3, [sp, #4]
 800cc5c:	2302      	movs	r3, #2
 800cc5e:	9300      	str	r3, [sp, #0]
 800cc60:	4632      	mov	r2, r6
 800cc62:	464b      	mov	r3, r9
 800cc64:	4651      	mov	r1, sl
 800cc66:	a804      	add	r0, sp, #16
 800cc68:	f000 f9aa 	bl	800cfc0 <__kernel_rem_pio2>
 800cc6c:	9b02      	ldr	r3, [sp, #8]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	4683      	mov	fp, r0
 800cc72:	f6bf ae52 	bge.w	800c91a <__ieee754_rem_pio2+0x7a>
 800cc76:	e9da 2100 	ldrd	r2, r1, [sl]
 800cc7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc7e:	e9ca 2300 	strd	r2, r3, [sl]
 800cc82:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800cc86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc8a:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800cc8e:	e742      	b.n	800cb16 <__ieee754_rem_pio2+0x276>
 800cc90:	41700000 	.word	0x41700000
 800cc94:	0800e5f8 	.word	0x0800e5f8

0800cc98 <atan>:
 800cc98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc9c:	4bbc      	ldr	r3, [pc, #752]	; (800cf90 <atan+0x2f8>)
 800cc9e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cca2:	429e      	cmp	r6, r3
 800cca4:	4604      	mov	r4, r0
 800cca6:	460d      	mov	r5, r1
 800cca8:	468b      	mov	fp, r1
 800ccaa:	dd18      	ble.n	800ccde <atan+0x46>
 800ccac:	4bb9      	ldr	r3, [pc, #740]	; (800cf94 <atan+0x2fc>)
 800ccae:	429e      	cmp	r6, r3
 800ccb0:	dc01      	bgt.n	800ccb6 <atan+0x1e>
 800ccb2:	d109      	bne.n	800ccc8 <atan+0x30>
 800ccb4:	b140      	cbz	r0, 800ccc8 <atan+0x30>
 800ccb6:	4622      	mov	r2, r4
 800ccb8:	462b      	mov	r3, r5
 800ccba:	4620      	mov	r0, r4
 800ccbc:	4629      	mov	r1, r5
 800ccbe:	f7f7 fadd 	bl	800427c <__adddf3>
 800ccc2:	4604      	mov	r4, r0
 800ccc4:	460d      	mov	r5, r1
 800ccc6:	e006      	b.n	800ccd6 <atan+0x3e>
 800ccc8:	f1bb 0f00 	cmp.w	fp, #0
 800cccc:	f300 8123 	bgt.w	800cf16 <atan+0x27e>
 800ccd0:	a593      	add	r5, pc, #588	; (adr r5, 800cf20 <atan+0x288>)
 800ccd2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	4629      	mov	r1, r5
 800ccda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccde:	4bae      	ldr	r3, [pc, #696]	; (800cf98 <atan+0x300>)
 800cce0:	429e      	cmp	r6, r3
 800cce2:	dc11      	bgt.n	800cd08 <atan+0x70>
 800cce4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cce8:	429e      	cmp	r6, r3
 800ccea:	dc0a      	bgt.n	800cd02 <atan+0x6a>
 800ccec:	a38e      	add	r3, pc, #568	; (adr r3, 800cf28 <atan+0x290>)
 800ccee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf2:	f7f7 fac3 	bl	800427c <__adddf3>
 800ccf6:	4ba9      	ldr	r3, [pc, #676]	; (800cf9c <atan+0x304>)
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	f7f7 ff05 	bl	8004b08 <__aeabi_dcmpgt>
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	d1e9      	bne.n	800ccd6 <atan+0x3e>
 800cd02:	f04f 3aff 	mov.w	sl, #4294967295
 800cd06:	e027      	b.n	800cd58 <atan+0xc0>
 800cd08:	f000 f956 	bl	800cfb8 <fabs>
 800cd0c:	4ba4      	ldr	r3, [pc, #656]	; (800cfa0 <atan+0x308>)
 800cd0e:	429e      	cmp	r6, r3
 800cd10:	4604      	mov	r4, r0
 800cd12:	460d      	mov	r5, r1
 800cd14:	f300 80b8 	bgt.w	800ce88 <atan+0x1f0>
 800cd18:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cd1c:	429e      	cmp	r6, r3
 800cd1e:	f300 809c 	bgt.w	800ce5a <atan+0x1c2>
 800cd22:	4602      	mov	r2, r0
 800cd24:	460b      	mov	r3, r1
 800cd26:	f7f7 faa9 	bl	800427c <__adddf3>
 800cd2a:	4b9c      	ldr	r3, [pc, #624]	; (800cf9c <atan+0x304>)
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	f7f7 faa3 	bl	8004278 <__aeabi_dsub>
 800cd32:	2200      	movs	r2, #0
 800cd34:	4606      	mov	r6, r0
 800cd36:	460f      	mov	r7, r1
 800cd38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	4629      	mov	r1, r5
 800cd40:	f7f7 fa9c 	bl	800427c <__adddf3>
 800cd44:	4602      	mov	r2, r0
 800cd46:	460b      	mov	r3, r1
 800cd48:	4630      	mov	r0, r6
 800cd4a:	4639      	mov	r1, r7
 800cd4c:	f7f7 fd76 	bl	800483c <__aeabi_ddiv>
 800cd50:	f04f 0a00 	mov.w	sl, #0
 800cd54:	4604      	mov	r4, r0
 800cd56:	460d      	mov	r5, r1
 800cd58:	4622      	mov	r2, r4
 800cd5a:	462b      	mov	r3, r5
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	4629      	mov	r1, r5
 800cd60:	f7f7 fc42 	bl	80045e8 <__aeabi_dmul>
 800cd64:	4602      	mov	r2, r0
 800cd66:	460b      	mov	r3, r1
 800cd68:	4680      	mov	r8, r0
 800cd6a:	4689      	mov	r9, r1
 800cd6c:	f7f7 fc3c 	bl	80045e8 <__aeabi_dmul>
 800cd70:	a36f      	add	r3, pc, #444	; (adr r3, 800cf30 <atan+0x298>)
 800cd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd76:	4606      	mov	r6, r0
 800cd78:	460f      	mov	r7, r1
 800cd7a:	f7f7 fc35 	bl	80045e8 <__aeabi_dmul>
 800cd7e:	a36e      	add	r3, pc, #440	; (adr r3, 800cf38 <atan+0x2a0>)
 800cd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd84:	f7f7 fa7a 	bl	800427c <__adddf3>
 800cd88:	4632      	mov	r2, r6
 800cd8a:	463b      	mov	r3, r7
 800cd8c:	f7f7 fc2c 	bl	80045e8 <__aeabi_dmul>
 800cd90:	a36b      	add	r3, pc, #428	; (adr r3, 800cf40 <atan+0x2a8>)
 800cd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd96:	f7f7 fa71 	bl	800427c <__adddf3>
 800cd9a:	4632      	mov	r2, r6
 800cd9c:	463b      	mov	r3, r7
 800cd9e:	f7f7 fc23 	bl	80045e8 <__aeabi_dmul>
 800cda2:	a369      	add	r3, pc, #420	; (adr r3, 800cf48 <atan+0x2b0>)
 800cda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda8:	f7f7 fa68 	bl	800427c <__adddf3>
 800cdac:	4632      	mov	r2, r6
 800cdae:	463b      	mov	r3, r7
 800cdb0:	f7f7 fc1a 	bl	80045e8 <__aeabi_dmul>
 800cdb4:	a366      	add	r3, pc, #408	; (adr r3, 800cf50 <atan+0x2b8>)
 800cdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdba:	f7f7 fa5f 	bl	800427c <__adddf3>
 800cdbe:	4632      	mov	r2, r6
 800cdc0:	463b      	mov	r3, r7
 800cdc2:	f7f7 fc11 	bl	80045e8 <__aeabi_dmul>
 800cdc6:	a364      	add	r3, pc, #400	; (adr r3, 800cf58 <atan+0x2c0>)
 800cdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdcc:	f7f7 fa56 	bl	800427c <__adddf3>
 800cdd0:	4642      	mov	r2, r8
 800cdd2:	464b      	mov	r3, r9
 800cdd4:	f7f7 fc08 	bl	80045e8 <__aeabi_dmul>
 800cdd8:	a361      	add	r3, pc, #388	; (adr r3, 800cf60 <atan+0x2c8>)
 800cdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdde:	4680      	mov	r8, r0
 800cde0:	4689      	mov	r9, r1
 800cde2:	4630      	mov	r0, r6
 800cde4:	4639      	mov	r1, r7
 800cde6:	f7f7 fbff 	bl	80045e8 <__aeabi_dmul>
 800cdea:	a35f      	add	r3, pc, #380	; (adr r3, 800cf68 <atan+0x2d0>)
 800cdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf0:	f7f7 fa42 	bl	8004278 <__aeabi_dsub>
 800cdf4:	4632      	mov	r2, r6
 800cdf6:	463b      	mov	r3, r7
 800cdf8:	f7f7 fbf6 	bl	80045e8 <__aeabi_dmul>
 800cdfc:	a35c      	add	r3, pc, #368	; (adr r3, 800cf70 <atan+0x2d8>)
 800cdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce02:	f7f7 fa39 	bl	8004278 <__aeabi_dsub>
 800ce06:	4632      	mov	r2, r6
 800ce08:	463b      	mov	r3, r7
 800ce0a:	f7f7 fbed 	bl	80045e8 <__aeabi_dmul>
 800ce0e:	a35a      	add	r3, pc, #360	; (adr r3, 800cf78 <atan+0x2e0>)
 800ce10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce14:	f7f7 fa30 	bl	8004278 <__aeabi_dsub>
 800ce18:	4632      	mov	r2, r6
 800ce1a:	463b      	mov	r3, r7
 800ce1c:	f7f7 fbe4 	bl	80045e8 <__aeabi_dmul>
 800ce20:	a357      	add	r3, pc, #348	; (adr r3, 800cf80 <atan+0x2e8>)
 800ce22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce26:	f7f7 fa27 	bl	8004278 <__aeabi_dsub>
 800ce2a:	4632      	mov	r2, r6
 800ce2c:	463b      	mov	r3, r7
 800ce2e:	f7f7 fbdb 	bl	80045e8 <__aeabi_dmul>
 800ce32:	4602      	mov	r2, r0
 800ce34:	460b      	mov	r3, r1
 800ce36:	4640      	mov	r0, r8
 800ce38:	4649      	mov	r1, r9
 800ce3a:	f7f7 fa1f 	bl	800427c <__adddf3>
 800ce3e:	4622      	mov	r2, r4
 800ce40:	462b      	mov	r3, r5
 800ce42:	f7f7 fbd1 	bl	80045e8 <__aeabi_dmul>
 800ce46:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ce4a:	4602      	mov	r2, r0
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	d144      	bne.n	800ceda <atan+0x242>
 800ce50:	4620      	mov	r0, r4
 800ce52:	4629      	mov	r1, r5
 800ce54:	f7f7 fa10 	bl	8004278 <__aeabi_dsub>
 800ce58:	e733      	b.n	800ccc2 <atan+0x2a>
 800ce5a:	4b50      	ldr	r3, [pc, #320]	; (800cf9c <atan+0x304>)
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f7f7 fa0b 	bl	8004278 <__aeabi_dsub>
 800ce62:	4b4e      	ldr	r3, [pc, #312]	; (800cf9c <atan+0x304>)
 800ce64:	4606      	mov	r6, r0
 800ce66:	460f      	mov	r7, r1
 800ce68:	2200      	movs	r2, #0
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	4629      	mov	r1, r5
 800ce6e:	f7f7 fa05 	bl	800427c <__adddf3>
 800ce72:	4602      	mov	r2, r0
 800ce74:	460b      	mov	r3, r1
 800ce76:	4630      	mov	r0, r6
 800ce78:	4639      	mov	r1, r7
 800ce7a:	f7f7 fcdf 	bl	800483c <__aeabi_ddiv>
 800ce7e:	f04f 0a01 	mov.w	sl, #1
 800ce82:	4604      	mov	r4, r0
 800ce84:	460d      	mov	r5, r1
 800ce86:	e767      	b.n	800cd58 <atan+0xc0>
 800ce88:	4b46      	ldr	r3, [pc, #280]	; (800cfa4 <atan+0x30c>)
 800ce8a:	429e      	cmp	r6, r3
 800ce8c:	da1a      	bge.n	800cec4 <atan+0x22c>
 800ce8e:	4b46      	ldr	r3, [pc, #280]	; (800cfa8 <atan+0x310>)
 800ce90:	2200      	movs	r2, #0
 800ce92:	f7f7 f9f1 	bl	8004278 <__aeabi_dsub>
 800ce96:	4b44      	ldr	r3, [pc, #272]	; (800cfa8 <atan+0x310>)
 800ce98:	4606      	mov	r6, r0
 800ce9a:	460f      	mov	r7, r1
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	4620      	mov	r0, r4
 800cea0:	4629      	mov	r1, r5
 800cea2:	f7f7 fba1 	bl	80045e8 <__aeabi_dmul>
 800cea6:	4b3d      	ldr	r3, [pc, #244]	; (800cf9c <atan+0x304>)
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f7f7 f9e7 	bl	800427c <__adddf3>
 800ceae:	4602      	mov	r2, r0
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	4639      	mov	r1, r7
 800ceb6:	f7f7 fcc1 	bl	800483c <__aeabi_ddiv>
 800ceba:	f04f 0a02 	mov.w	sl, #2
 800cebe:	4604      	mov	r4, r0
 800cec0:	460d      	mov	r5, r1
 800cec2:	e749      	b.n	800cd58 <atan+0xc0>
 800cec4:	4602      	mov	r2, r0
 800cec6:	460b      	mov	r3, r1
 800cec8:	2000      	movs	r0, #0
 800ceca:	4938      	ldr	r1, [pc, #224]	; (800cfac <atan+0x314>)
 800cecc:	f7f7 fcb6 	bl	800483c <__aeabi_ddiv>
 800ced0:	f04f 0a03 	mov.w	sl, #3
 800ced4:	4604      	mov	r4, r0
 800ced6:	460d      	mov	r5, r1
 800ced8:	e73e      	b.n	800cd58 <atan+0xc0>
 800ceda:	4b35      	ldr	r3, [pc, #212]	; (800cfb0 <atan+0x318>)
 800cedc:	4e35      	ldr	r6, [pc, #212]	; (800cfb4 <atan+0x31c>)
 800cede:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee6:	f7f7 f9c7 	bl	8004278 <__aeabi_dsub>
 800ceea:	4622      	mov	r2, r4
 800ceec:	462b      	mov	r3, r5
 800ceee:	f7f7 f9c3 	bl	8004278 <__aeabi_dsub>
 800cef2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cef6:	4602      	mov	r2, r0
 800cef8:	460b      	mov	r3, r1
 800cefa:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cefe:	f7f7 f9bb 	bl	8004278 <__aeabi_dsub>
 800cf02:	f1bb 0f00 	cmp.w	fp, #0
 800cf06:	4604      	mov	r4, r0
 800cf08:	460d      	mov	r5, r1
 800cf0a:	f6bf aee4 	bge.w	800ccd6 <atan+0x3e>
 800cf0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf12:	461d      	mov	r5, r3
 800cf14:	e6df      	b.n	800ccd6 <atan+0x3e>
 800cf16:	a51c      	add	r5, pc, #112	; (adr r5, 800cf88 <atan+0x2f0>)
 800cf18:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cf1c:	e6db      	b.n	800ccd6 <atan+0x3e>
 800cf1e:	bf00      	nop
 800cf20:	54442d18 	.word	0x54442d18
 800cf24:	bff921fb 	.word	0xbff921fb
 800cf28:	8800759c 	.word	0x8800759c
 800cf2c:	7e37e43c 	.word	0x7e37e43c
 800cf30:	e322da11 	.word	0xe322da11
 800cf34:	3f90ad3a 	.word	0x3f90ad3a
 800cf38:	24760deb 	.word	0x24760deb
 800cf3c:	3fa97b4b 	.word	0x3fa97b4b
 800cf40:	a0d03d51 	.word	0xa0d03d51
 800cf44:	3fb10d66 	.word	0x3fb10d66
 800cf48:	c54c206e 	.word	0xc54c206e
 800cf4c:	3fb745cd 	.word	0x3fb745cd
 800cf50:	920083ff 	.word	0x920083ff
 800cf54:	3fc24924 	.word	0x3fc24924
 800cf58:	5555550d 	.word	0x5555550d
 800cf5c:	3fd55555 	.word	0x3fd55555
 800cf60:	2c6a6c2f 	.word	0x2c6a6c2f
 800cf64:	bfa2b444 	.word	0xbfa2b444
 800cf68:	52defd9a 	.word	0x52defd9a
 800cf6c:	3fadde2d 	.word	0x3fadde2d
 800cf70:	af749a6d 	.word	0xaf749a6d
 800cf74:	3fb3b0f2 	.word	0x3fb3b0f2
 800cf78:	fe231671 	.word	0xfe231671
 800cf7c:	3fbc71c6 	.word	0x3fbc71c6
 800cf80:	9998ebc4 	.word	0x9998ebc4
 800cf84:	3fc99999 	.word	0x3fc99999
 800cf88:	54442d18 	.word	0x54442d18
 800cf8c:	3ff921fb 	.word	0x3ff921fb
 800cf90:	440fffff 	.word	0x440fffff
 800cf94:	7ff00000 	.word	0x7ff00000
 800cf98:	3fdbffff 	.word	0x3fdbffff
 800cf9c:	3ff00000 	.word	0x3ff00000
 800cfa0:	3ff2ffff 	.word	0x3ff2ffff
 800cfa4:	40038000 	.word	0x40038000
 800cfa8:	3ff80000 	.word	0x3ff80000
 800cfac:	bff00000 	.word	0xbff00000
 800cfb0:	0800e720 	.word	0x0800e720
 800cfb4:	0800e700 	.word	0x0800e700

0800cfb8 <fabs>:
 800cfb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	4770      	bx	lr

0800cfc0 <__kernel_rem_pio2>:
 800cfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc4:	ed2d 8b02 	vpush	{d8}
 800cfc8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800cfcc:	f112 0f14 	cmn.w	r2, #20
 800cfd0:	9306      	str	r3, [sp, #24]
 800cfd2:	9104      	str	r1, [sp, #16]
 800cfd4:	4bc0      	ldr	r3, [pc, #768]	; (800d2d8 <__kernel_rem_pio2+0x318>)
 800cfd6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800cfd8:	9009      	str	r0, [sp, #36]	; 0x24
 800cfda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cfde:	9300      	str	r3, [sp, #0]
 800cfe0:	9b06      	ldr	r3, [sp, #24]
 800cfe2:	f103 33ff 	add.w	r3, r3, #4294967295
 800cfe6:	bfa8      	it	ge
 800cfe8:	1ed4      	subge	r4, r2, #3
 800cfea:	9305      	str	r3, [sp, #20]
 800cfec:	bfb2      	itee	lt
 800cfee:	2400      	movlt	r4, #0
 800cff0:	2318      	movge	r3, #24
 800cff2:	fb94 f4f3 	sdivge	r4, r4, r3
 800cff6:	f06f 0317 	mvn.w	r3, #23
 800cffa:	fb04 3303 	mla	r3, r4, r3, r3
 800cffe:	eb03 0a02 	add.w	sl, r3, r2
 800d002:	9b00      	ldr	r3, [sp, #0]
 800d004:	9a05      	ldr	r2, [sp, #20]
 800d006:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800d2d0 <__kernel_rem_pio2+0x310>
 800d00a:	eb03 0802 	add.w	r8, r3, r2
 800d00e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d010:	1aa7      	subs	r7, r4, r2
 800d012:	ae20      	add	r6, sp, #128	; 0x80
 800d014:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d018:	2500      	movs	r5, #0
 800d01a:	4545      	cmp	r5, r8
 800d01c:	dd13      	ble.n	800d046 <__kernel_rem_pio2+0x86>
 800d01e:	9b06      	ldr	r3, [sp, #24]
 800d020:	aa20      	add	r2, sp, #128	; 0x80
 800d022:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d026:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d02a:	f04f 0800 	mov.w	r8, #0
 800d02e:	9b00      	ldr	r3, [sp, #0]
 800d030:	4598      	cmp	r8, r3
 800d032:	dc31      	bgt.n	800d098 <__kernel_rem_pio2+0xd8>
 800d034:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800d2d0 <__kernel_rem_pio2+0x310>
 800d038:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d03c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d040:	462f      	mov	r7, r5
 800d042:	2600      	movs	r6, #0
 800d044:	e01b      	b.n	800d07e <__kernel_rem_pio2+0xbe>
 800d046:	42ef      	cmn	r7, r5
 800d048:	d407      	bmi.n	800d05a <__kernel_rem_pio2+0x9a>
 800d04a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d04e:	f7f7 fa61 	bl	8004514 <__aeabi_i2d>
 800d052:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d056:	3501      	adds	r5, #1
 800d058:	e7df      	b.n	800d01a <__kernel_rem_pio2+0x5a>
 800d05a:	ec51 0b18 	vmov	r0, r1, d8
 800d05e:	e7f8      	b.n	800d052 <__kernel_rem_pio2+0x92>
 800d060:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d064:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d068:	f7f7 fabe 	bl	80045e8 <__aeabi_dmul>
 800d06c:	4602      	mov	r2, r0
 800d06e:	460b      	mov	r3, r1
 800d070:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d074:	f7f7 f902 	bl	800427c <__adddf3>
 800d078:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d07c:	3601      	adds	r6, #1
 800d07e:	9b05      	ldr	r3, [sp, #20]
 800d080:	429e      	cmp	r6, r3
 800d082:	f1a7 0708 	sub.w	r7, r7, #8
 800d086:	ddeb      	ble.n	800d060 <__kernel_rem_pio2+0xa0>
 800d088:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d08c:	f108 0801 	add.w	r8, r8, #1
 800d090:	ecab 7b02 	vstmia	fp!, {d7}
 800d094:	3508      	adds	r5, #8
 800d096:	e7ca      	b.n	800d02e <__kernel_rem_pio2+0x6e>
 800d098:	9b00      	ldr	r3, [sp, #0]
 800d09a:	aa0c      	add	r2, sp, #48	; 0x30
 800d09c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d0a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d0a2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d0a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d0a8:	9c00      	ldr	r4, [sp, #0]
 800d0aa:	930a      	str	r3, [sp, #40]	; 0x28
 800d0ac:	00e3      	lsls	r3, r4, #3
 800d0ae:	9308      	str	r3, [sp, #32]
 800d0b0:	ab98      	add	r3, sp, #608	; 0x260
 800d0b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d0b6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d0ba:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800d0be:	ab70      	add	r3, sp, #448	; 0x1c0
 800d0c0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d0c4:	46c3      	mov	fp, r8
 800d0c6:	46a1      	mov	r9, r4
 800d0c8:	f1b9 0f00 	cmp.w	r9, #0
 800d0cc:	f1a5 0508 	sub.w	r5, r5, #8
 800d0d0:	dc70      	bgt.n	800d1b4 <__kernel_rem_pio2+0x1f4>
 800d0d2:	4652      	mov	r2, sl
 800d0d4:	4630      	mov	r0, r6
 800d0d6:	4639      	mov	r1, r7
 800d0d8:	f000 fab6 	bl	800d648 <scalbn>
 800d0dc:	2200      	movs	r2, #0
 800d0de:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d0e2:	4606      	mov	r6, r0
 800d0e4:	460f      	mov	r7, r1
 800d0e6:	f7f7 fa7f 	bl	80045e8 <__aeabi_dmul>
 800d0ea:	f000 fb25 	bl	800d738 <floor>
 800d0ee:	4b7b      	ldr	r3, [pc, #492]	; (800d2dc <__kernel_rem_pio2+0x31c>)
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f7f7 fa79 	bl	80045e8 <__aeabi_dmul>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	460b      	mov	r3, r1
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	4639      	mov	r1, r7
 800d0fe:	f7f7 f8bb 	bl	8004278 <__aeabi_dsub>
 800d102:	460f      	mov	r7, r1
 800d104:	4606      	mov	r6, r0
 800d106:	f7f7 fd09 	bl	8004b1c <__aeabi_d2iz>
 800d10a:	9002      	str	r0, [sp, #8]
 800d10c:	f7f7 fa02 	bl	8004514 <__aeabi_i2d>
 800d110:	4602      	mov	r2, r0
 800d112:	460b      	mov	r3, r1
 800d114:	4630      	mov	r0, r6
 800d116:	4639      	mov	r1, r7
 800d118:	f7f7 f8ae 	bl	8004278 <__aeabi_dsub>
 800d11c:	f1ba 0f00 	cmp.w	sl, #0
 800d120:	4606      	mov	r6, r0
 800d122:	460f      	mov	r7, r1
 800d124:	dd6d      	ble.n	800d202 <__kernel_rem_pio2+0x242>
 800d126:	1e61      	subs	r1, r4, #1
 800d128:	ab0c      	add	r3, sp, #48	; 0x30
 800d12a:	9d02      	ldr	r5, [sp, #8]
 800d12c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d130:	f1ca 0018 	rsb	r0, sl, #24
 800d134:	fa43 f200 	asr.w	r2, r3, r0
 800d138:	4415      	add	r5, r2
 800d13a:	4082      	lsls	r2, r0
 800d13c:	1a9b      	subs	r3, r3, r2
 800d13e:	aa0c      	add	r2, sp, #48	; 0x30
 800d140:	9502      	str	r5, [sp, #8]
 800d142:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d146:	f1ca 0217 	rsb	r2, sl, #23
 800d14a:	fa43 fb02 	asr.w	fp, r3, r2
 800d14e:	f1bb 0f00 	cmp.w	fp, #0
 800d152:	dd65      	ble.n	800d220 <__kernel_rem_pio2+0x260>
 800d154:	9b02      	ldr	r3, [sp, #8]
 800d156:	2200      	movs	r2, #0
 800d158:	3301      	adds	r3, #1
 800d15a:	9302      	str	r3, [sp, #8]
 800d15c:	4615      	mov	r5, r2
 800d15e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d162:	4294      	cmp	r4, r2
 800d164:	f300 809f 	bgt.w	800d2a6 <__kernel_rem_pio2+0x2e6>
 800d168:	f1ba 0f00 	cmp.w	sl, #0
 800d16c:	dd07      	ble.n	800d17e <__kernel_rem_pio2+0x1be>
 800d16e:	f1ba 0f01 	cmp.w	sl, #1
 800d172:	f000 80bf 	beq.w	800d2f4 <__kernel_rem_pio2+0x334>
 800d176:	f1ba 0f02 	cmp.w	sl, #2
 800d17a:	f000 80c5 	beq.w	800d308 <__kernel_rem_pio2+0x348>
 800d17e:	f1bb 0f02 	cmp.w	fp, #2
 800d182:	d14d      	bne.n	800d220 <__kernel_rem_pio2+0x260>
 800d184:	4632      	mov	r2, r6
 800d186:	463b      	mov	r3, r7
 800d188:	4955      	ldr	r1, [pc, #340]	; (800d2e0 <__kernel_rem_pio2+0x320>)
 800d18a:	2000      	movs	r0, #0
 800d18c:	f7f7 f874 	bl	8004278 <__aeabi_dsub>
 800d190:	4606      	mov	r6, r0
 800d192:	460f      	mov	r7, r1
 800d194:	2d00      	cmp	r5, #0
 800d196:	d043      	beq.n	800d220 <__kernel_rem_pio2+0x260>
 800d198:	4652      	mov	r2, sl
 800d19a:	4951      	ldr	r1, [pc, #324]	; (800d2e0 <__kernel_rem_pio2+0x320>)
 800d19c:	2000      	movs	r0, #0
 800d19e:	f000 fa53 	bl	800d648 <scalbn>
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	4630      	mov	r0, r6
 800d1a8:	4639      	mov	r1, r7
 800d1aa:	f7f7 f865 	bl	8004278 <__aeabi_dsub>
 800d1ae:	4606      	mov	r6, r0
 800d1b0:	460f      	mov	r7, r1
 800d1b2:	e035      	b.n	800d220 <__kernel_rem_pio2+0x260>
 800d1b4:	4b4b      	ldr	r3, [pc, #300]	; (800d2e4 <__kernel_rem_pio2+0x324>)
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	4639      	mov	r1, r7
 800d1bc:	f7f7 fa14 	bl	80045e8 <__aeabi_dmul>
 800d1c0:	f7f7 fcac 	bl	8004b1c <__aeabi_d2iz>
 800d1c4:	f7f7 f9a6 	bl	8004514 <__aeabi_i2d>
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	460b      	mov	r3, r1
 800d1cc:	ec43 2b18 	vmov	d8, r2, r3
 800d1d0:	4b45      	ldr	r3, [pc, #276]	; (800d2e8 <__kernel_rem_pio2+0x328>)
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f7f7 fa08 	bl	80045e8 <__aeabi_dmul>
 800d1d8:	4602      	mov	r2, r0
 800d1da:	460b      	mov	r3, r1
 800d1dc:	4630      	mov	r0, r6
 800d1de:	4639      	mov	r1, r7
 800d1e0:	f7f7 f84a 	bl	8004278 <__aeabi_dsub>
 800d1e4:	f7f7 fc9a 	bl	8004b1c <__aeabi_d2iz>
 800d1e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d1ec:	f84b 0b04 	str.w	r0, [fp], #4
 800d1f0:	ec51 0b18 	vmov	r0, r1, d8
 800d1f4:	f7f7 f842 	bl	800427c <__adddf3>
 800d1f8:	f109 39ff 	add.w	r9, r9, #4294967295
 800d1fc:	4606      	mov	r6, r0
 800d1fe:	460f      	mov	r7, r1
 800d200:	e762      	b.n	800d0c8 <__kernel_rem_pio2+0x108>
 800d202:	d106      	bne.n	800d212 <__kernel_rem_pio2+0x252>
 800d204:	1e63      	subs	r3, r4, #1
 800d206:	aa0c      	add	r2, sp, #48	; 0x30
 800d208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d20c:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800d210:	e79d      	b.n	800d14e <__kernel_rem_pio2+0x18e>
 800d212:	4b36      	ldr	r3, [pc, #216]	; (800d2ec <__kernel_rem_pio2+0x32c>)
 800d214:	2200      	movs	r2, #0
 800d216:	f7f7 fc6d 	bl	8004af4 <__aeabi_dcmpge>
 800d21a:	2800      	cmp	r0, #0
 800d21c:	d140      	bne.n	800d2a0 <__kernel_rem_pio2+0x2e0>
 800d21e:	4683      	mov	fp, r0
 800d220:	2200      	movs	r2, #0
 800d222:	2300      	movs	r3, #0
 800d224:	4630      	mov	r0, r6
 800d226:	4639      	mov	r1, r7
 800d228:	f7f7 fc46 	bl	8004ab8 <__aeabi_dcmpeq>
 800d22c:	2800      	cmp	r0, #0
 800d22e:	f000 80bf 	beq.w	800d3b0 <__kernel_rem_pio2+0x3f0>
 800d232:	1e65      	subs	r5, r4, #1
 800d234:	462b      	mov	r3, r5
 800d236:	2200      	movs	r2, #0
 800d238:	9900      	ldr	r1, [sp, #0]
 800d23a:	428b      	cmp	r3, r1
 800d23c:	da6b      	bge.n	800d316 <__kernel_rem_pio2+0x356>
 800d23e:	2a00      	cmp	r2, #0
 800d240:	f000 8088 	beq.w	800d354 <__kernel_rem_pio2+0x394>
 800d244:	ab0c      	add	r3, sp, #48	; 0x30
 800d246:	f1aa 0a18 	sub.w	sl, sl, #24
 800d24a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	f000 80ac 	beq.w	800d3ac <__kernel_rem_pio2+0x3ec>
 800d254:	4652      	mov	r2, sl
 800d256:	4922      	ldr	r1, [pc, #136]	; (800d2e0 <__kernel_rem_pio2+0x320>)
 800d258:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800d2e4 <__kernel_rem_pio2+0x324>
 800d25c:	2000      	movs	r0, #0
 800d25e:	f000 f9f3 	bl	800d648 <scalbn>
 800d262:	1c6b      	adds	r3, r5, #1
 800d264:	00da      	lsls	r2, r3, #3
 800d266:	9205      	str	r2, [sp, #20]
 800d268:	aa70      	add	r2, sp, #448	; 0x1c0
 800d26a:	4606      	mov	r6, r0
 800d26c:	460f      	mov	r7, r1
 800d26e:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800d272:	462c      	mov	r4, r5
 800d274:	f04f 0800 	mov.w	r8, #0
 800d278:	2c00      	cmp	r4, #0
 800d27a:	f280 80cf 	bge.w	800d41c <__kernel_rem_pio2+0x45c>
 800d27e:	462c      	mov	r4, r5
 800d280:	2c00      	cmp	r4, #0
 800d282:	f2c0 80fd 	blt.w	800d480 <__kernel_rem_pio2+0x4c0>
 800d286:	4b1a      	ldr	r3, [pc, #104]	; (800d2f0 <__kernel_rem_pio2+0x330>)
 800d288:	461e      	mov	r6, r3
 800d28a:	ab70      	add	r3, sp, #448	; 0x1c0
 800d28c:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800d290:	1b2b      	subs	r3, r5, r4
 800d292:	f04f 0900 	mov.w	r9, #0
 800d296:	f04f 0a00 	mov.w	sl, #0
 800d29a:	2700      	movs	r7, #0
 800d29c:	9306      	str	r3, [sp, #24]
 800d29e:	e0e1      	b.n	800d464 <__kernel_rem_pio2+0x4a4>
 800d2a0:	f04f 0b02 	mov.w	fp, #2
 800d2a4:	e756      	b.n	800d154 <__kernel_rem_pio2+0x194>
 800d2a6:	f8d8 3000 	ldr.w	r3, [r8]
 800d2aa:	b955      	cbnz	r5, 800d2c2 <__kernel_rem_pio2+0x302>
 800d2ac:	b123      	cbz	r3, 800d2b8 <__kernel_rem_pio2+0x2f8>
 800d2ae:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d2b2:	f8c8 3000 	str.w	r3, [r8]
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	3201      	adds	r2, #1
 800d2ba:	f108 0804 	add.w	r8, r8, #4
 800d2be:	461d      	mov	r5, r3
 800d2c0:	e74f      	b.n	800d162 <__kernel_rem_pio2+0x1a2>
 800d2c2:	1acb      	subs	r3, r1, r3
 800d2c4:	f8c8 3000 	str.w	r3, [r8]
 800d2c8:	462b      	mov	r3, r5
 800d2ca:	e7f5      	b.n	800d2b8 <__kernel_rem_pio2+0x2f8>
 800d2cc:	f3af 8000 	nop.w
	...
 800d2d8:	0800e780 	.word	0x0800e780
 800d2dc:	40200000 	.word	0x40200000
 800d2e0:	3ff00000 	.word	0x3ff00000
 800d2e4:	3e700000 	.word	0x3e700000
 800d2e8:	41700000 	.word	0x41700000
 800d2ec:	3fe00000 	.word	0x3fe00000
 800d2f0:	0800e740 	.word	0x0800e740
 800d2f4:	1e62      	subs	r2, r4, #1
 800d2f6:	ab0c      	add	r3, sp, #48	; 0x30
 800d2f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2fc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d300:	a90c      	add	r1, sp, #48	; 0x30
 800d302:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d306:	e73a      	b.n	800d17e <__kernel_rem_pio2+0x1be>
 800d308:	1e62      	subs	r2, r4, #1
 800d30a:	ab0c      	add	r3, sp, #48	; 0x30
 800d30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d310:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d314:	e7f4      	b.n	800d300 <__kernel_rem_pio2+0x340>
 800d316:	a90c      	add	r1, sp, #48	; 0x30
 800d318:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d31c:	3b01      	subs	r3, #1
 800d31e:	430a      	orrs	r2, r1
 800d320:	e78a      	b.n	800d238 <__kernel_rem_pio2+0x278>
 800d322:	3301      	adds	r3, #1
 800d324:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d328:	2900      	cmp	r1, #0
 800d32a:	d0fa      	beq.n	800d322 <__kernel_rem_pio2+0x362>
 800d32c:	9a08      	ldr	r2, [sp, #32]
 800d32e:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800d332:	446a      	add	r2, sp
 800d334:	3a98      	subs	r2, #152	; 0x98
 800d336:	9208      	str	r2, [sp, #32]
 800d338:	9a06      	ldr	r2, [sp, #24]
 800d33a:	a920      	add	r1, sp, #128	; 0x80
 800d33c:	18a2      	adds	r2, r4, r2
 800d33e:	18e3      	adds	r3, r4, r3
 800d340:	f104 0801 	add.w	r8, r4, #1
 800d344:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800d348:	9302      	str	r3, [sp, #8]
 800d34a:	9b02      	ldr	r3, [sp, #8]
 800d34c:	4543      	cmp	r3, r8
 800d34e:	da04      	bge.n	800d35a <__kernel_rem_pio2+0x39a>
 800d350:	461c      	mov	r4, r3
 800d352:	e6ab      	b.n	800d0ac <__kernel_rem_pio2+0xec>
 800d354:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d356:	2301      	movs	r3, #1
 800d358:	e7e4      	b.n	800d324 <__kernel_rem_pio2+0x364>
 800d35a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d35c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d360:	f7f7 f8d8 	bl	8004514 <__aeabi_i2d>
 800d364:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d36a:	46ab      	mov	fp, r5
 800d36c:	461c      	mov	r4, r3
 800d36e:	f04f 0900 	mov.w	r9, #0
 800d372:	2600      	movs	r6, #0
 800d374:	2700      	movs	r7, #0
 800d376:	9b05      	ldr	r3, [sp, #20]
 800d378:	4599      	cmp	r9, r3
 800d37a:	dd06      	ble.n	800d38a <__kernel_rem_pio2+0x3ca>
 800d37c:	9b08      	ldr	r3, [sp, #32]
 800d37e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d382:	f108 0801 	add.w	r8, r8, #1
 800d386:	9308      	str	r3, [sp, #32]
 800d388:	e7df      	b.n	800d34a <__kernel_rem_pio2+0x38a>
 800d38a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d38e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d392:	f7f7 f929 	bl	80045e8 <__aeabi_dmul>
 800d396:	4602      	mov	r2, r0
 800d398:	460b      	mov	r3, r1
 800d39a:	4630      	mov	r0, r6
 800d39c:	4639      	mov	r1, r7
 800d39e:	f7f6 ff6d 	bl	800427c <__adddf3>
 800d3a2:	f109 0901 	add.w	r9, r9, #1
 800d3a6:	4606      	mov	r6, r0
 800d3a8:	460f      	mov	r7, r1
 800d3aa:	e7e4      	b.n	800d376 <__kernel_rem_pio2+0x3b6>
 800d3ac:	3d01      	subs	r5, #1
 800d3ae:	e749      	b.n	800d244 <__kernel_rem_pio2+0x284>
 800d3b0:	f1ca 0200 	rsb	r2, sl, #0
 800d3b4:	4630      	mov	r0, r6
 800d3b6:	4639      	mov	r1, r7
 800d3b8:	f000 f946 	bl	800d648 <scalbn>
 800d3bc:	4b9f      	ldr	r3, [pc, #636]	; (800d63c <__kernel_rem_pio2+0x67c>)
 800d3be:	2200      	movs	r2, #0
 800d3c0:	4606      	mov	r6, r0
 800d3c2:	460f      	mov	r7, r1
 800d3c4:	f7f7 fb96 	bl	8004af4 <__aeabi_dcmpge>
 800d3c8:	b1f8      	cbz	r0, 800d40a <__kernel_rem_pio2+0x44a>
 800d3ca:	4b9d      	ldr	r3, [pc, #628]	; (800d640 <__kernel_rem_pio2+0x680>)
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	4630      	mov	r0, r6
 800d3d0:	4639      	mov	r1, r7
 800d3d2:	f7f7 f909 	bl	80045e8 <__aeabi_dmul>
 800d3d6:	f7f7 fba1 	bl	8004b1c <__aeabi_d2iz>
 800d3da:	4680      	mov	r8, r0
 800d3dc:	f7f7 f89a 	bl	8004514 <__aeabi_i2d>
 800d3e0:	4b96      	ldr	r3, [pc, #600]	; (800d63c <__kernel_rem_pio2+0x67c>)
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	f7f7 f900 	bl	80045e8 <__aeabi_dmul>
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	4639      	mov	r1, r7
 800d3ee:	4630      	mov	r0, r6
 800d3f0:	f7f6 ff42 	bl	8004278 <__aeabi_dsub>
 800d3f4:	f7f7 fb92 	bl	8004b1c <__aeabi_d2iz>
 800d3f8:	1c65      	adds	r5, r4, #1
 800d3fa:	ab0c      	add	r3, sp, #48	; 0x30
 800d3fc:	f10a 0a18 	add.w	sl, sl, #24
 800d400:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d404:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d408:	e724      	b.n	800d254 <__kernel_rem_pio2+0x294>
 800d40a:	4630      	mov	r0, r6
 800d40c:	4639      	mov	r1, r7
 800d40e:	f7f7 fb85 	bl	8004b1c <__aeabi_d2iz>
 800d412:	ab0c      	add	r3, sp, #48	; 0x30
 800d414:	4625      	mov	r5, r4
 800d416:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d41a:	e71b      	b.n	800d254 <__kernel_rem_pio2+0x294>
 800d41c:	ab0c      	add	r3, sp, #48	; 0x30
 800d41e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d422:	f7f7 f877 	bl	8004514 <__aeabi_i2d>
 800d426:	4632      	mov	r2, r6
 800d428:	463b      	mov	r3, r7
 800d42a:	f7f7 f8dd 	bl	80045e8 <__aeabi_dmul>
 800d42e:	4642      	mov	r2, r8
 800d430:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800d434:	464b      	mov	r3, r9
 800d436:	4630      	mov	r0, r6
 800d438:	4639      	mov	r1, r7
 800d43a:	f7f7 f8d5 	bl	80045e8 <__aeabi_dmul>
 800d43e:	3c01      	subs	r4, #1
 800d440:	4606      	mov	r6, r0
 800d442:	460f      	mov	r7, r1
 800d444:	e718      	b.n	800d278 <__kernel_rem_pio2+0x2b8>
 800d446:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800d44a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800d44e:	f7f7 f8cb 	bl	80045e8 <__aeabi_dmul>
 800d452:	4602      	mov	r2, r0
 800d454:	460b      	mov	r3, r1
 800d456:	4648      	mov	r0, r9
 800d458:	4651      	mov	r1, sl
 800d45a:	f7f6 ff0f 	bl	800427c <__adddf3>
 800d45e:	3701      	adds	r7, #1
 800d460:	4681      	mov	r9, r0
 800d462:	468a      	mov	sl, r1
 800d464:	9b00      	ldr	r3, [sp, #0]
 800d466:	429f      	cmp	r7, r3
 800d468:	dc02      	bgt.n	800d470 <__kernel_rem_pio2+0x4b0>
 800d46a:	9b06      	ldr	r3, [sp, #24]
 800d46c:	429f      	cmp	r7, r3
 800d46e:	ddea      	ble.n	800d446 <__kernel_rem_pio2+0x486>
 800d470:	9a06      	ldr	r2, [sp, #24]
 800d472:	ab48      	add	r3, sp, #288	; 0x120
 800d474:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800d478:	e9c6 9a00 	strd	r9, sl, [r6]
 800d47c:	3c01      	subs	r4, #1
 800d47e:	e6ff      	b.n	800d280 <__kernel_rem_pio2+0x2c0>
 800d480:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d482:	2b02      	cmp	r3, #2
 800d484:	dc0b      	bgt.n	800d49e <__kernel_rem_pio2+0x4de>
 800d486:	2b00      	cmp	r3, #0
 800d488:	dc39      	bgt.n	800d4fe <__kernel_rem_pio2+0x53e>
 800d48a:	d05d      	beq.n	800d548 <__kernel_rem_pio2+0x588>
 800d48c:	9b02      	ldr	r3, [sp, #8]
 800d48e:	f003 0007 	and.w	r0, r3, #7
 800d492:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d496:	ecbd 8b02 	vpop	{d8}
 800d49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d49e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d4a0:	2b03      	cmp	r3, #3
 800d4a2:	d1f3      	bne.n	800d48c <__kernel_rem_pio2+0x4cc>
 800d4a4:	9b05      	ldr	r3, [sp, #20]
 800d4a6:	9500      	str	r5, [sp, #0]
 800d4a8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800d4ac:	eb0d 0403 	add.w	r4, sp, r3
 800d4b0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800d4b4:	46a2      	mov	sl, r4
 800d4b6:	9b00      	ldr	r3, [sp, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	f1aa 0a08 	sub.w	sl, sl, #8
 800d4be:	dc69      	bgt.n	800d594 <__kernel_rem_pio2+0x5d4>
 800d4c0:	46aa      	mov	sl, r5
 800d4c2:	f1ba 0f01 	cmp.w	sl, #1
 800d4c6:	f1a4 0408 	sub.w	r4, r4, #8
 800d4ca:	f300 8083 	bgt.w	800d5d4 <__kernel_rem_pio2+0x614>
 800d4ce:	9c05      	ldr	r4, [sp, #20]
 800d4d0:	ab48      	add	r3, sp, #288	; 0x120
 800d4d2:	441c      	add	r4, r3
 800d4d4:	2000      	movs	r0, #0
 800d4d6:	2100      	movs	r1, #0
 800d4d8:	2d01      	cmp	r5, #1
 800d4da:	f300 809a 	bgt.w	800d612 <__kernel_rem_pio2+0x652>
 800d4de:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800d4e2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800d4e6:	f1bb 0f00 	cmp.w	fp, #0
 800d4ea:	f040 8098 	bne.w	800d61e <__kernel_rem_pio2+0x65e>
 800d4ee:	9b04      	ldr	r3, [sp, #16]
 800d4f0:	e9c3 7800 	strd	r7, r8, [r3]
 800d4f4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d4f8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d4fc:	e7c6      	b.n	800d48c <__kernel_rem_pio2+0x4cc>
 800d4fe:	9e05      	ldr	r6, [sp, #20]
 800d500:	ab48      	add	r3, sp, #288	; 0x120
 800d502:	441e      	add	r6, r3
 800d504:	462c      	mov	r4, r5
 800d506:	2000      	movs	r0, #0
 800d508:	2100      	movs	r1, #0
 800d50a:	2c00      	cmp	r4, #0
 800d50c:	da33      	bge.n	800d576 <__kernel_rem_pio2+0x5b6>
 800d50e:	f1bb 0f00 	cmp.w	fp, #0
 800d512:	d036      	beq.n	800d582 <__kernel_rem_pio2+0x5c2>
 800d514:	4602      	mov	r2, r0
 800d516:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d51a:	9c04      	ldr	r4, [sp, #16]
 800d51c:	e9c4 2300 	strd	r2, r3, [r4]
 800d520:	4602      	mov	r2, r0
 800d522:	460b      	mov	r3, r1
 800d524:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d528:	f7f6 fea6 	bl	8004278 <__aeabi_dsub>
 800d52c:	ae4a      	add	r6, sp, #296	; 0x128
 800d52e:	2401      	movs	r4, #1
 800d530:	42a5      	cmp	r5, r4
 800d532:	da29      	bge.n	800d588 <__kernel_rem_pio2+0x5c8>
 800d534:	f1bb 0f00 	cmp.w	fp, #0
 800d538:	d002      	beq.n	800d540 <__kernel_rem_pio2+0x580>
 800d53a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d53e:	4619      	mov	r1, r3
 800d540:	9b04      	ldr	r3, [sp, #16]
 800d542:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d546:	e7a1      	b.n	800d48c <__kernel_rem_pio2+0x4cc>
 800d548:	9c05      	ldr	r4, [sp, #20]
 800d54a:	ab48      	add	r3, sp, #288	; 0x120
 800d54c:	441c      	add	r4, r3
 800d54e:	2000      	movs	r0, #0
 800d550:	2100      	movs	r1, #0
 800d552:	2d00      	cmp	r5, #0
 800d554:	da09      	bge.n	800d56a <__kernel_rem_pio2+0x5aa>
 800d556:	f1bb 0f00 	cmp.w	fp, #0
 800d55a:	d002      	beq.n	800d562 <__kernel_rem_pio2+0x5a2>
 800d55c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d560:	4619      	mov	r1, r3
 800d562:	9b04      	ldr	r3, [sp, #16]
 800d564:	e9c3 0100 	strd	r0, r1, [r3]
 800d568:	e790      	b.n	800d48c <__kernel_rem_pio2+0x4cc>
 800d56a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d56e:	f7f6 fe85 	bl	800427c <__adddf3>
 800d572:	3d01      	subs	r5, #1
 800d574:	e7ed      	b.n	800d552 <__kernel_rem_pio2+0x592>
 800d576:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800d57a:	f7f6 fe7f 	bl	800427c <__adddf3>
 800d57e:	3c01      	subs	r4, #1
 800d580:	e7c3      	b.n	800d50a <__kernel_rem_pio2+0x54a>
 800d582:	4602      	mov	r2, r0
 800d584:	460b      	mov	r3, r1
 800d586:	e7c8      	b.n	800d51a <__kernel_rem_pio2+0x55a>
 800d588:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d58c:	f7f6 fe76 	bl	800427c <__adddf3>
 800d590:	3401      	adds	r4, #1
 800d592:	e7cd      	b.n	800d530 <__kernel_rem_pio2+0x570>
 800d594:	e9da 8900 	ldrd	r8, r9, [sl]
 800d598:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d59c:	9b00      	ldr	r3, [sp, #0]
 800d59e:	3b01      	subs	r3, #1
 800d5a0:	9300      	str	r3, [sp, #0]
 800d5a2:	4632      	mov	r2, r6
 800d5a4:	463b      	mov	r3, r7
 800d5a6:	4640      	mov	r0, r8
 800d5a8:	4649      	mov	r1, r9
 800d5aa:	f7f6 fe67 	bl	800427c <__adddf3>
 800d5ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	460b      	mov	r3, r1
 800d5b6:	4640      	mov	r0, r8
 800d5b8:	4649      	mov	r1, r9
 800d5ba:	f7f6 fe5d 	bl	8004278 <__aeabi_dsub>
 800d5be:	4632      	mov	r2, r6
 800d5c0:	463b      	mov	r3, r7
 800d5c2:	f7f6 fe5b 	bl	800427c <__adddf3>
 800d5c6:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d5ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d5ce:	ed8a 7b00 	vstr	d7, [sl]
 800d5d2:	e770      	b.n	800d4b6 <__kernel_rem_pio2+0x4f6>
 800d5d4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d5d8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d5dc:	4640      	mov	r0, r8
 800d5de:	4632      	mov	r2, r6
 800d5e0:	463b      	mov	r3, r7
 800d5e2:	4649      	mov	r1, r9
 800d5e4:	f7f6 fe4a 	bl	800427c <__adddf3>
 800d5e8:	e9cd 0100 	strd	r0, r1, [sp]
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	460b      	mov	r3, r1
 800d5f0:	4640      	mov	r0, r8
 800d5f2:	4649      	mov	r1, r9
 800d5f4:	f7f6 fe40 	bl	8004278 <__aeabi_dsub>
 800d5f8:	4632      	mov	r2, r6
 800d5fa:	463b      	mov	r3, r7
 800d5fc:	f7f6 fe3e 	bl	800427c <__adddf3>
 800d600:	ed9d 7b00 	vldr	d7, [sp]
 800d604:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d608:	ed84 7b00 	vstr	d7, [r4]
 800d60c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d610:	e757      	b.n	800d4c2 <__kernel_rem_pio2+0x502>
 800d612:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d616:	f7f6 fe31 	bl	800427c <__adddf3>
 800d61a:	3d01      	subs	r5, #1
 800d61c:	e75c      	b.n	800d4d8 <__kernel_rem_pio2+0x518>
 800d61e:	9b04      	ldr	r3, [sp, #16]
 800d620:	9a04      	ldr	r2, [sp, #16]
 800d622:	601f      	str	r7, [r3, #0]
 800d624:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800d628:	605c      	str	r4, [r3, #4]
 800d62a:	609d      	str	r5, [r3, #8]
 800d62c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d630:	60d3      	str	r3, [r2, #12]
 800d632:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d636:	6110      	str	r0, [r2, #16]
 800d638:	6153      	str	r3, [r2, #20]
 800d63a:	e727      	b.n	800d48c <__kernel_rem_pio2+0x4cc>
 800d63c:	41700000 	.word	0x41700000
 800d640:	3e700000 	.word	0x3e700000
 800d644:	00000000 	.word	0x00000000

0800d648 <scalbn>:
 800d648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d64a:	4616      	mov	r6, r2
 800d64c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d650:	4604      	mov	r4, r0
 800d652:	460d      	mov	r5, r1
 800d654:	460b      	mov	r3, r1
 800d656:	b982      	cbnz	r2, 800d67a <scalbn+0x32>
 800d658:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d65c:	4303      	orrs	r3, r0
 800d65e:	d039      	beq.n	800d6d4 <scalbn+0x8c>
 800d660:	4b31      	ldr	r3, [pc, #196]	; (800d728 <scalbn+0xe0>)
 800d662:	2200      	movs	r2, #0
 800d664:	f7f6 ffc0 	bl	80045e8 <__aeabi_dmul>
 800d668:	4b30      	ldr	r3, [pc, #192]	; (800d72c <scalbn+0xe4>)
 800d66a:	429e      	cmp	r6, r3
 800d66c:	4604      	mov	r4, r0
 800d66e:	460d      	mov	r5, r1
 800d670:	da0d      	bge.n	800d68e <scalbn+0x46>
 800d672:	a325      	add	r3, pc, #148	; (adr r3, 800d708 <scalbn+0xc0>)
 800d674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d678:	e01c      	b.n	800d6b4 <scalbn+0x6c>
 800d67a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800d67e:	42ba      	cmp	r2, r7
 800d680:	d109      	bne.n	800d696 <scalbn+0x4e>
 800d682:	4602      	mov	r2, r0
 800d684:	f7f6 fdfa 	bl	800427c <__adddf3>
 800d688:	4604      	mov	r4, r0
 800d68a:	460d      	mov	r5, r1
 800d68c:	e022      	b.n	800d6d4 <scalbn+0x8c>
 800d68e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d692:	460b      	mov	r3, r1
 800d694:	3a36      	subs	r2, #54	; 0x36
 800d696:	f24c 3150 	movw	r1, #50000	; 0xc350
 800d69a:	428e      	cmp	r6, r1
 800d69c:	dd0d      	ble.n	800d6ba <scalbn+0x72>
 800d69e:	2d00      	cmp	r5, #0
 800d6a0:	a11b      	add	r1, pc, #108	; (adr r1, 800d710 <scalbn+0xc8>)
 800d6a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6a6:	da02      	bge.n	800d6ae <scalbn+0x66>
 800d6a8:	a11b      	add	r1, pc, #108	; (adr r1, 800d718 <scalbn+0xd0>)
 800d6aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6ae:	a318      	add	r3, pc, #96	; (adr r3, 800d710 <scalbn+0xc8>)
 800d6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b4:	f7f6 ff98 	bl	80045e8 <__aeabi_dmul>
 800d6b8:	e7e6      	b.n	800d688 <scalbn+0x40>
 800d6ba:	4432      	add	r2, r6
 800d6bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d6c0:	428a      	cmp	r2, r1
 800d6c2:	dcec      	bgt.n	800d69e <scalbn+0x56>
 800d6c4:	2a00      	cmp	r2, #0
 800d6c6:	dd08      	ble.n	800d6da <scalbn+0x92>
 800d6c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d6cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d6d0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	4629      	mov	r1, r5
 800d6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6da:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d6de:	da08      	bge.n	800d6f2 <scalbn+0xaa>
 800d6e0:	2d00      	cmp	r5, #0
 800d6e2:	a109      	add	r1, pc, #36	; (adr r1, 800d708 <scalbn+0xc0>)
 800d6e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6e8:	dac3      	bge.n	800d672 <scalbn+0x2a>
 800d6ea:	a10d      	add	r1, pc, #52	; (adr r1, 800d720 <scalbn+0xd8>)
 800d6ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6f0:	e7bf      	b.n	800d672 <scalbn+0x2a>
 800d6f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d6f6:	3236      	adds	r2, #54	; 0x36
 800d6f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d6fc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d700:	4620      	mov	r0, r4
 800d702:	4b0b      	ldr	r3, [pc, #44]	; (800d730 <scalbn+0xe8>)
 800d704:	2200      	movs	r2, #0
 800d706:	e7d5      	b.n	800d6b4 <scalbn+0x6c>
 800d708:	c2f8f359 	.word	0xc2f8f359
 800d70c:	01a56e1f 	.word	0x01a56e1f
 800d710:	8800759c 	.word	0x8800759c
 800d714:	7e37e43c 	.word	0x7e37e43c
 800d718:	8800759c 	.word	0x8800759c
 800d71c:	fe37e43c 	.word	0xfe37e43c
 800d720:	c2f8f359 	.word	0xc2f8f359
 800d724:	81a56e1f 	.word	0x81a56e1f
 800d728:	43500000 	.word	0x43500000
 800d72c:	ffff3cb0 	.word	0xffff3cb0
 800d730:	3c900000 	.word	0x3c900000
 800d734:	00000000 	.word	0x00000000

0800d738 <floor>:
 800d738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d73c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d740:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d744:	2e13      	cmp	r6, #19
 800d746:	4602      	mov	r2, r0
 800d748:	460b      	mov	r3, r1
 800d74a:	460c      	mov	r4, r1
 800d74c:	4605      	mov	r5, r0
 800d74e:	4680      	mov	r8, r0
 800d750:	dc32      	bgt.n	800d7b8 <floor+0x80>
 800d752:	2e00      	cmp	r6, #0
 800d754:	da14      	bge.n	800d780 <floor+0x48>
 800d756:	a334      	add	r3, pc, #208	; (adr r3, 800d828 <floor+0xf0>)
 800d758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75c:	f7f6 fd8e 	bl	800427c <__adddf3>
 800d760:	2200      	movs	r2, #0
 800d762:	2300      	movs	r3, #0
 800d764:	f7f7 f9d0 	bl	8004b08 <__aeabi_dcmpgt>
 800d768:	b138      	cbz	r0, 800d77a <floor+0x42>
 800d76a:	2c00      	cmp	r4, #0
 800d76c:	da54      	bge.n	800d818 <floor+0xe0>
 800d76e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800d772:	4325      	orrs	r5, r4
 800d774:	d053      	beq.n	800d81e <floor+0xe6>
 800d776:	4c2e      	ldr	r4, [pc, #184]	; (800d830 <floor+0xf8>)
 800d778:	2500      	movs	r5, #0
 800d77a:	4623      	mov	r3, r4
 800d77c:	462a      	mov	r2, r5
 800d77e:	e024      	b.n	800d7ca <floor+0x92>
 800d780:	4f2c      	ldr	r7, [pc, #176]	; (800d834 <floor+0xfc>)
 800d782:	4137      	asrs	r7, r6
 800d784:	ea01 0c07 	and.w	ip, r1, r7
 800d788:	ea5c 0c00 	orrs.w	ip, ip, r0
 800d78c:	d01d      	beq.n	800d7ca <floor+0x92>
 800d78e:	a326      	add	r3, pc, #152	; (adr r3, 800d828 <floor+0xf0>)
 800d790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d794:	f7f6 fd72 	bl	800427c <__adddf3>
 800d798:	2200      	movs	r2, #0
 800d79a:	2300      	movs	r3, #0
 800d79c:	f7f7 f9b4 	bl	8004b08 <__aeabi_dcmpgt>
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	d0ea      	beq.n	800d77a <floor+0x42>
 800d7a4:	2c00      	cmp	r4, #0
 800d7a6:	bfbe      	ittt	lt
 800d7a8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d7ac:	4133      	asrlt	r3, r6
 800d7ae:	18e4      	addlt	r4, r4, r3
 800d7b0:	ea24 0407 	bic.w	r4, r4, r7
 800d7b4:	2500      	movs	r5, #0
 800d7b6:	e7e0      	b.n	800d77a <floor+0x42>
 800d7b8:	2e33      	cmp	r6, #51	; 0x33
 800d7ba:	dd0a      	ble.n	800d7d2 <floor+0x9a>
 800d7bc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d7c0:	d103      	bne.n	800d7ca <floor+0x92>
 800d7c2:	f7f6 fd5b 	bl	800427c <__adddf3>
 800d7c6:	4602      	mov	r2, r0
 800d7c8:	460b      	mov	r3, r1
 800d7ca:	4610      	mov	r0, r2
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7d2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d7d6:	f04f 3cff 	mov.w	ip, #4294967295
 800d7da:	fa2c f707 	lsr.w	r7, ip, r7
 800d7de:	4238      	tst	r0, r7
 800d7e0:	d0f3      	beq.n	800d7ca <floor+0x92>
 800d7e2:	a311      	add	r3, pc, #68	; (adr r3, 800d828 <floor+0xf0>)
 800d7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e8:	f7f6 fd48 	bl	800427c <__adddf3>
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	f7f7 f98a 	bl	8004b08 <__aeabi_dcmpgt>
 800d7f4:	2800      	cmp	r0, #0
 800d7f6:	d0c0      	beq.n	800d77a <floor+0x42>
 800d7f8:	2c00      	cmp	r4, #0
 800d7fa:	da0a      	bge.n	800d812 <floor+0xda>
 800d7fc:	2e14      	cmp	r6, #20
 800d7fe:	d101      	bne.n	800d804 <floor+0xcc>
 800d800:	3401      	adds	r4, #1
 800d802:	e006      	b.n	800d812 <floor+0xda>
 800d804:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d808:	2301      	movs	r3, #1
 800d80a:	40b3      	lsls	r3, r6
 800d80c:	441d      	add	r5, r3
 800d80e:	45a8      	cmp	r8, r5
 800d810:	d8f6      	bhi.n	800d800 <floor+0xc8>
 800d812:	ea25 0507 	bic.w	r5, r5, r7
 800d816:	e7b0      	b.n	800d77a <floor+0x42>
 800d818:	2500      	movs	r5, #0
 800d81a:	462c      	mov	r4, r5
 800d81c:	e7ad      	b.n	800d77a <floor+0x42>
 800d81e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d822:	e7aa      	b.n	800d77a <floor+0x42>
 800d824:	f3af 8000 	nop.w
 800d828:	8800759c 	.word	0x8800759c
 800d82c:	7e37e43c 	.word	0x7e37e43c
 800d830:	bff00000 	.word	0xbff00000
 800d834:	000fffff 	.word	0x000fffff

0800d838 <malloc>:
 800d838:	4b02      	ldr	r3, [pc, #8]	; (800d844 <malloc+0xc>)
 800d83a:	4601      	mov	r1, r0
 800d83c:	6818      	ldr	r0, [r3, #0]
 800d83e:	f000 b82b 	b.w	800d898 <_malloc_r>
 800d842:	bf00      	nop
 800d844:	200001ec 	.word	0x200001ec

0800d848 <free>:
 800d848:	4b02      	ldr	r3, [pc, #8]	; (800d854 <free+0xc>)
 800d84a:	4601      	mov	r1, r0
 800d84c:	6818      	ldr	r0, [r3, #0]
 800d84e:	f000 b921 	b.w	800da94 <_free_r>
 800d852:	bf00      	nop
 800d854:	200001ec 	.word	0x200001ec

0800d858 <sbrk_aligned>:
 800d858:	b570      	push	{r4, r5, r6, lr}
 800d85a:	4e0e      	ldr	r6, [pc, #56]	; (800d894 <sbrk_aligned+0x3c>)
 800d85c:	460c      	mov	r4, r1
 800d85e:	6831      	ldr	r1, [r6, #0]
 800d860:	4605      	mov	r5, r0
 800d862:	b911      	cbnz	r1, 800d86a <sbrk_aligned+0x12>
 800d864:	f000 f8cc 	bl	800da00 <_sbrk_r>
 800d868:	6030      	str	r0, [r6, #0]
 800d86a:	4621      	mov	r1, r4
 800d86c:	4628      	mov	r0, r5
 800d86e:	f000 f8c7 	bl	800da00 <_sbrk_r>
 800d872:	1c43      	adds	r3, r0, #1
 800d874:	d00a      	beq.n	800d88c <sbrk_aligned+0x34>
 800d876:	1cc4      	adds	r4, r0, #3
 800d878:	f024 0403 	bic.w	r4, r4, #3
 800d87c:	42a0      	cmp	r0, r4
 800d87e:	d007      	beq.n	800d890 <sbrk_aligned+0x38>
 800d880:	1a21      	subs	r1, r4, r0
 800d882:	4628      	mov	r0, r5
 800d884:	f000 f8bc 	bl	800da00 <_sbrk_r>
 800d888:	3001      	adds	r0, #1
 800d88a:	d101      	bne.n	800d890 <sbrk_aligned+0x38>
 800d88c:	f04f 34ff 	mov.w	r4, #4294967295
 800d890:	4620      	mov	r0, r4
 800d892:	bd70      	pop	{r4, r5, r6, pc}
 800d894:	20002948 	.word	0x20002948

0800d898 <_malloc_r>:
 800d898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d89c:	1ccd      	adds	r5, r1, #3
 800d89e:	f025 0503 	bic.w	r5, r5, #3
 800d8a2:	3508      	adds	r5, #8
 800d8a4:	2d0c      	cmp	r5, #12
 800d8a6:	bf38      	it	cc
 800d8a8:	250c      	movcc	r5, #12
 800d8aa:	2d00      	cmp	r5, #0
 800d8ac:	4607      	mov	r7, r0
 800d8ae:	db01      	blt.n	800d8b4 <_malloc_r+0x1c>
 800d8b0:	42a9      	cmp	r1, r5
 800d8b2:	d905      	bls.n	800d8c0 <_malloc_r+0x28>
 800d8b4:	230c      	movs	r3, #12
 800d8b6:	603b      	str	r3, [r7, #0]
 800d8b8:	2600      	movs	r6, #0
 800d8ba:	4630      	mov	r0, r6
 800d8bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d994 <_malloc_r+0xfc>
 800d8c4:	f000 f868 	bl	800d998 <__malloc_lock>
 800d8c8:	f8d8 3000 	ldr.w	r3, [r8]
 800d8cc:	461c      	mov	r4, r3
 800d8ce:	bb5c      	cbnz	r4, 800d928 <_malloc_r+0x90>
 800d8d0:	4629      	mov	r1, r5
 800d8d2:	4638      	mov	r0, r7
 800d8d4:	f7ff ffc0 	bl	800d858 <sbrk_aligned>
 800d8d8:	1c43      	adds	r3, r0, #1
 800d8da:	4604      	mov	r4, r0
 800d8dc:	d155      	bne.n	800d98a <_malloc_r+0xf2>
 800d8de:	f8d8 4000 	ldr.w	r4, [r8]
 800d8e2:	4626      	mov	r6, r4
 800d8e4:	2e00      	cmp	r6, #0
 800d8e6:	d145      	bne.n	800d974 <_malloc_r+0xdc>
 800d8e8:	2c00      	cmp	r4, #0
 800d8ea:	d048      	beq.n	800d97e <_malloc_r+0xe6>
 800d8ec:	6823      	ldr	r3, [r4, #0]
 800d8ee:	4631      	mov	r1, r6
 800d8f0:	4638      	mov	r0, r7
 800d8f2:	eb04 0903 	add.w	r9, r4, r3
 800d8f6:	f000 f883 	bl	800da00 <_sbrk_r>
 800d8fa:	4581      	cmp	r9, r0
 800d8fc:	d13f      	bne.n	800d97e <_malloc_r+0xe6>
 800d8fe:	6821      	ldr	r1, [r4, #0]
 800d900:	1a6d      	subs	r5, r5, r1
 800d902:	4629      	mov	r1, r5
 800d904:	4638      	mov	r0, r7
 800d906:	f7ff ffa7 	bl	800d858 <sbrk_aligned>
 800d90a:	3001      	adds	r0, #1
 800d90c:	d037      	beq.n	800d97e <_malloc_r+0xe6>
 800d90e:	6823      	ldr	r3, [r4, #0]
 800d910:	442b      	add	r3, r5
 800d912:	6023      	str	r3, [r4, #0]
 800d914:	f8d8 3000 	ldr.w	r3, [r8]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d038      	beq.n	800d98e <_malloc_r+0xf6>
 800d91c:	685a      	ldr	r2, [r3, #4]
 800d91e:	42a2      	cmp	r2, r4
 800d920:	d12b      	bne.n	800d97a <_malloc_r+0xe2>
 800d922:	2200      	movs	r2, #0
 800d924:	605a      	str	r2, [r3, #4]
 800d926:	e00f      	b.n	800d948 <_malloc_r+0xb0>
 800d928:	6822      	ldr	r2, [r4, #0]
 800d92a:	1b52      	subs	r2, r2, r5
 800d92c:	d41f      	bmi.n	800d96e <_malloc_r+0xd6>
 800d92e:	2a0b      	cmp	r2, #11
 800d930:	d917      	bls.n	800d962 <_malloc_r+0xca>
 800d932:	1961      	adds	r1, r4, r5
 800d934:	42a3      	cmp	r3, r4
 800d936:	6025      	str	r5, [r4, #0]
 800d938:	bf18      	it	ne
 800d93a:	6059      	strne	r1, [r3, #4]
 800d93c:	6863      	ldr	r3, [r4, #4]
 800d93e:	bf08      	it	eq
 800d940:	f8c8 1000 	streq.w	r1, [r8]
 800d944:	5162      	str	r2, [r4, r5]
 800d946:	604b      	str	r3, [r1, #4]
 800d948:	4638      	mov	r0, r7
 800d94a:	f104 060b 	add.w	r6, r4, #11
 800d94e:	f000 f829 	bl	800d9a4 <__malloc_unlock>
 800d952:	f026 0607 	bic.w	r6, r6, #7
 800d956:	1d23      	adds	r3, r4, #4
 800d958:	1af2      	subs	r2, r6, r3
 800d95a:	d0ae      	beq.n	800d8ba <_malloc_r+0x22>
 800d95c:	1b9b      	subs	r3, r3, r6
 800d95e:	50a3      	str	r3, [r4, r2]
 800d960:	e7ab      	b.n	800d8ba <_malloc_r+0x22>
 800d962:	42a3      	cmp	r3, r4
 800d964:	6862      	ldr	r2, [r4, #4]
 800d966:	d1dd      	bne.n	800d924 <_malloc_r+0x8c>
 800d968:	f8c8 2000 	str.w	r2, [r8]
 800d96c:	e7ec      	b.n	800d948 <_malloc_r+0xb0>
 800d96e:	4623      	mov	r3, r4
 800d970:	6864      	ldr	r4, [r4, #4]
 800d972:	e7ac      	b.n	800d8ce <_malloc_r+0x36>
 800d974:	4634      	mov	r4, r6
 800d976:	6876      	ldr	r6, [r6, #4]
 800d978:	e7b4      	b.n	800d8e4 <_malloc_r+0x4c>
 800d97a:	4613      	mov	r3, r2
 800d97c:	e7cc      	b.n	800d918 <_malloc_r+0x80>
 800d97e:	230c      	movs	r3, #12
 800d980:	603b      	str	r3, [r7, #0]
 800d982:	4638      	mov	r0, r7
 800d984:	f000 f80e 	bl	800d9a4 <__malloc_unlock>
 800d988:	e797      	b.n	800d8ba <_malloc_r+0x22>
 800d98a:	6025      	str	r5, [r4, #0]
 800d98c:	e7dc      	b.n	800d948 <_malloc_r+0xb0>
 800d98e:	605b      	str	r3, [r3, #4]
 800d990:	deff      	udf	#255	; 0xff
 800d992:	bf00      	nop
 800d994:	20002944 	.word	0x20002944

0800d998 <__malloc_lock>:
 800d998:	4801      	ldr	r0, [pc, #4]	; (800d9a0 <__malloc_lock+0x8>)
 800d99a:	f000 b86b 	b.w	800da74 <__retarget_lock_acquire_recursive>
 800d99e:	bf00      	nop
 800d9a0:	20002a88 	.word	0x20002a88

0800d9a4 <__malloc_unlock>:
 800d9a4:	4801      	ldr	r0, [pc, #4]	; (800d9ac <__malloc_unlock+0x8>)
 800d9a6:	f000 b866 	b.w	800da76 <__retarget_lock_release_recursive>
 800d9aa:	bf00      	nop
 800d9ac:	20002a88 	.word	0x20002a88

0800d9b0 <siprintf>:
 800d9b0:	b40e      	push	{r1, r2, r3}
 800d9b2:	b500      	push	{lr}
 800d9b4:	b09c      	sub	sp, #112	; 0x70
 800d9b6:	ab1d      	add	r3, sp, #116	; 0x74
 800d9b8:	9002      	str	r0, [sp, #8]
 800d9ba:	9006      	str	r0, [sp, #24]
 800d9bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d9c0:	4809      	ldr	r0, [pc, #36]	; (800d9e8 <siprintf+0x38>)
 800d9c2:	9107      	str	r1, [sp, #28]
 800d9c4:	9104      	str	r1, [sp, #16]
 800d9c6:	4909      	ldr	r1, [pc, #36]	; (800d9ec <siprintf+0x3c>)
 800d9c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9cc:	9105      	str	r1, [sp, #20]
 800d9ce:	6800      	ldr	r0, [r0, #0]
 800d9d0:	9301      	str	r3, [sp, #4]
 800d9d2:	a902      	add	r1, sp, #8
 800d9d4:	f000 f904 	bl	800dbe0 <_svfiprintf_r>
 800d9d8:	9b02      	ldr	r3, [sp, #8]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	701a      	strb	r2, [r3, #0]
 800d9de:	b01c      	add	sp, #112	; 0x70
 800d9e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9e4:	b003      	add	sp, #12
 800d9e6:	4770      	bx	lr
 800d9e8:	200001ec 	.word	0x200001ec
 800d9ec:	ffff0208 	.word	0xffff0208

0800d9f0 <memset>:
 800d9f0:	4402      	add	r2, r0
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d100      	bne.n	800d9fa <memset+0xa>
 800d9f8:	4770      	bx	lr
 800d9fa:	f803 1b01 	strb.w	r1, [r3], #1
 800d9fe:	e7f9      	b.n	800d9f4 <memset+0x4>

0800da00 <_sbrk_r>:
 800da00:	b538      	push	{r3, r4, r5, lr}
 800da02:	4d06      	ldr	r5, [pc, #24]	; (800da1c <_sbrk_r+0x1c>)
 800da04:	2300      	movs	r3, #0
 800da06:	4604      	mov	r4, r0
 800da08:	4608      	mov	r0, r1
 800da0a:	602b      	str	r3, [r5, #0]
 800da0c:	f7f8 fdc2 	bl	8006594 <_sbrk>
 800da10:	1c43      	adds	r3, r0, #1
 800da12:	d102      	bne.n	800da1a <_sbrk_r+0x1a>
 800da14:	682b      	ldr	r3, [r5, #0]
 800da16:	b103      	cbz	r3, 800da1a <_sbrk_r+0x1a>
 800da18:	6023      	str	r3, [r4, #0]
 800da1a:	bd38      	pop	{r3, r4, r5, pc}
 800da1c:	20002a84 	.word	0x20002a84

0800da20 <__errno>:
 800da20:	4b01      	ldr	r3, [pc, #4]	; (800da28 <__errno+0x8>)
 800da22:	6818      	ldr	r0, [r3, #0]
 800da24:	4770      	bx	lr
 800da26:	bf00      	nop
 800da28:	200001ec 	.word	0x200001ec

0800da2c <__libc_init_array>:
 800da2c:	b570      	push	{r4, r5, r6, lr}
 800da2e:	4d0d      	ldr	r5, [pc, #52]	; (800da64 <__libc_init_array+0x38>)
 800da30:	4c0d      	ldr	r4, [pc, #52]	; (800da68 <__libc_init_array+0x3c>)
 800da32:	1b64      	subs	r4, r4, r5
 800da34:	10a4      	asrs	r4, r4, #2
 800da36:	2600      	movs	r6, #0
 800da38:	42a6      	cmp	r6, r4
 800da3a:	d109      	bne.n	800da50 <__libc_init_array+0x24>
 800da3c:	4d0b      	ldr	r5, [pc, #44]	; (800da6c <__libc_init_array+0x40>)
 800da3e:	4c0c      	ldr	r4, [pc, #48]	; (800da70 <__libc_init_array+0x44>)
 800da40:	f000 fbae 	bl	800e1a0 <_init>
 800da44:	1b64      	subs	r4, r4, r5
 800da46:	10a4      	asrs	r4, r4, #2
 800da48:	2600      	movs	r6, #0
 800da4a:	42a6      	cmp	r6, r4
 800da4c:	d105      	bne.n	800da5a <__libc_init_array+0x2e>
 800da4e:	bd70      	pop	{r4, r5, r6, pc}
 800da50:	f855 3b04 	ldr.w	r3, [r5], #4
 800da54:	4798      	blx	r3
 800da56:	3601      	adds	r6, #1
 800da58:	e7ee      	b.n	800da38 <__libc_init_array+0xc>
 800da5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800da5e:	4798      	blx	r3
 800da60:	3601      	adds	r6, #1
 800da62:	e7f2      	b.n	800da4a <__libc_init_array+0x1e>
 800da64:	0800e7c8 	.word	0x0800e7c8
 800da68:	0800e7c8 	.word	0x0800e7c8
 800da6c:	0800e7c8 	.word	0x0800e7c8
 800da70:	0800e7cc 	.word	0x0800e7cc

0800da74 <__retarget_lock_acquire_recursive>:
 800da74:	4770      	bx	lr

0800da76 <__retarget_lock_release_recursive>:
 800da76:	4770      	bx	lr

0800da78 <memcpy>:
 800da78:	440a      	add	r2, r1
 800da7a:	4291      	cmp	r1, r2
 800da7c:	f100 33ff 	add.w	r3, r0, #4294967295
 800da80:	d100      	bne.n	800da84 <memcpy+0xc>
 800da82:	4770      	bx	lr
 800da84:	b510      	push	{r4, lr}
 800da86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da8e:	4291      	cmp	r1, r2
 800da90:	d1f9      	bne.n	800da86 <memcpy+0xe>
 800da92:	bd10      	pop	{r4, pc}

0800da94 <_free_r>:
 800da94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da96:	2900      	cmp	r1, #0
 800da98:	d044      	beq.n	800db24 <_free_r+0x90>
 800da9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da9e:	9001      	str	r0, [sp, #4]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	f1a1 0404 	sub.w	r4, r1, #4
 800daa6:	bfb8      	it	lt
 800daa8:	18e4      	addlt	r4, r4, r3
 800daaa:	f7ff ff75 	bl	800d998 <__malloc_lock>
 800daae:	4a1e      	ldr	r2, [pc, #120]	; (800db28 <_free_r+0x94>)
 800dab0:	9801      	ldr	r0, [sp, #4]
 800dab2:	6813      	ldr	r3, [r2, #0]
 800dab4:	b933      	cbnz	r3, 800dac4 <_free_r+0x30>
 800dab6:	6063      	str	r3, [r4, #4]
 800dab8:	6014      	str	r4, [r2, #0]
 800daba:	b003      	add	sp, #12
 800dabc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dac0:	f7ff bf70 	b.w	800d9a4 <__malloc_unlock>
 800dac4:	42a3      	cmp	r3, r4
 800dac6:	d908      	bls.n	800dada <_free_r+0x46>
 800dac8:	6825      	ldr	r5, [r4, #0]
 800daca:	1961      	adds	r1, r4, r5
 800dacc:	428b      	cmp	r3, r1
 800dace:	bf01      	itttt	eq
 800dad0:	6819      	ldreq	r1, [r3, #0]
 800dad2:	685b      	ldreq	r3, [r3, #4]
 800dad4:	1949      	addeq	r1, r1, r5
 800dad6:	6021      	streq	r1, [r4, #0]
 800dad8:	e7ed      	b.n	800dab6 <_free_r+0x22>
 800dada:	461a      	mov	r2, r3
 800dadc:	685b      	ldr	r3, [r3, #4]
 800dade:	b10b      	cbz	r3, 800dae4 <_free_r+0x50>
 800dae0:	42a3      	cmp	r3, r4
 800dae2:	d9fa      	bls.n	800dada <_free_r+0x46>
 800dae4:	6811      	ldr	r1, [r2, #0]
 800dae6:	1855      	adds	r5, r2, r1
 800dae8:	42a5      	cmp	r5, r4
 800daea:	d10b      	bne.n	800db04 <_free_r+0x70>
 800daec:	6824      	ldr	r4, [r4, #0]
 800daee:	4421      	add	r1, r4
 800daf0:	1854      	adds	r4, r2, r1
 800daf2:	42a3      	cmp	r3, r4
 800daf4:	6011      	str	r1, [r2, #0]
 800daf6:	d1e0      	bne.n	800daba <_free_r+0x26>
 800daf8:	681c      	ldr	r4, [r3, #0]
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	6053      	str	r3, [r2, #4]
 800dafe:	440c      	add	r4, r1
 800db00:	6014      	str	r4, [r2, #0]
 800db02:	e7da      	b.n	800daba <_free_r+0x26>
 800db04:	d902      	bls.n	800db0c <_free_r+0x78>
 800db06:	230c      	movs	r3, #12
 800db08:	6003      	str	r3, [r0, #0]
 800db0a:	e7d6      	b.n	800daba <_free_r+0x26>
 800db0c:	6825      	ldr	r5, [r4, #0]
 800db0e:	1961      	adds	r1, r4, r5
 800db10:	428b      	cmp	r3, r1
 800db12:	bf04      	itt	eq
 800db14:	6819      	ldreq	r1, [r3, #0]
 800db16:	685b      	ldreq	r3, [r3, #4]
 800db18:	6063      	str	r3, [r4, #4]
 800db1a:	bf04      	itt	eq
 800db1c:	1949      	addeq	r1, r1, r5
 800db1e:	6021      	streq	r1, [r4, #0]
 800db20:	6054      	str	r4, [r2, #4]
 800db22:	e7ca      	b.n	800daba <_free_r+0x26>
 800db24:	b003      	add	sp, #12
 800db26:	bd30      	pop	{r4, r5, pc}
 800db28:	20002944 	.word	0x20002944

0800db2c <__ssputs_r>:
 800db2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db30:	688e      	ldr	r6, [r1, #8]
 800db32:	461f      	mov	r7, r3
 800db34:	42be      	cmp	r6, r7
 800db36:	680b      	ldr	r3, [r1, #0]
 800db38:	4682      	mov	sl, r0
 800db3a:	460c      	mov	r4, r1
 800db3c:	4690      	mov	r8, r2
 800db3e:	d82c      	bhi.n	800db9a <__ssputs_r+0x6e>
 800db40:	898a      	ldrh	r2, [r1, #12]
 800db42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800db46:	d026      	beq.n	800db96 <__ssputs_r+0x6a>
 800db48:	6965      	ldr	r5, [r4, #20]
 800db4a:	6909      	ldr	r1, [r1, #16]
 800db4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db50:	eba3 0901 	sub.w	r9, r3, r1
 800db54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db58:	1c7b      	adds	r3, r7, #1
 800db5a:	444b      	add	r3, r9
 800db5c:	106d      	asrs	r5, r5, #1
 800db5e:	429d      	cmp	r5, r3
 800db60:	bf38      	it	cc
 800db62:	461d      	movcc	r5, r3
 800db64:	0553      	lsls	r3, r2, #21
 800db66:	d527      	bpl.n	800dbb8 <__ssputs_r+0x8c>
 800db68:	4629      	mov	r1, r5
 800db6a:	f7ff fe95 	bl	800d898 <_malloc_r>
 800db6e:	4606      	mov	r6, r0
 800db70:	b360      	cbz	r0, 800dbcc <__ssputs_r+0xa0>
 800db72:	6921      	ldr	r1, [r4, #16]
 800db74:	464a      	mov	r2, r9
 800db76:	f7ff ff7f 	bl	800da78 <memcpy>
 800db7a:	89a3      	ldrh	r3, [r4, #12]
 800db7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db84:	81a3      	strh	r3, [r4, #12]
 800db86:	6126      	str	r6, [r4, #16]
 800db88:	6165      	str	r5, [r4, #20]
 800db8a:	444e      	add	r6, r9
 800db8c:	eba5 0509 	sub.w	r5, r5, r9
 800db90:	6026      	str	r6, [r4, #0]
 800db92:	60a5      	str	r5, [r4, #8]
 800db94:	463e      	mov	r6, r7
 800db96:	42be      	cmp	r6, r7
 800db98:	d900      	bls.n	800db9c <__ssputs_r+0x70>
 800db9a:	463e      	mov	r6, r7
 800db9c:	6820      	ldr	r0, [r4, #0]
 800db9e:	4632      	mov	r2, r6
 800dba0:	4641      	mov	r1, r8
 800dba2:	f000 faab 	bl	800e0fc <memmove>
 800dba6:	68a3      	ldr	r3, [r4, #8]
 800dba8:	1b9b      	subs	r3, r3, r6
 800dbaa:	60a3      	str	r3, [r4, #8]
 800dbac:	6823      	ldr	r3, [r4, #0]
 800dbae:	4433      	add	r3, r6
 800dbb0:	6023      	str	r3, [r4, #0]
 800dbb2:	2000      	movs	r0, #0
 800dbb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbb8:	462a      	mov	r2, r5
 800dbba:	f000 fab9 	bl	800e130 <_realloc_r>
 800dbbe:	4606      	mov	r6, r0
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	d1e0      	bne.n	800db86 <__ssputs_r+0x5a>
 800dbc4:	6921      	ldr	r1, [r4, #16]
 800dbc6:	4650      	mov	r0, sl
 800dbc8:	f7ff ff64 	bl	800da94 <_free_r>
 800dbcc:	230c      	movs	r3, #12
 800dbce:	f8ca 3000 	str.w	r3, [sl]
 800dbd2:	89a3      	ldrh	r3, [r4, #12]
 800dbd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbd8:	81a3      	strh	r3, [r4, #12]
 800dbda:	f04f 30ff 	mov.w	r0, #4294967295
 800dbde:	e7e9      	b.n	800dbb4 <__ssputs_r+0x88>

0800dbe0 <_svfiprintf_r>:
 800dbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe4:	4698      	mov	r8, r3
 800dbe6:	898b      	ldrh	r3, [r1, #12]
 800dbe8:	061b      	lsls	r3, r3, #24
 800dbea:	b09d      	sub	sp, #116	; 0x74
 800dbec:	4607      	mov	r7, r0
 800dbee:	460d      	mov	r5, r1
 800dbf0:	4614      	mov	r4, r2
 800dbf2:	d50e      	bpl.n	800dc12 <_svfiprintf_r+0x32>
 800dbf4:	690b      	ldr	r3, [r1, #16]
 800dbf6:	b963      	cbnz	r3, 800dc12 <_svfiprintf_r+0x32>
 800dbf8:	2140      	movs	r1, #64	; 0x40
 800dbfa:	f7ff fe4d 	bl	800d898 <_malloc_r>
 800dbfe:	6028      	str	r0, [r5, #0]
 800dc00:	6128      	str	r0, [r5, #16]
 800dc02:	b920      	cbnz	r0, 800dc0e <_svfiprintf_r+0x2e>
 800dc04:	230c      	movs	r3, #12
 800dc06:	603b      	str	r3, [r7, #0]
 800dc08:	f04f 30ff 	mov.w	r0, #4294967295
 800dc0c:	e0d0      	b.n	800ddb0 <_svfiprintf_r+0x1d0>
 800dc0e:	2340      	movs	r3, #64	; 0x40
 800dc10:	616b      	str	r3, [r5, #20]
 800dc12:	2300      	movs	r3, #0
 800dc14:	9309      	str	r3, [sp, #36]	; 0x24
 800dc16:	2320      	movs	r3, #32
 800dc18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc20:	2330      	movs	r3, #48	; 0x30
 800dc22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ddc8 <_svfiprintf_r+0x1e8>
 800dc26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc2a:	f04f 0901 	mov.w	r9, #1
 800dc2e:	4623      	mov	r3, r4
 800dc30:	469a      	mov	sl, r3
 800dc32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc36:	b10a      	cbz	r2, 800dc3c <_svfiprintf_r+0x5c>
 800dc38:	2a25      	cmp	r2, #37	; 0x25
 800dc3a:	d1f9      	bne.n	800dc30 <_svfiprintf_r+0x50>
 800dc3c:	ebba 0b04 	subs.w	fp, sl, r4
 800dc40:	d00b      	beq.n	800dc5a <_svfiprintf_r+0x7a>
 800dc42:	465b      	mov	r3, fp
 800dc44:	4622      	mov	r2, r4
 800dc46:	4629      	mov	r1, r5
 800dc48:	4638      	mov	r0, r7
 800dc4a:	f7ff ff6f 	bl	800db2c <__ssputs_r>
 800dc4e:	3001      	adds	r0, #1
 800dc50:	f000 80a9 	beq.w	800dda6 <_svfiprintf_r+0x1c6>
 800dc54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc56:	445a      	add	r2, fp
 800dc58:	9209      	str	r2, [sp, #36]	; 0x24
 800dc5a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	f000 80a1 	beq.w	800dda6 <_svfiprintf_r+0x1c6>
 800dc64:	2300      	movs	r3, #0
 800dc66:	f04f 32ff 	mov.w	r2, #4294967295
 800dc6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc6e:	f10a 0a01 	add.w	sl, sl, #1
 800dc72:	9304      	str	r3, [sp, #16]
 800dc74:	9307      	str	r3, [sp, #28]
 800dc76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc7a:	931a      	str	r3, [sp, #104]	; 0x68
 800dc7c:	4654      	mov	r4, sl
 800dc7e:	2205      	movs	r2, #5
 800dc80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc84:	4850      	ldr	r0, [pc, #320]	; (800ddc8 <_svfiprintf_r+0x1e8>)
 800dc86:	f7f6 faa3 	bl	80041d0 <memchr>
 800dc8a:	9a04      	ldr	r2, [sp, #16]
 800dc8c:	b9d8      	cbnz	r0, 800dcc6 <_svfiprintf_r+0xe6>
 800dc8e:	06d0      	lsls	r0, r2, #27
 800dc90:	bf44      	itt	mi
 800dc92:	2320      	movmi	r3, #32
 800dc94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc98:	0711      	lsls	r1, r2, #28
 800dc9a:	bf44      	itt	mi
 800dc9c:	232b      	movmi	r3, #43	; 0x2b
 800dc9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dca2:	f89a 3000 	ldrb.w	r3, [sl]
 800dca6:	2b2a      	cmp	r3, #42	; 0x2a
 800dca8:	d015      	beq.n	800dcd6 <_svfiprintf_r+0xf6>
 800dcaa:	9a07      	ldr	r2, [sp, #28]
 800dcac:	4654      	mov	r4, sl
 800dcae:	2000      	movs	r0, #0
 800dcb0:	f04f 0c0a 	mov.w	ip, #10
 800dcb4:	4621      	mov	r1, r4
 800dcb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcba:	3b30      	subs	r3, #48	; 0x30
 800dcbc:	2b09      	cmp	r3, #9
 800dcbe:	d94d      	bls.n	800dd5c <_svfiprintf_r+0x17c>
 800dcc0:	b1b0      	cbz	r0, 800dcf0 <_svfiprintf_r+0x110>
 800dcc2:	9207      	str	r2, [sp, #28]
 800dcc4:	e014      	b.n	800dcf0 <_svfiprintf_r+0x110>
 800dcc6:	eba0 0308 	sub.w	r3, r0, r8
 800dcca:	fa09 f303 	lsl.w	r3, r9, r3
 800dcce:	4313      	orrs	r3, r2
 800dcd0:	9304      	str	r3, [sp, #16]
 800dcd2:	46a2      	mov	sl, r4
 800dcd4:	e7d2      	b.n	800dc7c <_svfiprintf_r+0x9c>
 800dcd6:	9b03      	ldr	r3, [sp, #12]
 800dcd8:	1d19      	adds	r1, r3, #4
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	9103      	str	r1, [sp, #12]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	bfbb      	ittet	lt
 800dce2:	425b      	neglt	r3, r3
 800dce4:	f042 0202 	orrlt.w	r2, r2, #2
 800dce8:	9307      	strge	r3, [sp, #28]
 800dcea:	9307      	strlt	r3, [sp, #28]
 800dcec:	bfb8      	it	lt
 800dcee:	9204      	strlt	r2, [sp, #16]
 800dcf0:	7823      	ldrb	r3, [r4, #0]
 800dcf2:	2b2e      	cmp	r3, #46	; 0x2e
 800dcf4:	d10c      	bne.n	800dd10 <_svfiprintf_r+0x130>
 800dcf6:	7863      	ldrb	r3, [r4, #1]
 800dcf8:	2b2a      	cmp	r3, #42	; 0x2a
 800dcfa:	d134      	bne.n	800dd66 <_svfiprintf_r+0x186>
 800dcfc:	9b03      	ldr	r3, [sp, #12]
 800dcfe:	1d1a      	adds	r2, r3, #4
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	9203      	str	r2, [sp, #12]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	bfb8      	it	lt
 800dd08:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd0c:	3402      	adds	r4, #2
 800dd0e:	9305      	str	r3, [sp, #20]
 800dd10:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ddd8 <_svfiprintf_r+0x1f8>
 800dd14:	7821      	ldrb	r1, [r4, #0]
 800dd16:	2203      	movs	r2, #3
 800dd18:	4650      	mov	r0, sl
 800dd1a:	f7f6 fa59 	bl	80041d0 <memchr>
 800dd1e:	b138      	cbz	r0, 800dd30 <_svfiprintf_r+0x150>
 800dd20:	9b04      	ldr	r3, [sp, #16]
 800dd22:	eba0 000a 	sub.w	r0, r0, sl
 800dd26:	2240      	movs	r2, #64	; 0x40
 800dd28:	4082      	lsls	r2, r0
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	3401      	adds	r4, #1
 800dd2e:	9304      	str	r3, [sp, #16]
 800dd30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd34:	4825      	ldr	r0, [pc, #148]	; (800ddcc <_svfiprintf_r+0x1ec>)
 800dd36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd3a:	2206      	movs	r2, #6
 800dd3c:	f7f6 fa48 	bl	80041d0 <memchr>
 800dd40:	2800      	cmp	r0, #0
 800dd42:	d038      	beq.n	800ddb6 <_svfiprintf_r+0x1d6>
 800dd44:	4b22      	ldr	r3, [pc, #136]	; (800ddd0 <_svfiprintf_r+0x1f0>)
 800dd46:	bb1b      	cbnz	r3, 800dd90 <_svfiprintf_r+0x1b0>
 800dd48:	9b03      	ldr	r3, [sp, #12]
 800dd4a:	3307      	adds	r3, #7
 800dd4c:	f023 0307 	bic.w	r3, r3, #7
 800dd50:	3308      	adds	r3, #8
 800dd52:	9303      	str	r3, [sp, #12]
 800dd54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd56:	4433      	add	r3, r6
 800dd58:	9309      	str	r3, [sp, #36]	; 0x24
 800dd5a:	e768      	b.n	800dc2e <_svfiprintf_r+0x4e>
 800dd5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd60:	460c      	mov	r4, r1
 800dd62:	2001      	movs	r0, #1
 800dd64:	e7a6      	b.n	800dcb4 <_svfiprintf_r+0xd4>
 800dd66:	2300      	movs	r3, #0
 800dd68:	3401      	adds	r4, #1
 800dd6a:	9305      	str	r3, [sp, #20]
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	f04f 0c0a 	mov.w	ip, #10
 800dd72:	4620      	mov	r0, r4
 800dd74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd78:	3a30      	subs	r2, #48	; 0x30
 800dd7a:	2a09      	cmp	r2, #9
 800dd7c:	d903      	bls.n	800dd86 <_svfiprintf_r+0x1a6>
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d0c6      	beq.n	800dd10 <_svfiprintf_r+0x130>
 800dd82:	9105      	str	r1, [sp, #20]
 800dd84:	e7c4      	b.n	800dd10 <_svfiprintf_r+0x130>
 800dd86:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd8a:	4604      	mov	r4, r0
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	e7f0      	b.n	800dd72 <_svfiprintf_r+0x192>
 800dd90:	ab03      	add	r3, sp, #12
 800dd92:	9300      	str	r3, [sp, #0]
 800dd94:	462a      	mov	r2, r5
 800dd96:	4b0f      	ldr	r3, [pc, #60]	; (800ddd4 <_svfiprintf_r+0x1f4>)
 800dd98:	a904      	add	r1, sp, #16
 800dd9a:	4638      	mov	r0, r7
 800dd9c:	f3af 8000 	nop.w
 800dda0:	1c42      	adds	r2, r0, #1
 800dda2:	4606      	mov	r6, r0
 800dda4:	d1d6      	bne.n	800dd54 <_svfiprintf_r+0x174>
 800dda6:	89ab      	ldrh	r3, [r5, #12]
 800dda8:	065b      	lsls	r3, r3, #25
 800ddaa:	f53f af2d 	bmi.w	800dc08 <_svfiprintf_r+0x28>
 800ddae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddb0:	b01d      	add	sp, #116	; 0x74
 800ddb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddb6:	ab03      	add	r3, sp, #12
 800ddb8:	9300      	str	r3, [sp, #0]
 800ddba:	462a      	mov	r2, r5
 800ddbc:	4b05      	ldr	r3, [pc, #20]	; (800ddd4 <_svfiprintf_r+0x1f4>)
 800ddbe:	a904      	add	r1, sp, #16
 800ddc0:	4638      	mov	r0, r7
 800ddc2:	f000 f879 	bl	800deb8 <_printf_i>
 800ddc6:	e7eb      	b.n	800dda0 <_svfiprintf_r+0x1c0>
 800ddc8:	0800e790 	.word	0x0800e790
 800ddcc:	0800e79a 	.word	0x0800e79a
 800ddd0:	00000000 	.word	0x00000000
 800ddd4:	0800db2d 	.word	0x0800db2d
 800ddd8:	0800e796 	.word	0x0800e796

0800dddc <_printf_common>:
 800dddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dde0:	4616      	mov	r6, r2
 800dde2:	4699      	mov	r9, r3
 800dde4:	688a      	ldr	r2, [r1, #8]
 800dde6:	690b      	ldr	r3, [r1, #16]
 800dde8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ddec:	4293      	cmp	r3, r2
 800ddee:	bfb8      	it	lt
 800ddf0:	4613      	movlt	r3, r2
 800ddf2:	6033      	str	r3, [r6, #0]
 800ddf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ddf8:	4607      	mov	r7, r0
 800ddfa:	460c      	mov	r4, r1
 800ddfc:	b10a      	cbz	r2, 800de02 <_printf_common+0x26>
 800ddfe:	3301      	adds	r3, #1
 800de00:	6033      	str	r3, [r6, #0]
 800de02:	6823      	ldr	r3, [r4, #0]
 800de04:	0699      	lsls	r1, r3, #26
 800de06:	bf42      	ittt	mi
 800de08:	6833      	ldrmi	r3, [r6, #0]
 800de0a:	3302      	addmi	r3, #2
 800de0c:	6033      	strmi	r3, [r6, #0]
 800de0e:	6825      	ldr	r5, [r4, #0]
 800de10:	f015 0506 	ands.w	r5, r5, #6
 800de14:	d106      	bne.n	800de24 <_printf_common+0x48>
 800de16:	f104 0a19 	add.w	sl, r4, #25
 800de1a:	68e3      	ldr	r3, [r4, #12]
 800de1c:	6832      	ldr	r2, [r6, #0]
 800de1e:	1a9b      	subs	r3, r3, r2
 800de20:	42ab      	cmp	r3, r5
 800de22:	dc26      	bgt.n	800de72 <_printf_common+0x96>
 800de24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800de28:	1e13      	subs	r3, r2, #0
 800de2a:	6822      	ldr	r2, [r4, #0]
 800de2c:	bf18      	it	ne
 800de2e:	2301      	movne	r3, #1
 800de30:	0692      	lsls	r2, r2, #26
 800de32:	d42b      	bmi.n	800de8c <_printf_common+0xb0>
 800de34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800de38:	4649      	mov	r1, r9
 800de3a:	4638      	mov	r0, r7
 800de3c:	47c0      	blx	r8
 800de3e:	3001      	adds	r0, #1
 800de40:	d01e      	beq.n	800de80 <_printf_common+0xa4>
 800de42:	6823      	ldr	r3, [r4, #0]
 800de44:	6922      	ldr	r2, [r4, #16]
 800de46:	f003 0306 	and.w	r3, r3, #6
 800de4a:	2b04      	cmp	r3, #4
 800de4c:	bf02      	ittt	eq
 800de4e:	68e5      	ldreq	r5, [r4, #12]
 800de50:	6833      	ldreq	r3, [r6, #0]
 800de52:	1aed      	subeq	r5, r5, r3
 800de54:	68a3      	ldr	r3, [r4, #8]
 800de56:	bf0c      	ite	eq
 800de58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de5c:	2500      	movne	r5, #0
 800de5e:	4293      	cmp	r3, r2
 800de60:	bfc4      	itt	gt
 800de62:	1a9b      	subgt	r3, r3, r2
 800de64:	18ed      	addgt	r5, r5, r3
 800de66:	2600      	movs	r6, #0
 800de68:	341a      	adds	r4, #26
 800de6a:	42b5      	cmp	r5, r6
 800de6c:	d11a      	bne.n	800dea4 <_printf_common+0xc8>
 800de6e:	2000      	movs	r0, #0
 800de70:	e008      	b.n	800de84 <_printf_common+0xa8>
 800de72:	2301      	movs	r3, #1
 800de74:	4652      	mov	r2, sl
 800de76:	4649      	mov	r1, r9
 800de78:	4638      	mov	r0, r7
 800de7a:	47c0      	blx	r8
 800de7c:	3001      	adds	r0, #1
 800de7e:	d103      	bne.n	800de88 <_printf_common+0xac>
 800de80:	f04f 30ff 	mov.w	r0, #4294967295
 800de84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de88:	3501      	adds	r5, #1
 800de8a:	e7c6      	b.n	800de1a <_printf_common+0x3e>
 800de8c:	18e1      	adds	r1, r4, r3
 800de8e:	1c5a      	adds	r2, r3, #1
 800de90:	2030      	movs	r0, #48	; 0x30
 800de92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800de96:	4422      	add	r2, r4
 800de98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800de9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dea0:	3302      	adds	r3, #2
 800dea2:	e7c7      	b.n	800de34 <_printf_common+0x58>
 800dea4:	2301      	movs	r3, #1
 800dea6:	4622      	mov	r2, r4
 800dea8:	4649      	mov	r1, r9
 800deaa:	4638      	mov	r0, r7
 800deac:	47c0      	blx	r8
 800deae:	3001      	adds	r0, #1
 800deb0:	d0e6      	beq.n	800de80 <_printf_common+0xa4>
 800deb2:	3601      	adds	r6, #1
 800deb4:	e7d9      	b.n	800de6a <_printf_common+0x8e>
	...

0800deb8 <_printf_i>:
 800deb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800debc:	7e0f      	ldrb	r7, [r1, #24]
 800debe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dec0:	2f78      	cmp	r7, #120	; 0x78
 800dec2:	4691      	mov	r9, r2
 800dec4:	4680      	mov	r8, r0
 800dec6:	460c      	mov	r4, r1
 800dec8:	469a      	mov	sl, r3
 800deca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dece:	d807      	bhi.n	800dee0 <_printf_i+0x28>
 800ded0:	2f62      	cmp	r7, #98	; 0x62
 800ded2:	d80a      	bhi.n	800deea <_printf_i+0x32>
 800ded4:	2f00      	cmp	r7, #0
 800ded6:	f000 80d4 	beq.w	800e082 <_printf_i+0x1ca>
 800deda:	2f58      	cmp	r7, #88	; 0x58
 800dedc:	f000 80c0 	beq.w	800e060 <_printf_i+0x1a8>
 800dee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dee4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dee8:	e03a      	b.n	800df60 <_printf_i+0xa8>
 800deea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800deee:	2b15      	cmp	r3, #21
 800def0:	d8f6      	bhi.n	800dee0 <_printf_i+0x28>
 800def2:	a101      	add	r1, pc, #4	; (adr r1, 800def8 <_printf_i+0x40>)
 800def4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800def8:	0800df51 	.word	0x0800df51
 800defc:	0800df65 	.word	0x0800df65
 800df00:	0800dee1 	.word	0x0800dee1
 800df04:	0800dee1 	.word	0x0800dee1
 800df08:	0800dee1 	.word	0x0800dee1
 800df0c:	0800dee1 	.word	0x0800dee1
 800df10:	0800df65 	.word	0x0800df65
 800df14:	0800dee1 	.word	0x0800dee1
 800df18:	0800dee1 	.word	0x0800dee1
 800df1c:	0800dee1 	.word	0x0800dee1
 800df20:	0800dee1 	.word	0x0800dee1
 800df24:	0800e069 	.word	0x0800e069
 800df28:	0800df91 	.word	0x0800df91
 800df2c:	0800e023 	.word	0x0800e023
 800df30:	0800dee1 	.word	0x0800dee1
 800df34:	0800dee1 	.word	0x0800dee1
 800df38:	0800e08b 	.word	0x0800e08b
 800df3c:	0800dee1 	.word	0x0800dee1
 800df40:	0800df91 	.word	0x0800df91
 800df44:	0800dee1 	.word	0x0800dee1
 800df48:	0800dee1 	.word	0x0800dee1
 800df4c:	0800e02b 	.word	0x0800e02b
 800df50:	682b      	ldr	r3, [r5, #0]
 800df52:	1d1a      	adds	r2, r3, #4
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	602a      	str	r2, [r5, #0]
 800df58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800df60:	2301      	movs	r3, #1
 800df62:	e09f      	b.n	800e0a4 <_printf_i+0x1ec>
 800df64:	6820      	ldr	r0, [r4, #0]
 800df66:	682b      	ldr	r3, [r5, #0]
 800df68:	0607      	lsls	r7, r0, #24
 800df6a:	f103 0104 	add.w	r1, r3, #4
 800df6e:	6029      	str	r1, [r5, #0]
 800df70:	d501      	bpl.n	800df76 <_printf_i+0xbe>
 800df72:	681e      	ldr	r6, [r3, #0]
 800df74:	e003      	b.n	800df7e <_printf_i+0xc6>
 800df76:	0646      	lsls	r6, r0, #25
 800df78:	d5fb      	bpl.n	800df72 <_printf_i+0xba>
 800df7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800df7e:	2e00      	cmp	r6, #0
 800df80:	da03      	bge.n	800df8a <_printf_i+0xd2>
 800df82:	232d      	movs	r3, #45	; 0x2d
 800df84:	4276      	negs	r6, r6
 800df86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df8a:	485a      	ldr	r0, [pc, #360]	; (800e0f4 <_printf_i+0x23c>)
 800df8c:	230a      	movs	r3, #10
 800df8e:	e012      	b.n	800dfb6 <_printf_i+0xfe>
 800df90:	682b      	ldr	r3, [r5, #0]
 800df92:	6820      	ldr	r0, [r4, #0]
 800df94:	1d19      	adds	r1, r3, #4
 800df96:	6029      	str	r1, [r5, #0]
 800df98:	0605      	lsls	r5, r0, #24
 800df9a:	d501      	bpl.n	800dfa0 <_printf_i+0xe8>
 800df9c:	681e      	ldr	r6, [r3, #0]
 800df9e:	e002      	b.n	800dfa6 <_printf_i+0xee>
 800dfa0:	0641      	lsls	r1, r0, #25
 800dfa2:	d5fb      	bpl.n	800df9c <_printf_i+0xe4>
 800dfa4:	881e      	ldrh	r6, [r3, #0]
 800dfa6:	4853      	ldr	r0, [pc, #332]	; (800e0f4 <_printf_i+0x23c>)
 800dfa8:	2f6f      	cmp	r7, #111	; 0x6f
 800dfaa:	bf0c      	ite	eq
 800dfac:	2308      	moveq	r3, #8
 800dfae:	230a      	movne	r3, #10
 800dfb0:	2100      	movs	r1, #0
 800dfb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dfb6:	6865      	ldr	r5, [r4, #4]
 800dfb8:	60a5      	str	r5, [r4, #8]
 800dfba:	2d00      	cmp	r5, #0
 800dfbc:	bfa2      	ittt	ge
 800dfbe:	6821      	ldrge	r1, [r4, #0]
 800dfc0:	f021 0104 	bicge.w	r1, r1, #4
 800dfc4:	6021      	strge	r1, [r4, #0]
 800dfc6:	b90e      	cbnz	r6, 800dfcc <_printf_i+0x114>
 800dfc8:	2d00      	cmp	r5, #0
 800dfca:	d04b      	beq.n	800e064 <_printf_i+0x1ac>
 800dfcc:	4615      	mov	r5, r2
 800dfce:	fbb6 f1f3 	udiv	r1, r6, r3
 800dfd2:	fb03 6711 	mls	r7, r3, r1, r6
 800dfd6:	5dc7      	ldrb	r7, [r0, r7]
 800dfd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dfdc:	4637      	mov	r7, r6
 800dfde:	42bb      	cmp	r3, r7
 800dfe0:	460e      	mov	r6, r1
 800dfe2:	d9f4      	bls.n	800dfce <_printf_i+0x116>
 800dfe4:	2b08      	cmp	r3, #8
 800dfe6:	d10b      	bne.n	800e000 <_printf_i+0x148>
 800dfe8:	6823      	ldr	r3, [r4, #0]
 800dfea:	07de      	lsls	r6, r3, #31
 800dfec:	d508      	bpl.n	800e000 <_printf_i+0x148>
 800dfee:	6923      	ldr	r3, [r4, #16]
 800dff0:	6861      	ldr	r1, [r4, #4]
 800dff2:	4299      	cmp	r1, r3
 800dff4:	bfde      	ittt	le
 800dff6:	2330      	movle	r3, #48	; 0x30
 800dff8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dffc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e000:	1b52      	subs	r2, r2, r5
 800e002:	6122      	str	r2, [r4, #16]
 800e004:	f8cd a000 	str.w	sl, [sp]
 800e008:	464b      	mov	r3, r9
 800e00a:	aa03      	add	r2, sp, #12
 800e00c:	4621      	mov	r1, r4
 800e00e:	4640      	mov	r0, r8
 800e010:	f7ff fee4 	bl	800dddc <_printf_common>
 800e014:	3001      	adds	r0, #1
 800e016:	d14a      	bne.n	800e0ae <_printf_i+0x1f6>
 800e018:	f04f 30ff 	mov.w	r0, #4294967295
 800e01c:	b004      	add	sp, #16
 800e01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e022:	6823      	ldr	r3, [r4, #0]
 800e024:	f043 0320 	orr.w	r3, r3, #32
 800e028:	6023      	str	r3, [r4, #0]
 800e02a:	4833      	ldr	r0, [pc, #204]	; (800e0f8 <_printf_i+0x240>)
 800e02c:	2778      	movs	r7, #120	; 0x78
 800e02e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e032:	6823      	ldr	r3, [r4, #0]
 800e034:	6829      	ldr	r1, [r5, #0]
 800e036:	061f      	lsls	r7, r3, #24
 800e038:	f851 6b04 	ldr.w	r6, [r1], #4
 800e03c:	d402      	bmi.n	800e044 <_printf_i+0x18c>
 800e03e:	065f      	lsls	r7, r3, #25
 800e040:	bf48      	it	mi
 800e042:	b2b6      	uxthmi	r6, r6
 800e044:	07df      	lsls	r7, r3, #31
 800e046:	bf48      	it	mi
 800e048:	f043 0320 	orrmi.w	r3, r3, #32
 800e04c:	6029      	str	r1, [r5, #0]
 800e04e:	bf48      	it	mi
 800e050:	6023      	strmi	r3, [r4, #0]
 800e052:	b91e      	cbnz	r6, 800e05c <_printf_i+0x1a4>
 800e054:	6823      	ldr	r3, [r4, #0]
 800e056:	f023 0320 	bic.w	r3, r3, #32
 800e05a:	6023      	str	r3, [r4, #0]
 800e05c:	2310      	movs	r3, #16
 800e05e:	e7a7      	b.n	800dfb0 <_printf_i+0xf8>
 800e060:	4824      	ldr	r0, [pc, #144]	; (800e0f4 <_printf_i+0x23c>)
 800e062:	e7e4      	b.n	800e02e <_printf_i+0x176>
 800e064:	4615      	mov	r5, r2
 800e066:	e7bd      	b.n	800dfe4 <_printf_i+0x12c>
 800e068:	682b      	ldr	r3, [r5, #0]
 800e06a:	6826      	ldr	r6, [r4, #0]
 800e06c:	6961      	ldr	r1, [r4, #20]
 800e06e:	1d18      	adds	r0, r3, #4
 800e070:	6028      	str	r0, [r5, #0]
 800e072:	0635      	lsls	r5, r6, #24
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	d501      	bpl.n	800e07c <_printf_i+0x1c4>
 800e078:	6019      	str	r1, [r3, #0]
 800e07a:	e002      	b.n	800e082 <_printf_i+0x1ca>
 800e07c:	0670      	lsls	r0, r6, #25
 800e07e:	d5fb      	bpl.n	800e078 <_printf_i+0x1c0>
 800e080:	8019      	strh	r1, [r3, #0]
 800e082:	2300      	movs	r3, #0
 800e084:	6123      	str	r3, [r4, #16]
 800e086:	4615      	mov	r5, r2
 800e088:	e7bc      	b.n	800e004 <_printf_i+0x14c>
 800e08a:	682b      	ldr	r3, [r5, #0]
 800e08c:	1d1a      	adds	r2, r3, #4
 800e08e:	602a      	str	r2, [r5, #0]
 800e090:	681d      	ldr	r5, [r3, #0]
 800e092:	6862      	ldr	r2, [r4, #4]
 800e094:	2100      	movs	r1, #0
 800e096:	4628      	mov	r0, r5
 800e098:	f7f6 f89a 	bl	80041d0 <memchr>
 800e09c:	b108      	cbz	r0, 800e0a2 <_printf_i+0x1ea>
 800e09e:	1b40      	subs	r0, r0, r5
 800e0a0:	6060      	str	r0, [r4, #4]
 800e0a2:	6863      	ldr	r3, [r4, #4]
 800e0a4:	6123      	str	r3, [r4, #16]
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0ac:	e7aa      	b.n	800e004 <_printf_i+0x14c>
 800e0ae:	6923      	ldr	r3, [r4, #16]
 800e0b0:	462a      	mov	r2, r5
 800e0b2:	4649      	mov	r1, r9
 800e0b4:	4640      	mov	r0, r8
 800e0b6:	47d0      	blx	sl
 800e0b8:	3001      	adds	r0, #1
 800e0ba:	d0ad      	beq.n	800e018 <_printf_i+0x160>
 800e0bc:	6823      	ldr	r3, [r4, #0]
 800e0be:	079b      	lsls	r3, r3, #30
 800e0c0:	d413      	bmi.n	800e0ea <_printf_i+0x232>
 800e0c2:	68e0      	ldr	r0, [r4, #12]
 800e0c4:	9b03      	ldr	r3, [sp, #12]
 800e0c6:	4298      	cmp	r0, r3
 800e0c8:	bfb8      	it	lt
 800e0ca:	4618      	movlt	r0, r3
 800e0cc:	e7a6      	b.n	800e01c <_printf_i+0x164>
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	4632      	mov	r2, r6
 800e0d2:	4649      	mov	r1, r9
 800e0d4:	4640      	mov	r0, r8
 800e0d6:	47d0      	blx	sl
 800e0d8:	3001      	adds	r0, #1
 800e0da:	d09d      	beq.n	800e018 <_printf_i+0x160>
 800e0dc:	3501      	adds	r5, #1
 800e0de:	68e3      	ldr	r3, [r4, #12]
 800e0e0:	9903      	ldr	r1, [sp, #12]
 800e0e2:	1a5b      	subs	r3, r3, r1
 800e0e4:	42ab      	cmp	r3, r5
 800e0e6:	dcf2      	bgt.n	800e0ce <_printf_i+0x216>
 800e0e8:	e7eb      	b.n	800e0c2 <_printf_i+0x20a>
 800e0ea:	2500      	movs	r5, #0
 800e0ec:	f104 0619 	add.w	r6, r4, #25
 800e0f0:	e7f5      	b.n	800e0de <_printf_i+0x226>
 800e0f2:	bf00      	nop
 800e0f4:	0800e7a1 	.word	0x0800e7a1
 800e0f8:	0800e7b2 	.word	0x0800e7b2

0800e0fc <memmove>:
 800e0fc:	4288      	cmp	r0, r1
 800e0fe:	b510      	push	{r4, lr}
 800e100:	eb01 0402 	add.w	r4, r1, r2
 800e104:	d902      	bls.n	800e10c <memmove+0x10>
 800e106:	4284      	cmp	r4, r0
 800e108:	4623      	mov	r3, r4
 800e10a:	d807      	bhi.n	800e11c <memmove+0x20>
 800e10c:	1e43      	subs	r3, r0, #1
 800e10e:	42a1      	cmp	r1, r4
 800e110:	d008      	beq.n	800e124 <memmove+0x28>
 800e112:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e116:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e11a:	e7f8      	b.n	800e10e <memmove+0x12>
 800e11c:	4402      	add	r2, r0
 800e11e:	4601      	mov	r1, r0
 800e120:	428a      	cmp	r2, r1
 800e122:	d100      	bne.n	800e126 <memmove+0x2a>
 800e124:	bd10      	pop	{r4, pc}
 800e126:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e12a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e12e:	e7f7      	b.n	800e120 <memmove+0x24>

0800e130 <_realloc_r>:
 800e130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e134:	4680      	mov	r8, r0
 800e136:	4614      	mov	r4, r2
 800e138:	460e      	mov	r6, r1
 800e13a:	b921      	cbnz	r1, 800e146 <_realloc_r+0x16>
 800e13c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e140:	4611      	mov	r1, r2
 800e142:	f7ff bba9 	b.w	800d898 <_malloc_r>
 800e146:	b92a      	cbnz	r2, 800e154 <_realloc_r+0x24>
 800e148:	f7ff fca4 	bl	800da94 <_free_r>
 800e14c:	4625      	mov	r5, r4
 800e14e:	4628      	mov	r0, r5
 800e150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e154:	f000 f81b 	bl	800e18e <_malloc_usable_size_r>
 800e158:	4284      	cmp	r4, r0
 800e15a:	4607      	mov	r7, r0
 800e15c:	d802      	bhi.n	800e164 <_realloc_r+0x34>
 800e15e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e162:	d812      	bhi.n	800e18a <_realloc_r+0x5a>
 800e164:	4621      	mov	r1, r4
 800e166:	4640      	mov	r0, r8
 800e168:	f7ff fb96 	bl	800d898 <_malloc_r>
 800e16c:	4605      	mov	r5, r0
 800e16e:	2800      	cmp	r0, #0
 800e170:	d0ed      	beq.n	800e14e <_realloc_r+0x1e>
 800e172:	42bc      	cmp	r4, r7
 800e174:	4622      	mov	r2, r4
 800e176:	4631      	mov	r1, r6
 800e178:	bf28      	it	cs
 800e17a:	463a      	movcs	r2, r7
 800e17c:	f7ff fc7c 	bl	800da78 <memcpy>
 800e180:	4631      	mov	r1, r6
 800e182:	4640      	mov	r0, r8
 800e184:	f7ff fc86 	bl	800da94 <_free_r>
 800e188:	e7e1      	b.n	800e14e <_realloc_r+0x1e>
 800e18a:	4635      	mov	r5, r6
 800e18c:	e7df      	b.n	800e14e <_realloc_r+0x1e>

0800e18e <_malloc_usable_size_r>:
 800e18e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e192:	1f18      	subs	r0, r3, #4
 800e194:	2b00      	cmp	r3, #0
 800e196:	bfbc      	itt	lt
 800e198:	580b      	ldrlt	r3, [r1, r0]
 800e19a:	18c0      	addlt	r0, r0, r3
 800e19c:	4770      	bx	lr
	...

0800e1a0 <_init>:
 800e1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1a2:	bf00      	nop
 800e1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1a6:	bc08      	pop	{r3}
 800e1a8:	469e      	mov	lr, r3
 800e1aa:	4770      	bx	lr

0800e1ac <_fini>:
 800e1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ae:	bf00      	nop
 800e1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1b2:	bc08      	pop	{r3}
 800e1b4:	469e      	mov	lr, r3
 800e1b6:	4770      	bx	lr
